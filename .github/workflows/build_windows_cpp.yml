name: Windows C++17

on:
  workflow_call:

jobs:
  cpp:
    strategy:
      fail-fast: false
      matrix:
        include:
        # use v143 as v142 leads to a freeze in VariantTest/visit in Debug
        # msvc bug https://developercommunity.visualstudio.com/t/runtime-stack-corruption-using-stdvisit/346200
        - { os: "windows-2022", msvc-toolset: "v143", cxx-standard: "17", build-type: "Release" }
        - { os: "windows-2022", msvc-toolset: "v143", cxx-standard: "17", build-type: "Debug" }

        # fires -Werror=conversion on IntWrapper default template argument
        #- { os: "windows-2022", mingw-version: "9.4.0", cxx-standard: "17", build-type: "Release" }
        #- { os: "windows-2022", mingw-version: "9.4.0", cxx-standard: "17", build-type: "Debug" }

        - { os: "windows-2022", mingw-version: "11.2.0", cxx-standard: "17", build-type: "Release" }
        - { os: "windows-2022", mingw-version: "11.2.0", cxx-standard: "17", build-type: "Debug" }

    runs-on: ${{matrix.os}}
    name: "\
      ${{matrix.os}}-\
      ${{ matrix.msvc-toolset && format('msvc-{0}', matrix.msvc-toolset)
          || format('mingw{0}', matrix.mingw-version) }}-\
      c++${{matrix.cxx-standard}}-${{matrix.build-type}}"

    steps:
    - name: "Set up environment"
      shell: bash
      run: |
        if [[ "${{matrix.msvc-toolset}}" != "" ]] ; then
          echo "MSVC_CMAKE_TOOLSET=${{matrix.msvc-toolset}}" >> ${GITHUB_ENV}
          echo "PACKAGE=windows64-msvc" >> ${GITHUB_ENV}
          # v141 toolset is not installed in windows-2022/VS2022 image by default
          if [[ "${{matrix.msvc-toolset}}" == "v141" ]] ; then
            echo "MSVC_CMAKE_GENERATOR=Visual Studio 16 2019" >> ${GITHUB_ENV}
          else
            echo "MSVC_CMAKE_GENERATOR=Visual Studio 17 2022" >> ${GITHUB_ENV}
          fi
        fi

        if [[ "${{matrix.mingw-version}}" != "" ]] ; then
          echo "MINGW64_TOOLCHAIN_ROOT=/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64" >> ${GITHUB_ENV}
          echo "PACKAGE=windows64-mingw" >> ${GITHUB_ENV}
        fi

        CMAKE_EXTRA_ARGS=("-DZSERIO_ENABLE_WERROR=ON"
                          "-DZSERIO_USE_BUNDLE=ON"
                          "-DCMAKE_BUILD_TYPE=${{matrix.build-type}}"
                          "-DCMAKE_CXX_STANDARD=${{matrix.cxx-standard}}")

        echo "CLANG_FORMAT_BIN=clang-format" >> ${GITHUB_ENV}
        echo "CMAKE_EXTRA_ARGS=${CMAKE_EXTRA_ARGS[@]}" >> ${GITHUB_ENV}

    - name: Install dependencies
      shell: bash
      run: |
        choco install wget
        choco install doxygen.portable
        choco install graphviz
        choco install zip

    - name: Install mingw ${{matrix.mingw-version}} compiler
      shell: bash
      if: ${{ matrix.mingw-version != '' }}
      run: |
        choco install mingw --version ${{matrix.mingw-version}}

    - name: Install clang format
      shell: bash
      run: |
        choco install llvm --version=18.1.8 --allow-downgrade

    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build Zserio C++ runtime
      shell: bash
      run: |
        mkdir -p "${RUNNER_WORKSPACE}/build/download"
        pushd "${RUNNER_WORKSPACE}/build/download"
        ARTIFACT_ID="3363753344"
        curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L -o linux-release-2.16.0.zip "https://api.github.com/repos/ndsev/zserio/actions/artifacts/${ARTIFACT_ID}/zip"
        unzip linux-release-2.16.0.zip
        unzip zserio-2.16.0-bin.zip
        popd
        scripts/build.sh cpp_rt-${PACKAGE} -z "../../build/download"

    - name: Archive Zserio C++ runtime artifacts
      uses: actions/upload-artifact@v4
      # we want this artifact only once since it contains only sources
      if: ${{ matrix.msvc-toolset == 'v141' && matrix.cxx-standard && matrix.build-type == 'Release' }}
      with:
        name: "zserio-runtime-cpp"
        path: distr/runtime_lib

    - name: Archive Zserio C++ build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "\
          zserio-build-${{matrix.os}}-\
          ${{ matrix.msvc-toolset && format('msvc-{0}', matrix.msvc-toolset)
              || format('mingw{0}', matrix.mingw-version)}}-\
          cxx${{matrix.cxx-standard}}-${{matrix.build-type}}"
        path: |
          build/runtime_lib/**/runtime/**/*.a
          build/runtime_lib/**/runtime/**/*.lib

    - name: Download Zserio bundle artifact
      uses: actions/download-artifact@v4
      with:
        name: zserio-java8
        path: distr

    - name: Run Zserio integration tests
      shell: bash
      run: |
        scripts/test.sh cpp-${PACKAGE}

    - name: Run Zserio integration tests with extra arguments
      shell: bash
      run: |
        export ZSERIO_EXTRA_ARGS="-setCppAllocator pmr"
        scripts/test.sh -p cpp-${PACKAGE}
        export ZSERIO_EXTRA_ARGS="-setCppAllocator ppmr"
        scripts/test.sh -p cpp-${PACKAGE}

    - name: Run Zserio custom integration test
      shell: bash
      run: |
        scripts/test_zs.sh cpp-${PACKAGE} -d test/data/others/gif/zs -s gif.zs

    - name: Run Zserio performance test
      shell: bash
      run: |
        scripts/test_perf.sh cpp-${PACKAGE} -d test/data/others/gif/zs -s gif.zs -b gif.GifFile \
              -f test/data/others/gif/data/1pix.gif -c READ
        scripts/test_perf.sh cpp-${PACKAGE} -d test/data/others/gif/zs -s gif.zs -b gif.GifFile \
              -f test/data/others/gif/data/1pix.gif -c WRITE
        scripts/test_perf.sh cpp-${PACKAGE} -d test/data/others/gif/zs -s gif.zs -b gif.GifFile \
              -f test/data/others/gif/data/1pix.gif -c READ_WRITE
