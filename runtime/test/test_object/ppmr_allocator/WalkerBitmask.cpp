/**
 * Automatically generated by Zserio C++17 generator version 0.3.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, ppmrAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/IntrospectableView.h>
#include <zserio/ReflectableData.h>
#include <zserio/TypeInfo.h>

#include <test_object/ppmr_allocator/WalkerBitmask.h>

namespace test_object
{
namespace ppmr_allocator
{

::zserio::ppmr::String WalkerBitmask::toString(const ::zserio::ppmr::String::allocator_type& allocator) const
{
    ::zserio::ppmr::String result(allocator);
    if ((*this & WalkerBitmask::Values::ZERO) == WalkerBitmask::Values::ZERO)
    {
        result += result.empty() ? "ZERO" : " | ZERO";
    }

    return ::zserio::toString<::zserio::ppmr::String::allocator_type>(
            static_cast<ZserioType::ValueType>(m_value), allocator) + "[" + result + "]";
}

} // namespace ppmr_allocator
} // namespace test_object

namespace zserio
{
namespace detail
{

const ::zserio::ppmr::ITypeInfo& TypeInfo<::test_object::ppmr_allocator::WalkerBitmask, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>::get()
{
    using AllocatorType = ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>;

    static const ::std::array<::zserio::ItemInfo, 1> values = {
        ::zserio::ItemInfo{ "ZERO", static_cast<uint64_t>(UINT32_C(1)), false, false}
    };

    static const ::zserio::detail::BitmaskTypeInfo<AllocatorType> typeInfo = {
        "test_object.ppmr_allocator.WalkerBitmask",
        ::zserio::typeInfo<::zserio::UInt32, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>(),
        values
    };

    return typeInfo;
}

} // namespace detail

template <>
::zserio::ppmr::IReflectableDataPtr reflectable(::test_object::ppmr_allocator::WalkerBitmask value, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator)
{
    class Reflectable : public ::zserio::detail::ReflectableDataBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
    {
    public:
        using ::zserio::detail::ReflectableDataBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>::getAnyValue;

        explicit Reflectable(::test_object::ppmr_allocator::WalkerBitmask bitmask) :
                ::zserio::detail::ReflectableDataBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>(
                        typeInfo<::test_object::ppmr_allocator::WalkerBitmask, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>()),
                m_bitmask(bitmask)
        {}

        ::zserio::ppmr::Any getAnyValue(const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc) const override
        {
            return ::zserio::ppmr::Any(m_bitmask, alloc);
        }

        ::zserio::ppmr::Any getAnyValue(const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc) override
        {
            return ::zserio::ppmr::Any(m_bitmask, alloc);
        }

        ::test_object::ppmr_allocator::WalkerBitmask::ZserioType::ValueType getUInt32() const override
        {
            return m_bitmask.getValue();
        }

        uint64_t toUInt() const override
        {
            return m_bitmask.getValue();
        }

        double toDouble() const override
        {
            return static_cast<double>(toUInt());
        }

        ::zserio::ppmr::String toString(const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc) const override
        {
            return m_bitmask.toString(alloc);
        }

    private:
        ::test_object::ppmr_allocator::WalkerBitmask m_bitmask;
    };

    return ::std::allocate_shared<Reflectable>(allocator, value);
}

template <>
::zserio::ppmr::IIntrospectableViewConstPtr introspectable(::test_object::ppmr_allocator::WalkerBitmask value, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator)
{
    class Introspectable : public ::zserio::detail::IntrospectableViewBase<::test_object::ppmr_allocator::WalkerBitmask, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
    {
    public:
        explicit Introspectable(::test_object::ppmr_allocator::WalkerBitmask bitmask) :
                ::zserio::detail::IntrospectableViewBase<::test_object::ppmr_allocator::WalkerBitmask, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>(
                        typeInfo<::test_object::ppmr_allocator::WalkerBitmask, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>(), bitmask)
        {}
        ::test_object::ppmr_allocator::WalkerBitmask::ZserioType::ValueType getUInt32() const override
        {
            return getValue().getValue();
        }

        uint64_t toUInt() const override
        {
            return getValue().getValue();
        }

        double toDouble() const override
        {
            return static_cast<double>(toUInt());
        }

        ::zserio::ppmr::String toString(const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc) const override
        {
            return getValue().toString(alloc);
        }
    };

    return ::std::allocate_shared<Introspectable>(allocator, value);
}

} // namespace zserio

namespace std
{

size_t hash<::test_object::ppmr_allocator::WalkerBitmask>::operator()(const ::test_object::ppmr_allocator::WalkerBitmask& value) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result,
            static_cast<::test_object::ppmr_allocator::WalkerBitmask::ZserioType::ValueType>(value.getValue()));
    return static_cast<size_t>(result);
}

} // namespace std
