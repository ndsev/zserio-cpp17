/**
 * Automatically generated by Zserio C++17 generator version 0.4.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, ppmrAllocator.
 */

#ifndef TEST_OBJECT_PPMR_ALLOCATOR_WALKER_CHOICE_H
#define TEST_OBJECT_PPMR_ALLOCATOR_WALKER_CHOICE_H

#include <memory>

#include <zserio/ppmr/Variant.h>
#include <zserio/ChoiceTag.h>
#include <zserio/ppmr/ITypeInfo.h>
#include <zserio/ppmr/IReflectableData.h>
#include <zserio/ppmr/IIntrospectableView.h>
#include <zserio/View.h>
#include <zserio/Types.h>

namespace test_object
{
namespace ppmr_allocator
{

// forward declaration
struct WalkerChoice;

} // namespace ppmr_allocator
} // namespace test_object

namespace zserio
{
namespace detail
{

template <>
struct ChoiceTag<::test_object::ppmr_allocator::WalkerChoice>
{
    enum Tag : size_t
    {
        ZSERIO_UNDEFINED,
        value8,
        value16,
        value32,
        value64
    };
};

} // namespace detail
} // namespace zserio

namespace test_object
{
namespace ppmr_allocator
{

struct WalkerChoice : ::zserio::ppmr::Variant<::zserio::detail::ChoiceTag<WalkerChoice>::Tag,
        ::std::monostate,
        ::zserio::UInt8,
        ::zserio::UInt16,
        ::zserio::UInt32,
        ::zserio::UInt64>
{
    using Tag = ::zserio::detail::ChoiceTag<WalkerChoice>::Tag;
    using Base = ::zserio::ppmr::Variant<Tag,
            ::std::monostate,
            ::zserio::UInt8,
            ::zserio::UInt16,
            ::zserio::UInt32,
            ::zserio::UInt64>;
    using Base::BasicVariant;
};

bool operator==(const ::test_object::ppmr_allocator::WalkerChoice& lhs, const ::test_object::ppmr_allocator::WalkerChoice& rhs);
bool operator<(const ::test_object::ppmr_allocator::WalkerChoice& lhs, const ::test_object::ppmr_allocator::WalkerChoice& rhs);
bool operator!=(const ::test_object::ppmr_allocator::WalkerChoice& lhs, const ::test_object::ppmr_allocator::WalkerChoice& rhs);
bool operator>(const ::test_object::ppmr_allocator::WalkerChoice& lhs, const ::test_object::ppmr_allocator::WalkerChoice& rhs);
bool operator<=(const ::test_object::ppmr_allocator::WalkerChoice& lhs, const ::test_object::ppmr_allocator::WalkerChoice& rhs);
bool operator>=(const ::test_object::ppmr_allocator::WalkerChoice& lhs, const ::test_object::ppmr_allocator::WalkerChoice& rhs);

} // namespace ppmr_allocator
} // namespace test_object

namespace zserio
{

template <>
class View<::test_object::ppmr_allocator::WalkerChoice>
{
public:
    explicit View(const ::test_object::ppmr_allocator::WalkerChoice& data,
            ::zserio::UInt8 selector_) noexcept;

    ::zserio::UInt8 selector() const;

    ::zserio::UInt8 value8() const;
    ::zserio::UInt16 value16() const;
    ::zserio::UInt32 value32() const;
    ::zserio::UInt64 value64() const;

    ::test_object::ppmr_allocator::WalkerChoice::Tag zserioChoiceTag() const;
    const ::test_object::ppmr_allocator::WalkerChoice& zserioData() const;

protected:
    View(const ::test_object::ppmr_allocator::WalkerChoice& data, const View& other) noexcept;

private:
    const ::test_object::ppmr_allocator::WalkerChoice* m_data;
    ::zserio::UInt8 m_selector_;
};

bool operator==(const View<::test_object::ppmr_allocator::WalkerChoice>& lhs, const View<::test_object::ppmr_allocator::WalkerChoice>& rhs);
bool operator<(const View<::test_object::ppmr_allocator::WalkerChoice>& lhs, const View<::test_object::ppmr_allocator::WalkerChoice>& rhs);
bool operator!=(const View<::test_object::ppmr_allocator::WalkerChoice>& lhs, const View<::test_object::ppmr_allocator::WalkerChoice>& rhs);
bool operator>(const View<::test_object::ppmr_allocator::WalkerChoice>& lhs, const View<::test_object::ppmr_allocator::WalkerChoice>& rhs);
bool operator<=(const View<::test_object::ppmr_allocator::WalkerChoice>& lhs, const View<::test_object::ppmr_allocator::WalkerChoice>& rhs);
bool operator>=(const View<::test_object::ppmr_allocator::WalkerChoice>& lhs, const View<::test_object::ppmr_allocator::WalkerChoice>& rhs);

namespace detail
{

template <>
void validate(const View<::test_object::ppmr_allocator::WalkerChoice>& view, ::std::string_view fieldName);

template <>
BitSize bitSizeOf(const View<::test_object::ppmr_allocator::WalkerChoice>& view, BitSize bitPosition);

template <>
void write(BitStreamWriter& writer, const View<::test_object::ppmr_allocator::WalkerChoice>& view);

template <>
View<::test_object::ppmr_allocator::WalkerChoice> read(BitStreamReader& reader, ::test_object::ppmr_allocator::WalkerChoice& data,
        ::zserio::UInt8 selector_);

template <>
struct TypeInfo<::test_object::ppmr_allocator::WalkerChoice, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
{
    static const ::zserio::ppmr::ITypeInfo& get();
};

} // namespace detail

template <>
::zserio::ppmr::IReflectableDataConstPtr reflectable(const ::test_object::ppmr_allocator::WalkerChoice& value, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);

template <>
::zserio::ppmr::IReflectableDataPtr reflectable(::test_object::ppmr_allocator::WalkerChoice& value, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);

template <>
::zserio::ppmr::IIntrospectableViewConstPtr introspectable(const View<::test_object::ppmr_allocator::WalkerChoice>& view, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);

} // namespace zserio

namespace std
{

template <>
struct hash<::test_object::ppmr_allocator::WalkerChoice>
{
    size_t operator()(const ::test_object::ppmr_allocator::WalkerChoice& value) const;
};

template <>
struct hash<::zserio::View<::test_object::ppmr_allocator::WalkerChoice>>
{
    size_t operator()(const ::zserio::View<::test_object::ppmr_allocator::WalkerChoice>& view) const;
};

} // namespace std

#endif // TEST_OBJECT_PPMR_ALLOCATOR_WALKER_CHOICE_H
