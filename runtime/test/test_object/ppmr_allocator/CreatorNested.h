/**
 * Automatically generated by Zserio C++17 generator version 0.4.0 using Zserio core 2.16.1.
 * Generator setup: typeInfoCode, ppmrAllocator.
 */

#ifndef TEST_OBJECT_PPMR_ALLOCATOR_CREATOR_NESTED_H
#define TEST_OBJECT_PPMR_ALLOCATOR_CREATOR_NESTED_H

#include <memory>
#include <zserio/ppmr/ITypeInfo.h>
#include <zserio/ppmr/IReflectableData.h>
#include <zserio/ppmr/IIntrospectableView.h>
#include <zserio/View.h>
#include <zserio/ppmr/PropagatingPolymorphicAllocator.h>
#include <zserio/Types.h>
#include <zserio/ppmr/BitBuffer.h>
#include <zserio/ppmr/Bytes.h>
#include <zserio/ppmr/String.h>

#include <test_object/ppmr_allocator/CreatorBitmask.h>
#include <test_object/ppmr_allocator/CreatorEnum.h>

namespace test_object
{
namespace ppmr_allocator
{

struct CreatorNested
{
    using allocator_type = ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>;

    CreatorNested() noexcept;
    explicit CreatorNested(const allocator_type& allocator) noexcept;

    CreatorNested(CreatorNested&&) = default;
    CreatorNested(CreatorNested&& other, const allocator_type& allocator);

    CreatorNested(const CreatorNested&) = default;
    CreatorNested(const CreatorNested& other, const allocator_type& allocator);

    CreatorNested& operator=(CreatorNested&&) = default;
    CreatorNested& operator=(const CreatorNested&) = default;

    ~CreatorNested() = default;

    CreatorNested(
            ::zserio::UInt32 value_,
            ::zserio::ppmr::String text_,
            ::zserio::ppmr::BitBuffer externData_,
            ::zserio::ppmr::Bytes bytesData_,
            ::test_object::ppmr_allocator::CreatorEnum creatorEnum_,
            ::test_object::ppmr_allocator::CreatorBitmask creatorBitmask_,
            const allocator_type& allocator = {});

    ::zserio::UInt32 value;
    ::zserio::ppmr::String text;
    ::zserio::ppmr::BitBuffer externData;
    ::zserio::ppmr::Bytes bytesData;
    ::test_object::ppmr_allocator::CreatorEnum creatorEnum;
    ::test_object::ppmr_allocator::CreatorBitmask creatorBitmask;
};

bool operator==(const ::test_object::ppmr_allocator::CreatorNested& lhs, const ::test_object::ppmr_allocator::CreatorNested& rhs);
bool operator<(const ::test_object::ppmr_allocator::CreatorNested& lhs, const ::test_object::ppmr_allocator::CreatorNested& rhs);
bool operator!=(const ::test_object::ppmr_allocator::CreatorNested& lhs, const ::test_object::ppmr_allocator::CreatorNested& rhs);
bool operator>(const ::test_object::ppmr_allocator::CreatorNested& lhs, const ::test_object::ppmr_allocator::CreatorNested& rhs);
bool operator<=(const ::test_object::ppmr_allocator::CreatorNested& lhs, const ::test_object::ppmr_allocator::CreatorNested& rhs);
bool operator>=(const ::test_object::ppmr_allocator::CreatorNested& lhs, const ::test_object::ppmr_allocator::CreatorNested& rhs);

} // namespace ppmr_allocator
} // namespace test_object

namespace zserio
{

template <>
class View<::test_object::ppmr_allocator::CreatorNested>
{
public:
    explicit View(const ::test_object::ppmr_allocator::CreatorNested& data,
            ::zserio::UInt32 param_) noexcept;

    ::zserio::UInt32 param() const;

    ::zserio::UInt32 value() const;
    ::std::string_view text() const;
    ::zserio::ppmr::BitBufferView externData() const;
    BytesView bytesData() const;
    ::test_object::ppmr_allocator::CreatorEnum creatorEnum() const;
    ::test_object::ppmr_allocator::CreatorBitmask creatorBitmask() const;

    const ::test_object::ppmr_allocator::CreatorNested& zserioData() const;

protected:
    View(const ::test_object::ppmr_allocator::CreatorNested& data, const View& other) noexcept;

private:
    const ::test_object::ppmr_allocator::CreatorNested* m_data;
    ::zserio::UInt32 m_param_;
};

bool operator==(const View<::test_object::ppmr_allocator::CreatorNested>& lhs, const View<::test_object::ppmr_allocator::CreatorNested>& rhs);
bool operator<(const View<::test_object::ppmr_allocator::CreatorNested>& lhs, const View<::test_object::ppmr_allocator::CreatorNested>& rhs);
bool operator!=(const View<::test_object::ppmr_allocator::CreatorNested>& lhs, const View<::test_object::ppmr_allocator::CreatorNested>& rhs);
bool operator>(const View<::test_object::ppmr_allocator::CreatorNested>& lhs, const View<::test_object::ppmr_allocator::CreatorNested>& rhs);
bool operator<=(const View<::test_object::ppmr_allocator::CreatorNested>& lhs, const View<::test_object::ppmr_allocator::CreatorNested>& rhs);
bool operator>=(const View<::test_object::ppmr_allocator::CreatorNested>& lhs, const View<::test_object::ppmr_allocator::CreatorNested>& rhs);

namespace detail
{

template <>
struct ObjectTraits<::test_object::ppmr_allocator::CreatorNested>
{
    using Parameters = std::tuple<
            ::zserio::UInt32>;

    static void validate(const View<::test_object::ppmr_allocator::CreatorNested>& view, ::std::string_view fieldName);

    static BitSize bitSizeOf(const View<::test_object::ppmr_allocator::CreatorNested>& view, BitSize bitPosition);

    static void write(BitStreamWriter& writer, const View<::test_object::ppmr_allocator::CreatorNested>& view);

    static View<::test_object::ppmr_allocator::CreatorNested> read(BitStreamReader& reader, ::test_object::ppmr_allocator::CreatorNested& data,
            ::zserio::UInt32 param_);
};

template <>
struct TypeInfo<::test_object::ppmr_allocator::CreatorNested, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
{
    static const ::zserio::ppmr::ITypeInfo& get();
};

template <>
struct Reflectable<::test_object::ppmr_allocator::CreatorNested, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
{
    static ::zserio::ppmr::IReflectableDataConstPtr create(const ::test_object::ppmr_allocator::CreatorNested& value,
            const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);

    static ::zserio::ppmr::IReflectableDataPtr create(::test_object::ppmr_allocator::CreatorNested& value,
            const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);
};

template <>
struct Introspectable<::test_object::ppmr_allocator::CreatorNested, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
{
    static ::zserio::ppmr::IIntrospectableViewConstPtr create(const View<::test_object::ppmr_allocator::CreatorNested>& view,
            const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);
};

} // namespace detail
} // namespace zserio

namespace std
{

template <>
struct hash<::test_object::ppmr_allocator::CreatorNested>
{
    size_t operator()(const ::test_object::ppmr_allocator::CreatorNested& data) const;
};

template <>
struct hash<::zserio::View<::test_object::ppmr_allocator::CreatorNested>>
{
    size_t operator()(const ::zserio::View<::test_object::ppmr_allocator::CreatorNested>& view) const;
};

} // namespace std

#endif // TEST_OBJECT_PPMR_ALLOCATOR_CREATOR_NESTED_H
