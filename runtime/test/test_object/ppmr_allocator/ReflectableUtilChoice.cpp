/**
 * Automatically generated by Zserio C++17 generator version 0.3.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, ppmrAllocator.
 */

#include <zserio/ChoiceCaseException.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/IntrospectableView.h>
#include <zserio/ReflectableData.h>
#include <zserio/ReflectableUtil.h>
#include <zserio/TypeInfo.h>

#include <test_object/ppmr_allocator/ReflectableUtilChoice.h>

namespace test_object
{
namespace ppmr_allocator
{

bool operator==(const ::test_object::ppmr_allocator::ReflectableUtilChoice& lhs, const ::test_object::ppmr_allocator::ReflectableUtilChoice& rhs)
{
    return static_cast<const ::test_object::ppmr_allocator::ReflectableUtilChoice::Base&>(lhs) == static_cast<const ::test_object::ppmr_allocator::ReflectableUtilChoice::Base&>(rhs);
}

bool operator<(const ::test_object::ppmr_allocator::ReflectableUtilChoice& lhs, const ::test_object::ppmr_allocator::ReflectableUtilChoice&  rhs)
{
    return static_cast<const ::test_object::ppmr_allocator::ReflectableUtilChoice::Base&>(lhs) < static_cast<const ::test_object::ppmr_allocator::ReflectableUtilChoice::Base&>(rhs);
}

bool operator!=(const ::test_object::ppmr_allocator::ReflectableUtilChoice& lhs, const ::test_object::ppmr_allocator::ReflectableUtilChoice& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const ::test_object::ppmr_allocator::ReflectableUtilChoice& lhs, const ::test_object::ppmr_allocator::ReflectableUtilChoice& rhs)
{
    return rhs < lhs;
}

bool operator<=(const ::test_object::ppmr_allocator::ReflectableUtilChoice& lhs, const ::test_object::ppmr_allocator::ReflectableUtilChoice& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const ::test_object::ppmr_allocator::ReflectableUtilChoice& lhs, const ::test_object::ppmr_allocator::ReflectableUtilChoice& rhs)
{
    return !(lhs < rhs);
}

} // namespace ppmr_allocator
} // namespace test_object

namespace zserio
{

View<::test_object::ppmr_allocator::ReflectableUtilChoice>::View(const ::test_object::ppmr_allocator::ReflectableUtilChoice& data,
        ::zserio::UInt8 param_) noexcept :
        m_data(&data),
        m_param_(param_)
{}

View<::test_object::ppmr_allocator::ReflectableUtilChoice>::View(const ::test_object::ppmr_allocator::ReflectableUtilChoice& data,
        const View& other) noexcept :
        m_data(&data),
        m_param_(other.param())
{}

::zserio::UInt8 View<::test_object::ppmr_allocator::ReflectableUtilChoice>::param() const
{
    return m_param_;
}

ArrayView<const ::zserio::UInt32> View<::test_object::ppmr_allocator::ReflectableUtilChoice>::array() const
{
    return ArrayView<const ::zserio::UInt32>{get<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>(*m_data)};
}

::test_object::ppmr_allocator::ReflectableUtilChoice::Tag View<::test_object::ppmr_allocator::ReflectableUtilChoice>::zserioChoiceTag() const
{
    return m_data->index();
}

const ::test_object::ppmr_allocator::ReflectableUtilChoice& View<::test_object::ppmr_allocator::ReflectableUtilChoice>::zserioData() const
{
    return *m_data;
}

bool operator==(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& lhs, const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& rhs)
{
    if (lhs.param() != rhs.param())
    {
        return false;
    }

    if (lhs.zserioChoiceTag() != rhs.zserioChoiceTag())
    {
        return false;
    }

    switch (lhs.zserioChoiceTag())
    {
    case ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array:
        return (lhs.array() == rhs.array());
    default:
        return true;
    }
}

bool operator<(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& lhs, const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& rhs)
{
    if (lhs.param() != rhs.param())
    {
        return lhs.param() < rhs.param();
    }

    if (lhs.zserioChoiceTag() != rhs.zserioChoiceTag())
    {
        return lhs.zserioChoiceTag() < rhs.zserioChoiceTag();
    }

    switch (lhs.zserioChoiceTag())
    {
    case ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array:
        return (lhs.array() < rhs.array());
    default:
        return false;
    }
}

bool operator!=(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& lhs, const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& lhs, const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& lhs, const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& lhs, const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& rhs)
{
    return !(lhs < rhs);
}

namespace detail
{

template <>
void validate(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& view, ::std::string_view)
{
    validate(view.param(), "'ReflectableUtilChoice.param'");
    switch (view.param())
    {
    case 1:
    case 2:
        // check choice case
        if (view.zserioChoiceTag() != ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array)
        {
            throw ChoiceCaseException("Wrong case set in choice 'ReflectableUtilChoice' (") << static_cast<size_t>(view.zserioChoiceTag()) <<
                    " != " << static_cast<size_t>(::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array) << ")!";
        }
        validate<ArrayType::AUTO>(view.array(), "'ReflectableUtilChoice.array'");
        break;
    default:
        // empty
        break;
    }
}

template <>
BitSize bitSizeOf(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& view, BitSize bitPosition)
{
    BitSize endBitPosition = bitPosition;
    switch (view.zserioChoiceTag())
    {
    case ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array:
        endBitPosition += bitSizeOf<ArrayType::AUTO>(view.array(), endBitPosition);
        break;
    default:
        break;
    }

    return endBitPosition - bitPosition;
}

template <>
void write(BitStreamWriter& writer, const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& view)
{
    switch (view.zserioChoiceTag())
    {
    case ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array:
        write<ArrayType::AUTO>(writer, view.array());
        break;
    default:
        break;
    }
}

template <>
View<::test_object::ppmr_allocator::ReflectableUtilChoice> read(BitStreamReader& reader, ::test_object::ppmr_allocator::ReflectableUtilChoice& data,
        ::zserio::UInt8 param_)
{
    View<::test_object::ppmr_allocator::ReflectableUtilChoice> view(data,
            param_);
    switch (view.param())
    {
    case 1:
    case 2:
        data.emplace<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>();
        read<ArrayType::AUTO>(reader, data.get<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>());
        break;
    default:
        // empty
        break;
    }

    return view;
}

const ::zserio::ppmr::ITypeInfo& TypeInfo<::test_object::ppmr_allocator::ReflectableUtilChoice, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>::get()
{
    using AllocatorType = ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>;

    static const ::std::string_view templateName;
    static const ::zserio::Span<::zserio::BasicTemplateArgumentInfo<AllocatorType>> templateArguments;

    static const ::std::array<::zserio::BasicFieldInfo<AllocatorType>, 1> fields = {
        ::zserio::BasicFieldInfo<AllocatorType>{
            "array", // schemaName
            ::zserio::typeInfo<::zserio::UInt32, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            true, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        }
    };

    static const ::std::array<::zserio::BasicParameterInfo<AllocatorType>, 1> parameters = {
        ::zserio::BasicParameterInfo<AllocatorType>{
            "param",
            ::zserio::typeInfo<::zserio::UInt8, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>()
        }
    };

    static const ::zserio::Span<::zserio::BasicFunctionInfo<AllocatorType>> functions;

    static const std::array<::std::string_view, 2> case0Expressions = {
        "1",
        "2"
    };
    static const ::std::array<::zserio::BasicCaseInfo<AllocatorType>, 2> cases = {
        ::zserio::BasicCaseInfo<AllocatorType>{
            case0Expressions,
            &fields[0]
        },
        ::zserio::BasicCaseInfo<AllocatorType>{
            {}, nullptr
        }
    };

    static const ::zserio::detail::ChoiceTypeInfo<AllocatorType> typeInfo = {
        "test_object.ppmr_allocator.ReflectableUtilChoice",
        [](const AllocatorType& allocator) -> ::zserio::ppmr::IReflectableDataPtr
        {
            return ::std::allocate_shared<::zserio::detail::ReflectableDataOwner<::test_object::ppmr_allocator::ReflectableUtilChoice>>(allocator);
        },
        templateName, templateArguments,
        fields, parameters, functions, "param()", cases
    };

    return typeInfo;
}

} // namespace detail

template <>
::zserio::ppmr::IReflectableDataConstPtr reflectable(const ::test_object::ppmr_allocator::ReflectableUtilChoice& value, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator)
{
    class Reflectable : public ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
    {
    public:
        using ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>::getField;
        using ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>::getAnyValue;

        explicit Reflectable(const ::test_object::ppmr_allocator::ReflectableUtilChoice& object, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc = {}) :
                ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>(typeInfo<::test_object::ppmr_allocator::ReflectableUtilChoice>(), alloc),
                m_object(object)
        {}

        ::zserio::ppmr::IReflectableDataConstPtr getField(::std::string_view name) const override
        {
            if (name == "array")
            {
                return ::zserio::reflectableArray(
                        get<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>(m_object), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilChoice'!";
        }

        ::std::string_view getChoice() const override
        {
            switch (m_object.index())
            {
            case ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array:
                return "array";
            default:
                return "";
            }
        }

        ::zserio::ppmr::Any getAnyValue(const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc) const override
        {
            return ::zserio::ppmr::Any(::std::cref(m_object), alloc);
        }

    private:
        const ::test_object::ppmr_allocator::ReflectableUtilChoice& m_object;
    };

    return ::std::allocate_shared<Reflectable>(allocator, value);
}

template <>
::zserio::ppmr::IReflectableDataPtr reflectable(::test_object::ppmr_allocator::ReflectableUtilChoice& value, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator)
{
    class Reflectable : public ::zserio::detail::ReflectableDataAllocatorHolderBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
    {
    public:
        using ::zserio::detail::ReflectableDataAllocatorHolderBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>::getField;
        using ::zserio::detail::ReflectableDataAllocatorHolderBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>::getAnyValue;

        explicit Reflectable(::test_object::ppmr_allocator::ReflectableUtilChoice& object, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc = {}) :
                ::zserio::detail::ReflectableDataAllocatorHolderBase<::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>(typeInfo<::test_object::ppmr_allocator::ReflectableUtilChoice>(), alloc),
                m_object(object)
        {}

        ::zserio::ppmr::IReflectableDataConstPtr getField(::std::string_view name) const override
        {
            if (name == "array")
            {
                return ::zserio::reflectableArray(
                        get<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>(m_object), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilChoice'!";
        }

        ::zserio::ppmr::IReflectableDataPtr getField(::std::string_view name) override
        {
            if (name == "array")
            {
                return ::zserio::reflectableArray(
                        get<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>(m_object), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilChoice'!";
        }

        void setField(::std::string_view name, const ::zserio::ppmr::Any& value) override
        {
            if (name == "array")
            {
                m_object.emplace<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>(
                        ::zserio::ReflectableUtil::fromAny<::zserio::ppmr::Vector<::zserio::UInt32>>(value));
                return;
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilChoice'!";
        }

        ::zserio::ppmr::IReflectableDataPtr createField(::std::string_view name) override
        {
            if (name == "array")
            {
                m_object.emplace<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>();
                return ::zserio::reflectableArray(get<::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array>(m_object), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilChoice'!";
        }

        ::std::string_view getChoice() const override
        {
            switch (m_object.index())
            {
            case ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array:
                return "array";
            default:
                return "";
            }
        }

        ::zserio::ppmr::Any getAnyValue(const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc) const override
        {
            return ::zserio::ppmr::Any(::std::cref(m_object), alloc);
        }

        ::zserio::ppmr::Any getAnyValue(const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc) override
        {
            return ::zserio::ppmr::Any(::std::ref(m_object), alloc);
        }

    private:
        ::test_object::ppmr_allocator::ReflectableUtilChoice& m_object;
    };

    return ::std::allocate_shared<Reflectable>(allocator, value);
}

template <>
::zserio::ppmr::IIntrospectableViewConstPtr introspectable(const View<::test_object::ppmr_allocator::ReflectableUtilChoice>& view, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator)
{
    class Introspectable : public ::zserio::detail::CompoundIntrospectableViewBase<::test_object::ppmr_allocator::ReflectableUtilChoice, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
    {
    public:
        explicit Introspectable(const ::zserio::View<::test_object::ppmr_allocator::ReflectableUtilChoice>& view_, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& alloc = {}) :
                ::zserio::detail::CompoundIntrospectableViewBase<::test_object::ppmr_allocator::ReflectableUtilChoice, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>(
                        view_, alloc)
        {}

        ::zserio::ppmr::IIntrospectableViewConstPtr getField(::std::string_view name) const override
        {
            if (name == "array")
            {
                return ::zserio::introspectableArray(getValue().array(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilChoice'!";
        }

        ::zserio::ppmr::IIntrospectableViewConstPtr getParameter(::std::string_view name) const override
        {
            if (name == "param")
            {
                return ::zserio::introspectable(getValue().param(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Parameter '") << name << "' doesn't exist in 'ReflectableUtilChoice'!";
        }

        ::std::string_view getChoice() const override
        {
            switch (getValue().zserioChoiceTag())
            {
            case ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array:
                return "array";
            default:
                return "";
            }
        }
    };

    return ::std::allocate_shared<Introspectable>(allocator, view);
}

} // namespace zserio

namespace std
{

size_t hash<::test_object::ppmr_allocator::ReflectableUtilChoice>::operator()(const ::test_object::ppmr_allocator::ReflectableUtilChoice& value) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, static_cast<const ::test_object::ppmr_allocator::ReflectableUtilChoice::Base&>(value));
    return static_cast<size_t>(result);
}

size_t hash<::zserio::View<::test_object::ppmr_allocator::ReflectableUtilChoice>>::operator()(const ::zserio::View<::test_object::ppmr_allocator::ReflectableUtilChoice>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, view.param());
    switch (view.zserioChoiceTag())
    {
    case ::test_object::ppmr_allocator::ReflectableUtilChoice::Tag::array:
        result = ::zserio::calcHashCode(result, view.array());
        break;
    default:
        break;
    }

    return static_cast<size_t>(result);
}

} // namespace std
