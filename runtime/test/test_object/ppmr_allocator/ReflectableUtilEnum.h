/**
 * Automatically generated by Zserio C++17 generator version 0.5.0 using Zserio core 2.17.0.
 * Generator setup: typeInfoCode, ppmrAllocator.
 */

#ifndef TEST_OBJECT_PPMR_ALLOCATOR_REFLECTABLE_UTIL_ENUM_H
#define TEST_OBJECT_PPMR_ALLOCATOR_REFLECTABLE_UTIL_ENUM_H

#include <array>

#include <zserio/ppmr/PropagatingPolymorphicAllocator.h>
#include <zserio/Enums.h>
#include <zserio/ppmr/ITypeInfo.h>
#include <zserio/ppmr/IReflectableData.h>
#include <zserio/ppmr/IIntrospectableView.h>
#include <zserio/Types.h>

namespace test_object
{
namespace ppmr_allocator
{

enum class ReflectableUtilEnum : ::zserio::Int8::ValueType
{
    ONE = INT8_C(0),
    TWO = INT8_C(1)
};

} // namespace ppmr_allocator
} // namespace test_object

namespace zserio
{

// This is full specialization of enumeration traits and methods for ReflectableUtilEnum enumeration.
template <>
struct EnumTraits<::test_object::ppmr_allocator::ReflectableUtilEnum>
{
    static constexpr ::std::array<::std::string_view, 2> names =
    {{
        "ONE",
        "TWO"
    }};

    static constexpr ::std::array<::test_object::ppmr_allocator::ReflectableUtilEnum, 2> values =
    {{
        ::test_object::ppmr_allocator::ReflectableUtilEnum::ONE,
        ::test_object::ppmr_allocator::ReflectableUtilEnum::TWO
    }};

    static constexpr ::std::string_view enumName = "ReflectableUtilEnum";

    using ZserioType = ::zserio::Int8;
};

template <>
size_t enumToOrdinal<::test_object::ppmr_allocator::ReflectableUtilEnum>(::test_object::ppmr_allocator::ReflectableUtilEnum value);

template <>
::test_object::ppmr_allocator::ReflectableUtilEnum valueToEnum<::test_object::ppmr_allocator::ReflectableUtilEnum>(::zserio::Int8 rawValue);

namespace detail
{

template <>
struct TypeInfo<::test_object::ppmr_allocator::ReflectableUtilEnum, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
{
    static const ::zserio::ppmr::ITypeInfo& get();
};

} // namespace detail

template <>
::zserio::ppmr::IReflectableDataPtr reflectable(::test_object::ppmr_allocator::ReflectableUtilEnum value, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);

template <>
::zserio::ppmr::IIntrospectableViewConstPtr introspectable(::test_object::ppmr_allocator::ReflectableUtilEnum value, const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);

} // namespace zserio

namespace std
{

template <>
struct hash<::test_object::ppmr_allocator::ReflectableUtilEnum>
{
    size_t operator()(const ::test_object::ppmr_allocator::ReflectableUtilEnum& value) const;
};

} // namespace std

#endif // TEST_OBJECT_PPMR_ALLOCATOR_REFLECTABLE_UTIL_ENUM_H
