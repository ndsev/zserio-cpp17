/**
 * Automatically generated by Zserio C++17 generator version 0.2.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, std-polymorphicAllocator.
 */

#include <zserio/BitPositionUtil.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/IntrospectableView.h>
#include <zserio/ReflectableData.h>
#include <zserio/ReflectableUtil.h>
#include <zserio/TypeInfo.h>

#include <test_object/std_polymorphic_allocator/ReflectableUtilObject.h>

namespace test_object
{
namespace std_polymorphic_allocator
{

ReflectableUtilObject::ReflectableUtilObject() noexcept :
        ReflectableUtilObject(allocator_type{})
{}

ReflectableUtilObject::ReflectableUtilObject(const allocator_type& allocator) noexcept :
        choiceParam(),
        reflectableUtilChoice(allocator)
{}

ReflectableUtilObject::ReflectableUtilObject(ReflectableUtilObject&& other_, const allocator_type& allocator) :
        choiceParam(other_.choiceParam),
        reflectableUtilChoice(std::move(other_.reflectableUtilChoice), allocator)
{}

ReflectableUtilObject::ReflectableUtilObject(const ReflectableUtilObject& other_, const allocator_type& allocator) :
        choiceParam(other_.choiceParam),
        reflectableUtilChoice(other_.reflectableUtilChoice, allocator)
{}

ReflectableUtilObject::ReflectableUtilObject(
        ::zserio::UInt8 choiceParam_,
        ::test_object::std_polymorphic_allocator::ReflectableUtilChoice reflectableUtilChoice_,
        const allocator_type& allocator) :
        choiceParam(choiceParam_),
        reflectableUtilChoice(::std::move(reflectableUtilChoice_), allocator)
{}

bool operator==(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& rhs)
{
    return ::std::tie(
            lhs.choiceParam,
            lhs.reflectableUtilChoice)
            == ::std::tie(
            rhs.choiceParam,
            rhs.reflectableUtilChoice);
}

bool operator<(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& rhs)
{
    return ::std::tie(
            lhs.choiceParam,
            lhs.reflectableUtilChoice)
            < ::std::tie(
            rhs.choiceParam,
            rhs.reflectableUtilChoice);
}

bool operator!=(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& rhs)
{
    return rhs < lhs;
}

bool operator<=(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& rhs)
{
    return !(lhs < rhs);
}

} // namespace std_polymorphic_allocator
} // namespace test_object

namespace zserio
{

View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>::View(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& data) noexcept :
        m_data(&data)
{}

View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>::View(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& data,
        const View&) noexcept :
        m_data(&data)
{}

::zserio::UInt8 View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>::choiceParam() const
{
    return m_data->choiceParam;
}

View<::test_object::std_polymorphic_allocator::ReflectableUtilChoice> View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>::reflectableUtilChoice() const
{
    return View<::test_object::std_polymorphic_allocator::ReflectableUtilChoice>{
            m_data->reflectableUtilChoice, ::zserio::UInt8(static_cast<::zserio::UInt8::ValueType>(choiceParam()))};
}

const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>::zserioData() const
{
    return *m_data;
}

bool operator==(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& rhs)
{
    return lhs.choiceParam() == rhs.choiceParam() &&
            lhs.reflectableUtilChoice() == rhs.reflectableUtilChoice();
}

bool operator<(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& rhs)
{
    if (lhs.choiceParam() != rhs.choiceParam())
    {
        return lhs.choiceParam() < rhs.choiceParam();
    }
    if (lhs.reflectableUtilChoice() != rhs.reflectableUtilChoice())
    {
        return lhs.reflectableUtilChoice() < rhs.reflectableUtilChoice();
    }

    return false;
}

bool operator!=(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& rhs)
{
    return !(lhs < rhs);
}

namespace detail
{

template <>
void validate(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& view, ::std::string_view)
{
    validate(view.choiceParam(), "'ReflectableUtilObject.choiceParam'");
    validate(view.reflectableUtilChoice(), "'ReflectableUtilObject.reflectableUtilChoice'");
}

template <>
BitSize bitSizeOf(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& view, BitSize bitPosition)
{
    BitSize endBitPosition = bitPosition;

    auto choiceParam_ = view.choiceParam();
    endBitPosition += bitSizeOf(choiceParam_, endBitPosition);
    auto reflectableUtilChoice_ = view.reflectableUtilChoice();
    endBitPosition += bitSizeOf(reflectableUtilChoice_, endBitPosition);

    return endBitPosition - bitPosition;
}

template <>
void write(BitStreamWriter& writer, const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& view)
{
    auto choiceParam_ = view.choiceParam();
    write(writer, choiceParam_);
    auto reflectableUtilChoice_ = view.reflectableUtilChoice();
    write(writer, reflectableUtilChoice_);
}

template <>
View<::test_object::std_polymorphic_allocator::ReflectableUtilObject> read(BitStreamReader& reader, ::test_object::std_polymorphic_allocator::ReflectableUtilObject& data)
{
    View<::test_object::std_polymorphic_allocator::ReflectableUtilObject> view(data);
    read(reader, data.choiceParam);
    (void)read(reader, data.reflectableUtilChoice, ::zserio::UInt8(static_cast<::zserio::UInt8::ValueType>(view.choiceParam())));
    return view;
}

const ::zserio::pmr::ITypeInfo& TypeInfo<::test_object::std_polymorphic_allocator::ReflectableUtilObject, ::std::pmr::polymorphic_allocator<uint8_t>>::get()
{
    using AllocatorType = ::std::pmr::polymorphic_allocator<uint8_t>;

    static const ::std::string_view templateName;
    static const ::zserio::Span<::zserio::BasicTemplateArgumentInfo<AllocatorType>> templateArguments;

    static const ::std::array<::std::string_view, 1> reflectableUtilChoiceTypeArguments = {
        "choiceParam()"
    };
    static const ::std::array<::zserio::BasicFieldInfo<AllocatorType>, 2> fields = {
        ::zserio::BasicFieldInfo<AllocatorType>{
            "choiceParam", // schemaName
            ::zserio::typeInfo<::zserio::UInt8, ::std::pmr::polymorphic_allocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<AllocatorType>{
            "reflectableUtilChoice", // schemaName
            ::zserio::typeInfo<::test_object::std_polymorphic_allocator::ReflectableUtilChoice, ::std::pmr::polymorphic_allocator<uint8_t>>(), // typeInfo
            reflectableUtilChoiceTypeArguments, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        }
    };

    static const ::zserio::Span<::zserio::BasicParameterInfo<AllocatorType>> parameters;

    static const ::zserio::Span<::zserio::BasicFunctionInfo<AllocatorType>> functions;

    static const ::zserio::detail::StructTypeInfo<AllocatorType> typeInfo = {
        "test_object.std_polymorphic_allocator.ReflectableUtilObject",
        [](const AllocatorType& allocator) -> ::zserio::pmr::IReflectableDataPtr
        {
            return ::std::allocate_shared<::zserio::ReflectableDataOwner<::test_object::std_polymorphic_allocator::ReflectableUtilObject>>(allocator);
        },
        templateName, templateArguments, fields, parameters, functions
    };

    return typeInfo;
}

} // namespace detail

template <>
::zserio::pmr::IReflectableDataConstPtr reflectable(
        const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& value, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator)
{
    class Reflectable : public ::zserio::ReflectableDataConstAllocatorHolderBase<::std::pmr::polymorphic_allocator<uint8_t>>
    {
    public:
        using ::zserio::ReflectableDataConstAllocatorHolderBase<::std::pmr::polymorphic_allocator<uint8_t>>::getField;
        using ::zserio::ReflectableDataConstAllocatorHolderBase<::std::pmr::polymorphic_allocator<uint8_t>>::getAnyValue;

        explicit Reflectable(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& object, const ::std::pmr::polymorphic_allocator<uint8_t>& alloc = {}) :
                ::zserio::ReflectableDataConstAllocatorHolderBase<::std::pmr::polymorphic_allocator<uint8_t>>(typeInfo<::test_object::std_polymorphic_allocator::ReflectableUtilObject>(), alloc),
                m_object(object)
        {}

        ::zserio::pmr::IReflectableDataConstPtr getField(::std::string_view name) const override
        {
            if (name == "choiceParam")
            {
                return ::zserio::reflectable(m_object.choiceParam, get_allocator());
            }
            if (name == "reflectableUtilChoice")
            {
                return ::zserio::reflectable(m_object.reflectableUtilChoice, get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilObject'!";
        }

        ::zserio::pmr::Any getAnyValue(const ::std::pmr::polymorphic_allocator<uint8_t>& alloc) const override
        {
            return ::zserio::pmr::Any(::std::cref(m_object), alloc);
        }

    private:
        const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& m_object;
    };

    return ::std::allocate_shared<Reflectable>(allocator, value);
}

template <>
::zserio::pmr::IReflectableDataPtr reflectable(
        ::test_object::std_polymorphic_allocator::ReflectableUtilObject& value, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator)
{
    class Reflectable : public ::zserio::ReflectableDataAllocatorHolderBase<::std::pmr::polymorphic_allocator<uint8_t>>
    {
    public:
        using ::zserio::ReflectableDataAllocatorHolderBase<::std::pmr::polymorphic_allocator<uint8_t>>::getField;
        using ::zserio::ReflectableDataAllocatorHolderBase<::std::pmr::polymorphic_allocator<uint8_t>>::getAnyValue;

        explicit Reflectable(::test_object::std_polymorphic_allocator::ReflectableUtilObject& object, const ::std::pmr::polymorphic_allocator<uint8_t>& alloc = {}) :
                ::zserio::ReflectableDataAllocatorHolderBase<::std::pmr::polymorphic_allocator<uint8_t>>(typeInfo<::test_object::std_polymorphic_allocator::ReflectableUtilObject>(), alloc),
                m_object(object)
        {}

        ::zserio::pmr::IReflectableDataConstPtr getField(::std::string_view name) const override
        {
            if (name == "choiceParam")
            {
                return ::zserio::reflectable(m_object.choiceParam, get_allocator());
            }
            if (name == "reflectableUtilChoice")
            {
                return ::zserio::reflectable(m_object.reflectableUtilChoice, get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilObject'!";
        }

        ::zserio::pmr::IReflectableDataPtr getField(::std::string_view name) override
        {
            if (name == "choiceParam")
            {
                return ::zserio::reflectable(m_object.choiceParam, get_allocator());
            }
            if (name == "reflectableUtilChoice")
            {
                return ::zserio::reflectable(m_object.reflectableUtilChoice, get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilObject'!";
        }

        void setField(::std::string_view name, const ::zserio::pmr::Any& value) override
        {
            if (name == "choiceParam")
            {
                m_object.choiceParam = ::zserio::ReflectableUtil::fromAny<::zserio::UInt8>(value);
                return;
            }
            if (name == "reflectableUtilChoice")
            {
                m_object.reflectableUtilChoice = ::zserio::ReflectableUtil::fromAny<::test_object::std_polymorphic_allocator::ReflectableUtilChoice>(value);
                return;
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilObject'!";
        }

        ::zserio::pmr::IReflectableDataPtr createField(::std::string_view name) override
        {
            if (name == "choiceParam")
            {
                m_object.choiceParam = ::zserio::UInt8();
                return ::zserio::reflectable(m_object.choiceParam, get_allocator());
            }
            if (name == "reflectableUtilChoice")
            {
                m_object.reflectableUtilChoice = ::test_object::std_polymorphic_allocator::ReflectableUtilChoice(get_allocator());
                return ::zserio::reflectable(m_object.reflectableUtilChoice, get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilObject'!";
        }

        ::zserio::pmr::Any getAnyValue(const ::std::pmr::polymorphic_allocator<uint8_t>& alloc) const override
        {
            return ::zserio::pmr::Any(::std::cref(m_object), alloc);
        }

        ::zserio::pmr::Any getAnyValue(const ::std::pmr::polymorphic_allocator<uint8_t>& alloc) override
        {
            return ::zserio::pmr::Any(::std::ref(m_object), alloc);
        }

    private:
        ::test_object::std_polymorphic_allocator::ReflectableUtilObject& m_object;
    };

    return ::std::allocate_shared<Reflectable>(allocator, value);
}

template <>
::zserio::pmr::IIntrospectableViewConstPtr introspectable(const View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& view, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator)
{
    class Introspectable : public ::zserio::CompoundIntrospectableViewBase<::test_object::std_polymorphic_allocator::ReflectableUtilObject, ::std::pmr::polymorphic_allocator<uint8_t>>
    {
    public:
        explicit Introspectable(const ::zserio::View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& view_, const ::std::pmr::polymorphic_allocator<uint8_t>& alloc = {}) :
                ::zserio::CompoundIntrospectableViewBase<::test_object::std_polymorphic_allocator::ReflectableUtilObject, ::std::pmr::polymorphic_allocator<uint8_t>>(
                        view_, alloc)
        {}

        ::zserio::pmr::IIntrospectableViewConstPtr getField(::std::string_view name) const override
        {
            if (name == "choiceParam")
            {
                return ::zserio::introspectable(getValue().choiceParam(), get_allocator());
            }
            if (name == "reflectableUtilChoice")
            {
                return ::zserio::introspectable(getValue().reflectableUtilChoice(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ReflectableUtilObject'!";
        }
    };

    return ::std::allocate_shared<Introspectable>(allocator, view);
}

} // namespace zserio

namespace std
{

size_t hash<::test_object::std_polymorphic_allocator::ReflectableUtilObject>::operator()(const ::test_object::std_polymorphic_allocator::ReflectableUtilObject& data) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, data.choiceParam);
    result = ::zserio::calcHashCode(result, data.reflectableUtilChoice);
    return static_cast<size_t>(result);
}

size_t hash<::zserio::View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>>::operator()(const ::zserio::View<::test_object::std_polymorphic_allocator::ReflectableUtilObject>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, view.choiceParam());
    result = ::zserio::calcHashCode(result, view.reflectableUtilChoice());
    return static_cast<size_t>(result);
}

} // namespace std
