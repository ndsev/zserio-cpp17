/**
 * Automatically generated by Zserio C++17 generator version 0.5.0 using Zserio core 2.17.0.
 * Generator setup: typeInfoCode, ppmrAllocator.
 */

#ifndef TEST_OBJECT_PPMR_ALLOCATOR_DEBUG_STRING_PARAM_OBJECT_H
#define TEST_OBJECT_PPMR_ALLOCATOR_DEBUG_STRING_PARAM_OBJECT_H

#include <memory>
#include <zserio/ppmr/ITypeInfo.h>
#include <zserio/ppmr/IReflectableData.h>
#include <zserio/ppmr/IIntrospectableView.h>
#include <zserio/View.h>
#include <zserio/ppmr/PropagatingPolymorphicAllocator.h>
#include <zserio/Types.h>
#include <zserio/ppmr/String.h>

namespace test_object
{
namespace ppmr_allocator
{

struct DebugStringParamObject
{
    using allocator_type = ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>;

    DebugStringParamObject() noexcept;
    explicit DebugStringParamObject(const allocator_type& allocator) noexcept;

    DebugStringParamObject(DebugStringParamObject&&) = default;
    DebugStringParamObject(DebugStringParamObject&& other, const allocator_type& allocator);

    DebugStringParamObject(const DebugStringParamObject&) = default;
    DebugStringParamObject(const DebugStringParamObject& other, const allocator_type& allocator);

    DebugStringParamObject& operator=(DebugStringParamObject&&) = default;
    DebugStringParamObject& operator=(const DebugStringParamObject&) = default;

    ~DebugStringParamObject() = default;

    explicit DebugStringParamObject(
            ::zserio::ppmr::String text_,
            const allocator_type& allocator = {});

    ::zserio::ppmr::String text;
};

bool operator==(const ::test_object::ppmr_allocator::DebugStringParamObject& lhs, const ::test_object::ppmr_allocator::DebugStringParamObject& rhs);
bool operator<(const ::test_object::ppmr_allocator::DebugStringParamObject& lhs, const ::test_object::ppmr_allocator::DebugStringParamObject& rhs);
bool operator!=(const ::test_object::ppmr_allocator::DebugStringParamObject& lhs, const ::test_object::ppmr_allocator::DebugStringParamObject& rhs);
bool operator>(const ::test_object::ppmr_allocator::DebugStringParamObject& lhs, const ::test_object::ppmr_allocator::DebugStringParamObject& rhs);
bool operator<=(const ::test_object::ppmr_allocator::DebugStringParamObject& lhs, const ::test_object::ppmr_allocator::DebugStringParamObject& rhs);
bool operator>=(const ::test_object::ppmr_allocator::DebugStringParamObject& lhs, const ::test_object::ppmr_allocator::DebugStringParamObject& rhs);

} // namespace ppmr_allocator
} // namespace test_object

namespace zserio
{

template <>
class View<::test_object::ppmr_allocator::DebugStringParamObject>
{
public:
    explicit View(const ::test_object::ppmr_allocator::DebugStringParamObject& data,
            ::zserio::Int32 param_) noexcept;

    ::zserio::Int32 param() const;

    ::std::string_view text() const;

    const ::test_object::ppmr_allocator::DebugStringParamObject& zserioData() const;

protected:
    View(const ::test_object::ppmr_allocator::DebugStringParamObject& data, const View& other) noexcept;

private:
    const ::test_object::ppmr_allocator::DebugStringParamObject* m_data;
    ::zserio::Int32 m_param_;
};

bool operator==(const View<::test_object::ppmr_allocator::DebugStringParamObject>& lhs, const View<::test_object::ppmr_allocator::DebugStringParamObject>& rhs);
bool operator<(const View<::test_object::ppmr_allocator::DebugStringParamObject>& lhs, const View<::test_object::ppmr_allocator::DebugStringParamObject>& rhs);
bool operator!=(const View<::test_object::ppmr_allocator::DebugStringParamObject>& lhs, const View<::test_object::ppmr_allocator::DebugStringParamObject>& rhs);
bool operator>(const View<::test_object::ppmr_allocator::DebugStringParamObject>& lhs, const View<::test_object::ppmr_allocator::DebugStringParamObject>& rhs);
bool operator<=(const View<::test_object::ppmr_allocator::DebugStringParamObject>& lhs, const View<::test_object::ppmr_allocator::DebugStringParamObject>& rhs);
bool operator>=(const View<::test_object::ppmr_allocator::DebugStringParamObject>& lhs, const View<::test_object::ppmr_allocator::DebugStringParamObject>& rhs);

namespace detail
{

template <>
struct ObjectTraits<::test_object::ppmr_allocator::DebugStringParamObject>
{
    using Parameters = std::tuple<
            ::zserio::Int32>;

    static void validate(const View<::test_object::ppmr_allocator::DebugStringParamObject>& view, ::std::string_view fieldName);

    static BitSize bitSizeOf(const View<::test_object::ppmr_allocator::DebugStringParamObject>& view, BitSize bitPosition);

    static void write(BitStreamWriter& writer, const View<::test_object::ppmr_allocator::DebugStringParamObject>& view);

    static View<::test_object::ppmr_allocator::DebugStringParamObject> read(BitStreamReader& reader, ::test_object::ppmr_allocator::DebugStringParamObject& data,
            ::zserio::Int32 param_);
};

template <>
struct TypeInfo<::test_object::ppmr_allocator::DebugStringParamObject, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
{
    static const ::zserio::ppmr::ITypeInfo& get();
};

template <>
struct Reflectable<::test_object::ppmr_allocator::DebugStringParamObject, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
{
    static ::zserio::ppmr::IReflectableDataConstPtr create(const ::test_object::ppmr_allocator::DebugStringParamObject& value,
            const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);

    static ::zserio::ppmr::IReflectableDataPtr create(::test_object::ppmr_allocator::DebugStringParamObject& value,
            const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);
};

template <>
struct Introspectable<::test_object::ppmr_allocator::DebugStringParamObject, ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>>
{
    static ::zserio::ppmr::IIntrospectableViewConstPtr create(const View<::test_object::ppmr_allocator::DebugStringParamObject>& view,
            const ::zserio::ppmr::PropagatingPolymorphicAllocator<uint8_t>& allocator);
};

} // namespace detail
} // namespace zserio

namespace std
{

template <>
struct hash<::test_object::ppmr_allocator::DebugStringParamObject>
{
    size_t operator()(const ::test_object::ppmr_allocator::DebugStringParamObject& data) const;
};

template <>
struct hash<::zserio::View<::test_object::ppmr_allocator::DebugStringParamObject>>
{
    size_t operator()(const ::zserio::View<::test_object::ppmr_allocator::DebugStringParamObject>& view) const;
};

} // namespace std

#endif // TEST_OBJECT_PPMR_ALLOCATOR_DEBUG_STRING_PARAM_OBJECT_H
