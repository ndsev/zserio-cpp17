/**
 * Automatically generated by Zserio C++17 generator version 0.4.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, stdAllocator.
 */

#ifndef TEST_OBJECT_STD_ALLOCATOR_WALKER_NESTED_H
#define TEST_OBJECT_STD_ALLOCATOR_WALKER_NESTED_H

#include <memory>
#include <zserio/ITypeInfo.h>
#include <zserio/IReflectableData.h>
#include <zserio/IIntrospectableView.h>
#include <zserio/View.h>
#include <memory>
#include <zserio/String.h>

namespace test_object
{
namespace std_allocator
{

struct WalkerNested
{
    using allocator_type = ::std::allocator<uint8_t>;

    WalkerNested() noexcept;
    explicit WalkerNested(const allocator_type& allocator) noexcept;

    WalkerNested(WalkerNested&&) = default;
    WalkerNested(WalkerNested&& other, const allocator_type& allocator);

    WalkerNested(const WalkerNested&) = default;
    WalkerNested(const WalkerNested& other, const allocator_type& allocator);

    WalkerNested& operator=(WalkerNested&&) = default;
    WalkerNested& operator=(const WalkerNested&) = default;

    ~WalkerNested() = default;

    explicit WalkerNested(
            ::zserio::String text_,
            const allocator_type& allocator = {});

    ::zserio::String text;
};

bool operator==(const ::test_object::std_allocator::WalkerNested& lhs, const ::test_object::std_allocator::WalkerNested& rhs);
bool operator<(const ::test_object::std_allocator::WalkerNested& lhs, const ::test_object::std_allocator::WalkerNested& rhs);
bool operator!=(const ::test_object::std_allocator::WalkerNested& lhs, const ::test_object::std_allocator::WalkerNested& rhs);
bool operator>(const ::test_object::std_allocator::WalkerNested& lhs, const ::test_object::std_allocator::WalkerNested& rhs);
bool operator<=(const ::test_object::std_allocator::WalkerNested& lhs, const ::test_object::std_allocator::WalkerNested& rhs);
bool operator>=(const ::test_object::std_allocator::WalkerNested& lhs, const ::test_object::std_allocator::WalkerNested& rhs);

} // namespace std_allocator
} // namespace test_object

namespace zserio
{

template <>
class View<::test_object::std_allocator::WalkerNested>
{
public:
    explicit View(const ::test_object::std_allocator::WalkerNested& data) noexcept;

    ::std::string_view text() const;

    const ::test_object::std_allocator::WalkerNested& zserioData() const;

protected:
    View(const ::test_object::std_allocator::WalkerNested& data, const View& other) noexcept;

private:
    const ::test_object::std_allocator::WalkerNested* m_data;
};

bool operator==(const View<::test_object::std_allocator::WalkerNested>& lhs, const View<::test_object::std_allocator::WalkerNested>& rhs);
bool operator<(const View<::test_object::std_allocator::WalkerNested>& lhs, const View<::test_object::std_allocator::WalkerNested>& rhs);
bool operator!=(const View<::test_object::std_allocator::WalkerNested>& lhs, const View<::test_object::std_allocator::WalkerNested>& rhs);
bool operator>(const View<::test_object::std_allocator::WalkerNested>& lhs, const View<::test_object::std_allocator::WalkerNested>& rhs);
bool operator<=(const View<::test_object::std_allocator::WalkerNested>& lhs, const View<::test_object::std_allocator::WalkerNested>& rhs);
bool operator>=(const View<::test_object::std_allocator::WalkerNested>& lhs, const View<::test_object::std_allocator::WalkerNested>& rhs);

namespace detail
{

template <>
struct ObjectTraits<::test_object::std_allocator::WalkerNested>
{
    static void validate(const View<::test_object::std_allocator::WalkerNested>& view, ::std::string_view fieldName);

    static BitSize bitSizeOf(const View<::test_object::std_allocator::WalkerNested>& view, BitSize bitPosition);

    static void write(BitStreamWriter& writer, const View<::test_object::std_allocator::WalkerNested>& view);

    static View<::test_object::std_allocator::WalkerNested> read(BitStreamReader& reader, ::test_object::std_allocator::WalkerNested& data);
};

template <>
struct TypeInfo<::test_object::std_allocator::WalkerNested, ::std::allocator<uint8_t>>
{
    static const ::zserio::ITypeInfo& get();
};

template <>
struct Reflectable<::test_object::std_allocator::WalkerNested, ::std::allocator<uint8_t>>
{
    static ::zserio::IReflectableDataConstPtr create(const ::test_object::std_allocator::WalkerNested& value,
            const ::std::allocator<uint8_t>& allocator);

    static ::zserio::IReflectableDataPtr create(::test_object::std_allocator::WalkerNested& value,
            const ::std::allocator<uint8_t>& allocator);
};

template <>
struct Introspectable<::test_object::std_allocator::WalkerNested, ::std::allocator<uint8_t>>
{
    static ::zserio::IIntrospectableViewConstPtr create(const View<::test_object::std_allocator::WalkerNested>& view,
            const ::std::allocator<uint8_t>& allocator);
};

} // namespace detail
} // namespace zserio

namespace std
{

template <>
struct hash<::test_object::std_allocator::WalkerNested>
{
    size_t operator()(const ::test_object::std_allocator::WalkerNested& data) const;
};

template <>
struct hash<::zserio::View<::test_object::std_allocator::WalkerNested>>
{
    size_t operator()(const ::zserio::View<::test_object::std_allocator::WalkerNested>& view) const;
};

} // namespace std

#endif // TEST_OBJECT_STD_ALLOCATOR_WALKER_NESTED_H
