/**
 * Automatically generated by Zserio C++17 generator version 0.4.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, stdAllocator.
 */

#include <zserio/BitPositionUtil.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/IntrospectableView.h>
#include <zserio/ReflectableData.h>
#include <zserio/ReflectableUtil.h>
#include <zserio/TypeInfo.h>
#include <string_view>

#include <test_object/std_allocator/DebugStringParamObject.h>

namespace test_object
{
namespace std_allocator
{

DebugStringParamObject::DebugStringParamObject() noexcept :
        DebugStringParamObject(allocator_type{})
{}

DebugStringParamObject::DebugStringParamObject(const allocator_type& allocator) noexcept :
        text(::std::string_view{"test"}, allocator)
{}

DebugStringParamObject::DebugStringParamObject(DebugStringParamObject&& other, const allocator_type& allocator) :
        text(std::move(other.text), allocator)
{}

DebugStringParamObject::DebugStringParamObject(const DebugStringParamObject& other, const allocator_type& allocator) :
        text(other.text, allocator)
{}

DebugStringParamObject::DebugStringParamObject(
        ::zserio::String text_,
        const allocator_type& allocator) :
        text(::std::move(text_), allocator)
{}

bool operator==(const ::test_object::std_allocator::DebugStringParamObject& lhs, const ::test_object::std_allocator::DebugStringParamObject& rhs)
{
    return ::std::tie(
            lhs.text)
            == ::std::tie(
            rhs.text);
}

bool operator<(const ::test_object::std_allocator::DebugStringParamObject& lhs, const ::test_object::std_allocator::DebugStringParamObject& rhs)
{
    return ::std::tie(
            lhs.text)
            < ::std::tie(
            rhs.text);
}

bool operator!=(const ::test_object::std_allocator::DebugStringParamObject& lhs, const ::test_object::std_allocator::DebugStringParamObject& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const ::test_object::std_allocator::DebugStringParamObject& lhs, const ::test_object::std_allocator::DebugStringParamObject& rhs)
{
    return rhs < lhs;
}

bool operator<=(const ::test_object::std_allocator::DebugStringParamObject& lhs, const ::test_object::std_allocator::DebugStringParamObject& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const ::test_object::std_allocator::DebugStringParamObject& lhs, const ::test_object::std_allocator::DebugStringParamObject& rhs)
{
    return !(lhs < rhs);
}

} // namespace std_allocator
} // namespace test_object

namespace zserio
{

View<::test_object::std_allocator::DebugStringParamObject>::View(const ::test_object::std_allocator::DebugStringParamObject& data,
        ::zserio::Int32 param_) noexcept :
        m_data(&data),
        m_param_(param_)
{}

View<::test_object::std_allocator::DebugStringParamObject>::View(const ::test_object::std_allocator::DebugStringParamObject& data,
        const View& other) noexcept :
        m_data(&data),
        m_param_(other.param())
{}

::zserio::Int32 View<::test_object::std_allocator::DebugStringParamObject>::param() const
{
    return m_param_;
}

::std::string_view View<::test_object::std_allocator::DebugStringParamObject>::text() const
{
    return ::std::string_view(m_data->text);
}

const ::test_object::std_allocator::DebugStringParamObject& View<::test_object::std_allocator::DebugStringParamObject>::zserioData() const
{
    return *m_data;
}

bool operator==(const View<::test_object::std_allocator::DebugStringParamObject>& lhs, const View<::test_object::std_allocator::DebugStringParamObject>& rhs)
{
    return lhs.param() == rhs.param() &&
            lhs.text() == rhs.text();
}

bool operator<(const View<::test_object::std_allocator::DebugStringParamObject>& lhs, const View<::test_object::std_allocator::DebugStringParamObject>& rhs)
{
    if (lhs.param() != rhs.param())
    {
        return lhs.param() < rhs.param();
    }
    if (lhs.text() != rhs.text())
    {
        return lhs.text() < rhs.text();
    }

    return false;
}

bool operator!=(const View<::test_object::std_allocator::DebugStringParamObject>& lhs, const View<::test_object::std_allocator::DebugStringParamObject>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<::test_object::std_allocator::DebugStringParamObject>& lhs, const View<::test_object::std_allocator::DebugStringParamObject>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<::test_object::std_allocator::DebugStringParamObject>& lhs, const View<::test_object::std_allocator::DebugStringParamObject>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<::test_object::std_allocator::DebugStringParamObject>& lhs, const View<::test_object::std_allocator::DebugStringParamObject>& rhs)
{
    return !(lhs < rhs);
}

namespace detail
{

void ObjectTraits<::test_object::std_allocator::DebugStringParamObject>::validate(const View<::test_object::std_allocator::DebugStringParamObject>& view, ::std::string_view)
{
    detail::validate(view.param(), "'DebugStringParamObject.param'");
    detail::validate(view.text(), "'DebugStringParamObject.text'");
}

BitSize ObjectTraits<::test_object::std_allocator::DebugStringParamObject>::bitSizeOf(const View<::test_object::std_allocator::DebugStringParamObject>& view, BitSize bitPosition)
{
    BitSize endBitPosition = bitPosition;

    auto text_ = view.text();
    endBitPosition += detail::bitSizeOf(text_, endBitPosition);

    return endBitPosition - bitPosition;
}

void ObjectTraits<::test_object::std_allocator::DebugStringParamObject>::write(BitStreamWriter& writer, const View<::test_object::std_allocator::DebugStringParamObject>& view)
{
    auto text_ = view.text();
    detail::write(writer, text_);
}

View<::test_object::std_allocator::DebugStringParamObject> ObjectTraits<::test_object::std_allocator::DebugStringParamObject>::read(BitStreamReader& reader, ::test_object::std_allocator::DebugStringParamObject& data,
        ::zserio::Int32 param_)
{
    View<::test_object::std_allocator::DebugStringParamObject> view(data,
            param_);
    detail::read(reader, data.text);
    return view;
}

const ::zserio::ITypeInfo& TypeInfo<::test_object::std_allocator::DebugStringParamObject, ::std::allocator<uint8_t>>::get()
{
    using AllocatorType = ::std::allocator<uint8_t>;

    static const ::std::string_view templateName;
    static const ::zserio::Span<::zserio::BasicTemplateArgumentInfo<AllocatorType>> templateArguments;

    static const ::std::array<::zserio::BasicFieldInfo<AllocatorType>, 1> fields = {
        ::zserio::BasicFieldInfo<AllocatorType>{
            "text", // schemaName
            ::zserio::typeInfo<::zserio::String, ::std::allocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            "::std::string_view{\"test\"}", // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        }
    };

    static const ::std::array<::zserio::BasicParameterInfo<AllocatorType>, 1> parameters = {
        ::zserio::BasicParameterInfo<AllocatorType>{
            "param",
            ::zserio::typeInfo<::zserio::Int32, ::std::allocator<uint8_t>>()
        }
    };

    static const ::zserio::Span<::zserio::BasicFunctionInfo<AllocatorType>> functions;

    static const ::zserio::detail::StructTypeInfo<AllocatorType> typeInfo = {
        "test_object.std_allocator.DebugStringParamObject",
        [](const AllocatorType& allocator) -> ::zserio::IReflectableDataPtr
        {
            return ::std::allocate_shared<::zserio::detail::ReflectableDataOwner<::test_object::std_allocator::DebugStringParamObject>>(allocator);
        },
        templateName, templateArguments, fields, parameters, functions
    };

    return typeInfo;
}

::zserio::IReflectableDataConstPtr Reflectable<::test_object::std_allocator::DebugStringParamObject, ::std::allocator<uint8_t>>::create(
        const ::test_object::std_allocator::DebugStringParamObject& value, const ::std::allocator<uint8_t>& allocator)
{
    class ReflectableImpl : public ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::std::allocator<uint8_t>>
    {
    public:
        using Base = ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::std::allocator<uint8_t>>;
        using Base::getField;
        using Base::getAnyValue;

        explicit ReflectableImpl(const ::test_object::std_allocator::DebugStringParamObject& object, const ::std::allocator<uint8_t>& alloc = {}) :
                ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::std::allocator<uint8_t>>(typeInfo<::test_object::std_allocator::DebugStringParamObject>(), alloc),
                m_object(object)
        {}

        ::zserio::IReflectableDataConstPtr getField(::std::string_view name) const override
        {
            if (name == "text")
            {
                return ::zserio::reflectable(m_object.text, get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'DebugStringParamObject'!";
        }

        ::zserio::Any getAnyValue(const ::std::allocator<uint8_t>& alloc) const override
        {
            return ::zserio::Any(::std::cref(m_object), alloc);
        }

    private:
        const ::test_object::std_allocator::DebugStringParamObject& m_object;
    };

    return ::std::allocate_shared<ReflectableImpl>(allocator, value);
}

::zserio::IReflectableDataPtr Reflectable<::test_object::std_allocator::DebugStringParamObject, ::std::allocator<uint8_t>>::create(
        ::test_object::std_allocator::DebugStringParamObject& value, const ::std::allocator<uint8_t>& allocator)
{
    class ReflectableImpl : public ::zserio::detail::ReflectableDataAllocatorHolderBase<::std::allocator<uint8_t>>
    {
    public:
        using Base = ::zserio::detail::ReflectableDataAllocatorHolderBase<::std::allocator<uint8_t>>;
        using Base::getField;
        using Base::getAnyValue;

        explicit ReflectableImpl(::test_object::std_allocator::DebugStringParamObject& object, const ::std::allocator<uint8_t>& alloc = {}) :
                ::zserio::detail::ReflectableDataAllocatorHolderBase<::std::allocator<uint8_t>>(typeInfo<::test_object::std_allocator::DebugStringParamObject>(), alloc),
                m_object(object)
        {}

        ::zserio::IReflectableDataConstPtr getField(::std::string_view name) const override
        {
            if (name == "text")
            {
                return ::zserio::reflectable(m_object.text, get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'DebugStringParamObject'!";
        }

        ::zserio::IReflectableDataPtr getField(::std::string_view name) override
        {
            if (name == "text")
            {
                return ::zserio::reflectable(m_object.text, get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'DebugStringParamObject'!";
        }

        void setField(::std::string_view name, const ::zserio::Any& value) override
        {
            if (name == "text")
            {
                m_object.text = ::zserio::ReflectableUtil::fromAny<::zserio::String>(value);
                return;
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'DebugStringParamObject'!";
        }

        ::zserio::IReflectableDataPtr createField(::std::string_view name) override
        {
            if (name == "text")
            {
                m_object.text = ::zserio::String(get_allocator());
                return ::zserio::reflectable(m_object.text, get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'DebugStringParamObject'!";
        }

        ::zserio::Any getAnyValue(const ::std::allocator<uint8_t>& alloc) const override
        {
            return ::zserio::Any(::std::cref(m_object), alloc);
        }

        ::zserio::Any getAnyValue(const ::std::allocator<uint8_t>& alloc) override
        {
            return ::zserio::Any(::std::ref(m_object), alloc);
        }

    private:
        ::test_object::std_allocator::DebugStringParamObject& m_object;
    };

    return ::std::allocate_shared<ReflectableImpl>(allocator, value);
}

::zserio::IIntrospectableViewConstPtr Introspectable<::test_object::std_allocator::DebugStringParamObject, ::std::allocator<uint8_t>>::create(
        const View<::test_object::std_allocator::DebugStringParamObject>& view, const ::std::allocator<uint8_t>& allocator)
{
    class IntrospectableImpl : public ::zserio::detail::CompoundIntrospectableViewBase<::test_object::std_allocator::DebugStringParamObject, ::std::allocator<uint8_t>>
    {
    public:
        explicit IntrospectableImpl(const ::zserio::View<::test_object::std_allocator::DebugStringParamObject>& view_, const ::std::allocator<uint8_t>& alloc = {}) :
                ::zserio::detail::CompoundIntrospectableViewBase<::test_object::std_allocator::DebugStringParamObject, ::std::allocator<uint8_t>>(
                        view_, alloc)
        {}

        ::zserio::IIntrospectableViewConstPtr getField(::std::string_view name) const override
        {
            if (name == "text")
            {
                return ::zserio::introspectable(getValue().text(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'DebugStringParamObject'!";
        }

        ::zserio::IIntrospectableViewConstPtr getParameter(::std::string_view name) const override
        {
            if (name == "param")
            {
                return ::zserio::introspectable(getValue().param(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Parameter '") << name << "' doesn't exist in 'DebugStringParamObject'!";
        }
    };

    return ::std::allocate_shared<IntrospectableImpl>(allocator, view);
}

} // namespace detail
} // namespace zserio

namespace std
{

size_t hash<::test_object::std_allocator::DebugStringParamObject>::operator()(const ::test_object::std_allocator::DebugStringParamObject& data) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, data.text);
    return static_cast<size_t>(result);
}

size_t hash<::zserio::View<::test_object::std_allocator::DebugStringParamObject>>::operator()(const ::zserio::View<::test_object::std_allocator::DebugStringParamObject>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, view.param());
    result = ::zserio::calcHashCode(result, view.text());
    return static_cast<size_t>(result);
}

} // namespace std
