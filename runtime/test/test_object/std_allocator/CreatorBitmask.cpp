/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/TypeInfo.h>

#include <test_object/std_allocator/CreatorBitmask.h>

namespace test_object
{
namespace std_allocator
{

::zserio::String CreatorBitmask::toString(const ::zserio::String::allocator_type& allocator) const
{
    ::zserio::String result(allocator);
    if ((*this & CreatorBitmask::Values::READ) == CreatorBitmask::Values::READ)
    {
        result += result.empty() ? "READ" : " | READ";
    }
    if ((*this & CreatorBitmask::Values::WRITE) == CreatorBitmask::Values::WRITE)
    {
        result += result.empty() ? "WRITE" : " | WRITE";
    }

    return ::zserio::toString<::zserio::String::allocator_type>(
            static_cast<ZserioType::ValueType>(m_value), allocator) + "[" + result + "]";
}

} // namespace std_allocator
} // namespace test_object

namespace zserio
{
namespace detail
{

const ::zserio::ITypeInfo& TypeInfo<::test_object::std_allocator::CreatorBitmask, ::std::allocator<uint8_t>>::get()
{
    using AllocatorType = ::std::allocator<uint8_t>;

    static const ::std::array<::zserio::ItemInfo, 2> values = {
        ::zserio::ItemInfo{ "READ", static_cast<uint64_t>(UINT8_C(1)), false, false},
        ::zserio::ItemInfo{ "WRITE", static_cast<uint64_t>(UINT8_C(2)), false, false}
    };

    static const ::zserio::detail::BitmaskTypeInfo<AllocatorType> typeInfo = {
        "test_object.std_allocator.CreatorBitmask",
        ::zserio::typeInfo<::zserio::UInt8, ::std::allocator<uint8_t>>(),
        values
    };

    return typeInfo;
}

} // namespace detail
} // namespace zserio

namespace std
{

size_t hash<::test_object::std_allocator::CreatorBitmask>::operator()(const ::test_object::std_allocator::CreatorBitmask& value) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result,
            static_cast<::test_object::std_allocator::CreatorBitmask::ZserioType::ValueType>(value.getValue()));
    return static_cast<size_t>(result);
}

} // namespace std
