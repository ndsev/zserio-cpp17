/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, stdAllocator.
 */

#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/TypeInfo.h>

#include <test_object/std_allocator/ReflectableUtilEnum.h>

namespace zserio
{

template <>
size_t enumToOrdinal(::test_object::std_allocator::ReflectableUtilEnum value)
{
    switch (value)
    {
    case ::test_object::std_allocator::ReflectableUtilEnum::ONE:
        return 0;
    case ::test_object::std_allocator::ReflectableUtilEnum::TWO:
        return 1;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ReflectableUtilEnum: ") <<
                static_cast<typename ::std::underlying_type_t<::test_object::std_allocator::ReflectableUtilEnum>>(value) << "!";
    }
}

template <>
::test_object::std_allocator::ReflectableUtilEnum valueToEnum(::zserio::Int8 rawValue)
{
    switch (rawValue)
    {
    case INT8_C(0):
    case INT8_C(1):
        return static_cast<::test_object::std_allocator::ReflectableUtilEnum>(static_cast<::std::underlying_type_t<::test_object::std_allocator::ReflectableUtilEnum>>(rawValue));
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration ReflectableUtilEnum: ") << rawValue << "!";
    }
}

namespace detail
{

const ::zserio::ITypeInfo& TypeInfo<::test_object::std_allocator::ReflectableUtilEnum, ::std::allocator<uint8_t>>::get()
{
    using AllocatorType = ::std::allocator<uint8_t>;

    static const ::std::array<::zserio::ItemInfo, 2> items = {
        ::zserio::ItemInfo{ "ONE", static_cast<uint64_t>(INT8_C(0)), false, false},
        ::zserio::ItemInfo{ "TWO", static_cast<uint64_t>(INT8_C(1)), false, false}
    };

    static const ::zserio::detail::EnumTypeInfo<AllocatorType> typeInfo = {
        "test_object.std_allocator.ReflectableUtilEnum",
        ::zserio::typeInfo<::zserio::Int8, ::std::allocator<uint8_t>>(),
        items
    };

    return typeInfo;
}

} // namespace detail

} // namespace zserio

namespace std
{

size_t hash<::test_object::std_allocator::ReflectableUtilEnum>::operator()(const ::test_object::std_allocator::ReflectableUtilEnum& value) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result,
            static_cast<::std::underlying_type_t<::test_object::std_allocator::ReflectableUtilEnum>>(::zserio::enumToValue(value)));
    return static_cast<size_t>(result);
}

} // namespace std
