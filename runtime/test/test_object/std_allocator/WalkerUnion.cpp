/**
 * Automatically generated by Zserio C++17 generator version 0.5.0 using Zserio core 2.17.0.
 * Generator setup: typeInfoCode, stdAllocator.
 */

#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/SizeConvertUtil.h>
#include <zserio/IntrospectableView.h>
#include <zserio/ReflectableData.h>
#include <zserio/ReflectableUtil.h>
#include <zserio/TypeInfo.h>
#include <zserio/UnionCaseException.h>

#include <test_object/std_allocator/WalkerUnion.h>

namespace test_object
{
namespace std_allocator
{

bool operator==(const ::test_object::std_allocator::WalkerUnion& lhs, const ::test_object::std_allocator::WalkerUnion& rhs)
{
    return static_cast<const ::test_object::std_allocator::WalkerUnion::Base&>(lhs) == static_cast<const ::test_object::std_allocator::WalkerUnion::Base&>(rhs);
}

bool operator<(const ::test_object::std_allocator::WalkerUnion& lhs, const ::test_object::std_allocator::WalkerUnion&  rhs)
{
    return static_cast<const ::test_object::std_allocator::WalkerUnion::Base&>(lhs) < static_cast<const ::test_object::std_allocator::WalkerUnion::Base&>(rhs);
}

bool operator!=(const ::test_object::std_allocator::WalkerUnion& lhs, const ::test_object::std_allocator::WalkerUnion& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const ::test_object::std_allocator::WalkerUnion& lhs, const ::test_object::std_allocator::WalkerUnion& rhs)
{
    return rhs < lhs;
}

bool operator<=(const ::test_object::std_allocator::WalkerUnion& lhs, const ::test_object::std_allocator::WalkerUnion& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const ::test_object::std_allocator::WalkerUnion& lhs, const ::test_object::std_allocator::WalkerUnion& rhs)
{
    return !(lhs < rhs);
}

} // namespace std_allocator
} // namespace test_object

namespace zserio
{

View<::test_object::std_allocator::WalkerUnion>::View(const ::test_object::std_allocator::WalkerUnion& data) noexcept :
        m_data(&data)
{}

View<::test_object::std_allocator::WalkerUnion>::View(const ::test_object::std_allocator::WalkerUnion& data,
        const View&) noexcept :
        m_data(&data)
{}

::zserio::UInt32 View<::test_object::std_allocator::WalkerUnion>::value() const
{
    return get<::test_object::std_allocator::WalkerUnion::Tag::value>(*m_data);
}

::std::string_view View<::test_object::std_allocator::WalkerUnion>::text() const
{
    return ::std::string_view(get<::test_object::std_allocator::WalkerUnion::Tag::text>(*m_data));
}

ArrayView<const ::test_object::std_allocator::WalkerNested> View<::test_object::std_allocator::WalkerUnion>::nestedArray() const
{
    return ArrayView<const ::test_object::std_allocator::WalkerNested>(get<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>(*m_data));
}

::test_object::std_allocator::WalkerUnion::Tag View<::test_object::std_allocator::WalkerUnion>::zserioChoiceTag() const
{
    return m_data->index();
}

const ::test_object::std_allocator::WalkerUnion& View<::test_object::std_allocator::WalkerUnion>::zserioData() const
{
    return *m_data;
}

bool operator==(const View<::test_object::std_allocator::WalkerUnion>& lhs, const View<::test_object::std_allocator::WalkerUnion>& rhs)
{
    if (lhs.zserioChoiceTag() != rhs.zserioChoiceTag())
    {
        return false;
    }

    switch (lhs.zserioChoiceTag())
    {
    case ::test_object::std_allocator::WalkerUnion::Tag::value:
        return (lhs.value() == rhs.value());
    case ::test_object::std_allocator::WalkerUnion::Tag::text:
        return (lhs.text() == rhs.text());
    case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
        return (lhs.nestedArray() == rhs.nestedArray());
    default:
        return true;
    }
}

bool operator<(const View<::test_object::std_allocator::WalkerUnion>& lhs, const View<::test_object::std_allocator::WalkerUnion>& rhs)
{
    if (lhs.zserioChoiceTag() != rhs.zserioChoiceTag())
    {
        return lhs.zserioChoiceTag() < rhs.zserioChoiceTag();
    }

    switch (lhs.zserioChoiceTag())
    {
    case ::test_object::std_allocator::WalkerUnion::Tag::value:
        return (lhs.value() < rhs.value());
    case ::test_object::std_allocator::WalkerUnion::Tag::text:
        return (lhs.text() < rhs.text());
    case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
        return (lhs.nestedArray() < rhs.nestedArray());
    default:
        return false;
    }
}

bool operator!=(const View<::test_object::std_allocator::WalkerUnion>& lhs, const View<::test_object::std_allocator::WalkerUnion>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<::test_object::std_allocator::WalkerUnion>& lhs, const View<::test_object::std_allocator::WalkerUnion>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<::test_object::std_allocator::WalkerUnion>& lhs, const View<::test_object::std_allocator::WalkerUnion>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<::test_object::std_allocator::WalkerUnion>& lhs, const View<::test_object::std_allocator::WalkerUnion>& rhs)
{
    return !(lhs < rhs);
}

namespace detail
{

void ObjectTraits<::test_object::std_allocator::WalkerUnion>::validate(const View<::test_object::std_allocator::WalkerUnion>& view, ::std::string_view)
{
    switch (view.zserioChoiceTag())
    {
    case ::test_object::std_allocator::WalkerUnion::Tag::value:
        detail::validate(view.value(), "'WalkerUnion.value'");
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::text:
        detail::validate(view.text(), "'WalkerUnion.text'");
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
        detail::validate<ArrayType::AUTO>(view.nestedArray(), "'WalkerUnion.nestedArray'");
        break;
    default:
        throw UnionCaseException("No case set in union '::test_object::std_allocator::WalkerUnion'!");
    }
}

BitSize ObjectTraits<::test_object::std_allocator::WalkerUnion>::bitSizeOf(const View<::test_object::std_allocator::WalkerUnion>& view, BitSize bitPosition)
{
    BitSize endBitPosition = bitPosition;
    endBitPosition += detail::bitSizeOf(
            fromCheckedValue<VarSize>(convertSizeToUInt32(view.zserioChoiceTag()) - 1));
    switch (view.zserioChoiceTag())
    {
    case ::test_object::std_allocator::WalkerUnion::Tag::value:
        endBitPosition += detail::bitSizeOf(view.value(), endBitPosition);
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::text:
        endBitPosition += detail::bitSizeOf(view.text(), endBitPosition);
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
        endBitPosition += detail::bitSizeOf<ArrayType::AUTO>(view.nestedArray(), endBitPosition);
        break;
    default:
        break;
    }

    return endBitPosition - bitPosition;
}

void ObjectTraits<::test_object::std_allocator::WalkerUnion>::write(BitStreamWriter& writer, const View<::test_object::std_allocator::WalkerUnion>& view)
{
    detail::write(writer, fromCheckedValue<VarSize>(convertSizeToUInt32(view.zserioChoiceTag()) - 1));
    switch (view.zserioChoiceTag())
    {
    case ::test_object::std_allocator::WalkerUnion::Tag::value:
        detail::write(writer, view.value());
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::text:
        detail::write(writer, view.text());
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
        detail::write<ArrayType::AUTO>(writer, view.nestedArray());
        break;
    default:
        break;
    }
}

View<::test_object::std_allocator::WalkerUnion> ObjectTraits<::test_object::std_allocator::WalkerUnion>::read(BitStreamReader& reader, ::test_object::std_allocator::WalkerUnion& data)
{
    View<::test_object::std_allocator::WalkerUnion> view(data);

    VarSize choiceTag;
    detail::read(reader, choiceTag);
    switch (static_cast<::test_object::std_allocator::WalkerUnion::Tag>(choiceTag + 1))
    {
    case ::test_object::std_allocator::WalkerUnion::Tag::value:
        data.emplace<::test_object::std_allocator::WalkerUnion::Tag::value>();
        detail::read(reader, data.get<::test_object::std_allocator::WalkerUnion::Tag::value>());
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::text:
        data.emplace<::test_object::std_allocator::WalkerUnion::Tag::text>();
        detail::read(reader, data.get<::test_object::std_allocator::WalkerUnion::Tag::text>());
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
        data.emplace<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>();
        (void)detail::read<ArrayType::AUTO>(reader, data.get<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>());
        break;
    default:
        throw UnionCaseException("Unexpected choice tag during read of union '::test_object::std_allocator::WalkerUnion'!");
    }

    return view;
}

const ::zserio::ITypeInfo& TypeInfo<::test_object::std_allocator::WalkerUnion, ::std::allocator<uint8_t>>::get()
{
    using AllocatorType = ::std::allocator<uint8_t>;

    static const ::std::string_view templateName;
    static const ::zserio::Span<::zserio::BasicTemplateArgumentInfo<AllocatorType>> templateArguments;

    static const ::std::array<::zserio::BasicFieldInfo<AllocatorType>, 3> fields = {
        ::zserio::BasicFieldInfo<AllocatorType>{
            "value", // schemaName
            ::zserio::typeInfo<::zserio::UInt32, ::std::allocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<AllocatorType>{
            "text", // schemaName
            ::zserio::typeInfo<::zserio::String, ::std::allocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<AllocatorType>{
            "nestedArray", // schemaName
            ::zserio::typeInfo<::test_object::std_allocator::WalkerNested, ::std::allocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            true, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        }
    };

    static const ::zserio::Span<::zserio::BasicParameterInfo<AllocatorType>> parameters;

    static const ::zserio::Span<::zserio::BasicFunctionInfo<AllocatorType>> functions;

    static const ::zserio::detail::UnionTypeInfo<AllocatorType> typeInfo = {
        "test_object.std_allocator.WalkerUnion",
        [](const AllocatorType& allocator) -> ::zserio::IReflectableDataPtr
        {
            return ::std::allocate_shared<::zserio::detail::ReflectableDataOwner<::test_object::std_allocator::WalkerUnion>>(allocator);
        },
        templateName, templateArguments, fields, parameters, functions
    };

    return typeInfo;
}

::zserio::IReflectableDataConstPtr Reflectable<::test_object::std_allocator::WalkerUnion, ::std::allocator<uint8_t>>::create(
        const ::test_object::std_allocator::WalkerUnion& value, const ::std::allocator<uint8_t>& allocator)
{
    class ReflectableImpl : public ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::std::allocator<uint8_t>>
    {
    public:
        using Base = ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::std::allocator<uint8_t>>;
        using Base::getField;
        using Base::getAnyValue;

        explicit ReflectableImpl(const ::test_object::std_allocator::WalkerUnion& object, const ::std::allocator<uint8_t>& alloc = {}) :
                ::zserio::detail::ReflectableDataConstAllocatorHolderBase<::std::allocator<uint8_t>>(typeInfo<::test_object::std_allocator::WalkerUnion>(), alloc),
                m_object(object)
        {}

        ::zserio::IReflectableDataConstPtr getField(::std::string_view name) const override
        {
            if (name == "value")
            {
                return ::zserio::reflectable(
                        get<::test_object::std_allocator::WalkerUnion::Tag::value>(m_object), get_allocator());
            }
            if (name == "text")
            {
                return ::zserio::reflectable(
                        get<::test_object::std_allocator::WalkerUnion::Tag::text>(m_object), get_allocator());
            }
            if (name == "nestedArray")
            {
                return ::zserio::reflectableArray(
                        get<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>(m_object), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::std::string_view getChoice() const override
        {
            switch (m_object.index())
            {
            case ::test_object::std_allocator::WalkerUnion::Tag::value:
                return "value";
            case ::test_object::std_allocator::WalkerUnion::Tag::text:
                return "text";
            case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
                return "nestedArray";
            default:
                return "";
            }
        }

        ::zserio::Any getAnyValue(const ::std::allocator<uint8_t>& alloc) const override
        {
            return ::zserio::Any(::std::cref(m_object), alloc);
        }

    private:
        const ::test_object::std_allocator::WalkerUnion& m_object;
    };

    return ::std::allocate_shared<ReflectableImpl>(allocator, value);
}

::zserio::IReflectableDataPtr Reflectable<::test_object::std_allocator::WalkerUnion, ::std::allocator<uint8_t>>::create(
        ::test_object::std_allocator::WalkerUnion& value, const ::std::allocator<uint8_t>& allocator)
{
    class ReflectableImpl : public ::zserio::detail::ReflectableDataAllocatorHolderBase<::std::allocator<uint8_t>>
    {
    public:
        using Base = ::zserio::detail::ReflectableDataAllocatorHolderBase<::std::allocator<uint8_t>>;
        using Base::getField;
        using Base::getAnyValue;

        explicit ReflectableImpl(::test_object::std_allocator::WalkerUnion& object, const ::std::allocator<uint8_t>& alloc = {}) :
                ::zserio::detail::ReflectableDataAllocatorHolderBase<::std::allocator<uint8_t>>(typeInfo<::test_object::std_allocator::WalkerUnion>(), alloc),
                m_object(object)
        {}

        ::zserio::IReflectableDataConstPtr getField(::std::string_view name) const override
        {
            if (name == "value")
            {
                return ::zserio::reflectable(
                        get<::test_object::std_allocator::WalkerUnion::Tag::value>(m_object), get_allocator());
            }
            if (name == "text")
            {
                return ::zserio::reflectable(
                        get<::test_object::std_allocator::WalkerUnion::Tag::text>(m_object), get_allocator());
            }
            if (name == "nestedArray")
            {
                return ::zserio::reflectableArray(
                        get<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>(m_object), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::zserio::IReflectableDataPtr getField(::std::string_view name) override
        {
            if (name == "value")
            {
                return ::zserio::reflectable(
                        get<::test_object::std_allocator::WalkerUnion::Tag::value>(m_object), get_allocator());
            }
            if (name == "text")
            {
                return ::zserio::reflectable(
                        get<::test_object::std_allocator::WalkerUnion::Tag::text>(m_object), get_allocator());
            }
            if (name == "nestedArray")
            {
                return ::zserio::reflectableArray(
                        get<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>(m_object), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        void setField(::std::string_view name, const ::zserio::Any& value) override
        {
            if (name == "value")
            {
                m_object.template emplace<::test_object::std_allocator::WalkerUnion::Tag::value>(
                        ::zserio::ReflectableUtil::fromAny<::zserio::UInt32>(value));
                return;
            }
            if (name == "text")
            {
                m_object.template emplace<::test_object::std_allocator::WalkerUnion::Tag::text>(
                        ::zserio::ReflectableUtil::fromAny<::zserio::String>(value));
                return;
            }
            if (name == "nestedArray")
            {
                m_object.template emplace<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>(
                        ::zserio::ReflectableUtil::fromAny<::zserio::Vector<::test_object::std_allocator::WalkerNested>>(value));
                return;
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::zserio::IReflectableDataPtr createField(::std::string_view name) override
        {
            if (name == "value")
            {
                m_object.template emplace<::test_object::std_allocator::WalkerUnion::Tag::value>();
                return ::zserio::reflectable(get<::test_object::std_allocator::WalkerUnion::Tag::value>(m_object), get_allocator());
            }
            if (name == "text")
            {
                m_object.template emplace<::test_object::std_allocator::WalkerUnion::Tag::text>();
                return ::zserio::reflectable(get<::test_object::std_allocator::WalkerUnion::Tag::text>(m_object), get_allocator());
            }
            if (name == "nestedArray")
            {
                m_object.template emplace<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>();
                return ::zserio::reflectableArray(get<::test_object::std_allocator::WalkerUnion::Tag::nestedArray>(m_object), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::std::string_view getChoice() const override
        {
            switch (m_object.index())
            {
            case ::test_object::std_allocator::WalkerUnion::Tag::value:
                return "value";
            case ::test_object::std_allocator::WalkerUnion::Tag::text:
                return "text";
            case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
                return "nestedArray";
            default:
                return "";
            }
        }

        ::zserio::Any getAnyValue(const ::std::allocator<uint8_t>& alloc) const override
        {
            return ::zserio::Any(::std::cref(m_object), alloc);
        }

        ::zserio::Any getAnyValue(const ::std::allocator<uint8_t>& alloc) override
        {
            return ::zserio::Any(::std::ref(m_object), alloc);
        }

    private:
        ::test_object::std_allocator::WalkerUnion& m_object;
    };

    return ::std::allocate_shared<ReflectableImpl>(allocator, value);
}

::zserio::IIntrospectableViewConstPtr Introspectable<::test_object::std_allocator::WalkerUnion, ::std::allocator<uint8_t>>::create(
        const View<::test_object::std_allocator::WalkerUnion>& view, const ::std::allocator<uint8_t>& allocator)
{
    class IntrospectableImpl : public ::zserio::detail::CompoundIntrospectableViewBase<::test_object::std_allocator::WalkerUnion, ::std::allocator<uint8_t>>
    {
    public:
        explicit IntrospectableImpl(const ::zserio::View<::test_object::std_allocator::WalkerUnion>& view_, const ::std::allocator<uint8_t>& alloc = {}) :
                ::zserio::detail::CompoundIntrospectableViewBase<::test_object::std_allocator::WalkerUnion, ::std::allocator<uint8_t>>(
                        view_, alloc)
        {}

        ::zserio::IIntrospectableViewConstPtr getField(::std::string_view name) const override
        {
            if (name == "value")
            {
                return ::zserio::introspectable(getValue().value(), get_allocator());
            }
            if (name == "text")
            {
                return ::zserio::introspectable(getValue().text(), get_allocator());
            }
            if (name == "nestedArray")
            {
                return ::zserio::introspectableArray(getValue().nestedArray(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::std::string_view getChoice() const override
        {
            switch (getValue().zserioChoiceTag())
            {
            case ::test_object::std_allocator::WalkerUnion::Tag::value:
                return "value";
            case ::test_object::std_allocator::WalkerUnion::Tag::text:
                return "text";
            case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
                return "nestedArray";
            default:
                return "";
            }
        }
    };

    return ::std::allocate_shared<IntrospectableImpl>(allocator, view);
}

} // namespace detail
} // namespace zserio

namespace std
{

size_t hash<::test_object::std_allocator::WalkerUnion>::operator()(const ::test_object::std_allocator::WalkerUnion& value) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, static_cast<const ::test_object::std_allocator::WalkerUnion::Base&>(value));
    return static_cast<size_t>(result);
}

size_t hash<::zserio::View<::test_object::std_allocator::WalkerUnion>>::operator()(const ::zserio::View<::test_object::std_allocator::WalkerUnion>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;
    switch (view.zserioChoiceTag())
    {
    case ::test_object::std_allocator::WalkerUnion::Tag::value:
        result = ::zserio::calcHashCode(result, view.value());
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::text:
        result = ::zserio::calcHashCode(result, view.text());
        break;
    case ::test_object::std_allocator::WalkerUnion::Tag::nestedArray:
        result = ::zserio::calcHashCode(result, view.nestedArray());
        break;
    default:
        break;
    }

    return static_cast<size_t>(result);
}

} // namespace std
