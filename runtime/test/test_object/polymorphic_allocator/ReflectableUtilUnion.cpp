/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, polymorphicAllocator.
 */

#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/SizeConvertUtil.h>
#include <zserio/TypeInfo.h>
#include <zserio/UnionCaseException.h>

#include <test_object/polymorphic_allocator/ReflectableUtilUnion.h>

namespace test_object
{
namespace polymorphic_allocator
{

bool operator==(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::polymorphic_allocator::ReflectableUtilUnion& rhs)
{
    return static_cast<const ::test_object::polymorphic_allocator::ReflectableUtilUnion::Base&>(lhs) == static_cast<const ::test_object::polymorphic_allocator::ReflectableUtilUnion::Base&>(rhs);
}

bool operator<(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::polymorphic_allocator::ReflectableUtilUnion&  rhs)
{
    return static_cast<const ::test_object::polymorphic_allocator::ReflectableUtilUnion::Base&>(lhs) < static_cast<const ::test_object::polymorphic_allocator::ReflectableUtilUnion::Base&>(rhs);
}

bool operator!=(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::polymorphic_allocator::ReflectableUtilUnion& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::polymorphic_allocator::ReflectableUtilUnion& rhs)
{
    return rhs < lhs;
}

bool operator<=(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::polymorphic_allocator::ReflectableUtilUnion& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::polymorphic_allocator::ReflectableUtilUnion& rhs)
{
    return !(lhs < rhs);
}

} // namespace polymorphic_allocator
} // namespace test_object

namespace zserio
{

View<::test_object::polymorphic_allocator::ReflectableUtilUnion>::View(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& data) noexcept :
        m_data(&data)
{}

View<::test_object::polymorphic_allocator::ReflectableUtilUnion>::View(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& data,
        const View&) noexcept :
        m_data(&data)
{}

::test_object::polymorphic_allocator::ReflectableUtilEnum View<::test_object::polymorphic_allocator::ReflectableUtilUnion>::reflectableUtilEnum() const
{
    return get<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum>(*m_data);
}

::test_object::polymorphic_allocator::ReflectableUtilBitmask View<::test_object::polymorphic_allocator::ReflectableUtilUnion>::reflectableUtilBitmask() const
{
    return get<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask>(*m_data);
}

View<::test_object::polymorphic_allocator::ReflectableUtilObject> View<::test_object::polymorphic_allocator::ReflectableUtilUnion>::reflectableUtilObject() const
{
    return View<::test_object::polymorphic_allocator::ReflectableUtilObject>{get<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject>(*m_data)};
}

::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag View<::test_object::polymorphic_allocator::ReflectableUtilUnion>::zserioChoiceTag() const
{
    return m_data->index();
}

const ::test_object::polymorphic_allocator::ReflectableUtilUnion& View<::test_object::polymorphic_allocator::ReflectableUtilUnion>::zserioData() const
{
    return *m_data;
}

bool operator==(const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& rhs)
{
    if (lhs.zserioChoiceTag() != rhs.zserioChoiceTag())
    {
        return false;
    }

    switch (lhs.zserioChoiceTag())
    {
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum:
        return (lhs.reflectableUtilEnum() == rhs.reflectableUtilEnum());
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask:
        return (lhs.reflectableUtilBitmask() == rhs.reflectableUtilBitmask());
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject:
        return (lhs.reflectableUtilObject() == rhs.reflectableUtilObject());
    default:
        throw CppRuntimeException("No case set in union ::test_object::polymorphic_allocator::ReflectableUtilUnion!");
    }
}

bool operator<(const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& rhs)
{
    if (lhs.zserioChoiceTag() != rhs.zserioChoiceTag())
    {
        return lhs.zserioChoiceTag() < rhs.zserioChoiceTag();
    }

    switch (lhs.zserioChoiceTag())
    {
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum:
        return (lhs.reflectableUtilEnum() < rhs.reflectableUtilEnum());
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask:
        return (lhs.reflectableUtilBitmask() < rhs.reflectableUtilBitmask());
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject:
        return (lhs.reflectableUtilObject() < rhs.reflectableUtilObject());
    default:
        throw CppRuntimeException("No case set in union ::test_object::polymorphic_allocator::ReflectableUtilUnion!");
    }
}

bool operator!=(const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& rhs)
{
    return !(lhs < rhs);
}

namespace detail
{

template <>
void validate(const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& view, ::std::string_view)
{
    switch (view.zserioChoiceTag())
    {
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum:
        validate(view.reflectableUtilEnum(), "'ReflectableUtilUnion.reflectableUtilEnum'");
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask:
        validate(view.reflectableUtilBitmask(), "'ReflectableUtilUnion.reflectableUtilBitmask'");
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject:
        validate(view.reflectableUtilObject(), "'ReflectableUtilUnion.reflectableUtilObject'");
        break;
    default:
        throw UnionCaseException("No case set in union 'ReflectableUtilUnion'!");
    }
}

template <>
BitSize bitSizeOf(const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& view, BitSize bitPosition)
{
    BitSize endBitPosition = bitPosition;
    endBitPosition += bitSizeOf(fromCheckedValue<VarSize>(convertSizeToUInt32(view.zserioChoiceTag()) - 1));
    switch (view.zserioChoiceTag())
    {
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum:
        endBitPosition += bitSizeOf(view.reflectableUtilEnum(), endBitPosition);
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask:
        endBitPosition += bitSizeOf(view.reflectableUtilBitmask(), endBitPosition);
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject:
        endBitPosition += bitSizeOf(view.reflectableUtilObject(), endBitPosition);
        break;
    default:
        throw CppRuntimeException("No case set in union ::test_object::polymorphic_allocator::ReflectableUtilUnion!");
    }

    return endBitPosition - bitPosition;
}

template <>
void write(BitStreamWriter& writer, const View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& view)
{
    write(writer, fromCheckedValue<VarSize>(convertSizeToUInt32(view.zserioChoiceTag()) - 1));
    switch (view.zserioChoiceTag())
    {
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum:
        write(writer, view.reflectableUtilEnum());
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask:
        write(writer, view.reflectableUtilBitmask());
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject:
        write(writer, view.reflectableUtilObject());
        break;
    default:
        throw CppRuntimeException("No case set in union ::test_object::polymorphic_allocator::ReflectableUtilUnion!");
    }
}

template <>
View<::test_object::polymorphic_allocator::ReflectableUtilUnion> read(BitStreamReader& reader, ::test_object::polymorphic_allocator::ReflectableUtilUnion& data)
{
    View<::test_object::polymorphic_allocator::ReflectableUtilUnion> view(data);

    VarSize choiceTag;
    read(reader, choiceTag);
    switch (static_cast<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag>(choiceTag + 1))
    {
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum:
        data.emplace<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum>();
        read(reader, data.get<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum>());
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask:
        data.emplace<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask>();
        read(reader, data.get<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask>());
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject:
        data.emplace<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject>(data.get_allocator());
        (void)read(reader, data.get<::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject>());
        break;
    default:
        throw CppRuntimeException("No case set in union ::test_object::polymorphic_allocator::ReflectableUtilUnion!");
    }

    return view;
}

const ::zserio::pmr::ITypeInfo& TypeInfo<::test_object::polymorphic_allocator::ReflectableUtilUnion, ::zserio::pmr::PropagatingPolymorphicAllocator<uint8_t>>::get()
{
    using AllocatorType = ::zserio::pmr::PropagatingPolymorphicAllocator<uint8_t>;

    static const ::std::string_view templateName;
    static const ::zserio::Span<::zserio::BasicTemplateArgumentInfo<AllocatorType>> templateArguments;

    static const ::std::array<::zserio::BasicFieldInfo<AllocatorType>, 3> fields = {
        ::zserio::BasicFieldInfo<AllocatorType>{
            "reflectableUtilEnum", // schemaName
            ::zserio::typeInfo<::test_object::polymorphic_allocator::ReflectableUtilEnum, ::zserio::pmr::PropagatingPolymorphicAllocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<AllocatorType>{
            "reflectableUtilBitmask", // schemaName
            ::zserio::typeInfo<::test_object::polymorphic_allocator::ReflectableUtilBitmask, ::zserio::pmr::PropagatingPolymorphicAllocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<AllocatorType>{
            "reflectableUtilObject", // schemaName
            ::zserio::typeInfo<::test_object::polymorphic_allocator::ReflectableUtilObject, ::zserio::pmr::PropagatingPolymorphicAllocator<uint8_t>>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        }
    };

    static const ::zserio::Span<::zserio::BasicParameterInfo<AllocatorType>> parameters;

    static const ::zserio::Span<::zserio::BasicFunctionInfo<AllocatorType>> functions;

    static const ::zserio::detail::UnionTypeInfo<AllocatorType> typeInfo = {
        "test_object.polymorphic_allocator.ReflectableUtilUnion", nullptr,
        templateName, templateArguments, fields, parameters, functions
    };

    return typeInfo;
}

} // namespace detail
} // namespace zserio

namespace std
{

size_t hash<::test_object::polymorphic_allocator::ReflectableUtilUnion>::operator()(const ::test_object::polymorphic_allocator::ReflectableUtilUnion& value) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, static_cast<const ::test_object::polymorphic_allocator::ReflectableUtilUnion::Base&>(value));
    return static_cast<size_t>(result);
}

size_t hash<::zserio::View<::test_object::polymorphic_allocator::ReflectableUtilUnion>>::operator()(const ::zserio::View<::test_object::polymorphic_allocator::ReflectableUtilUnion>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;
    switch (view.zserioChoiceTag())
    {
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilEnum:
        result = ::zserio::calcHashCode(result, view.reflectableUtilEnum());
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilBitmask:
        result = ::zserio::calcHashCode(result, view.reflectableUtilBitmask());
        break;
    case ::test_object::polymorphic_allocator::ReflectableUtilUnion::ChoiceTag::CHOICE_reflectableUtilObject:
        result = ::zserio::calcHashCode(result, view.reflectableUtilObject());
        break;
    default:
        throw ::zserio::CppRuntimeException("No case set in union ::test_object::polymorphic_allocator::ReflectableUtilUnion!");
    }

    return static_cast<size_t>(result);
}

} // namespace std
