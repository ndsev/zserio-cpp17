/**
 * Automatically generated by Zserio C++17 generator version 0.2.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, std-polymorphicAllocator.
 */

#ifndef TEST_OBJECT_STD_POLYMORPHIC_ALLOCATOR_REFLECTABLE_UTIL_UNION_H
#define TEST_OBJECT_STD_POLYMORPHIC_ALLOCATOR_REFLECTABLE_UTIL_UNION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP17_EXTENSION_RUNTIME_VERSION_NUMBER != 2000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 0.2.0.
#endif

#include <memory>

#include <zserio/pmr/Variant.h>
#include <zserio/ChoiceTag.h>
#include <zserio/pmr/ITypeInfo.h>
#include <zserio/pmr/IReflectableData.h>
#include <zserio/pmr/IIntrospectableView.h>
#include <zserio/View.h>

#include <test_object/std_polymorphic_allocator/ReflectableUtilBitmask.h>
#include <test_object/std_polymorphic_allocator/ReflectableUtilEnum.h>
#include <test_object/std_polymorphic_allocator/ReflectableUtilObject.h>

namespace test_object
{
namespace std_polymorphic_allocator
{

// forward declaration
struct ReflectableUtilUnion;

} // namespace std_polymorphic_allocator
} // namespace test_object

namespace zserio
{
namespace detail
{

template <>
struct ChoiceTag<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>
{
    enum Tag : size_t
    {
        UNDEFINED_CHOICE,
        CHOICE_reflectableUtilEnum,
        CHOICE_reflectableUtilBitmask,
        CHOICE_reflectableUtilObject
    };
};

} // namespace detail
} // namespace zserio

namespace test_object
{
namespace std_polymorphic_allocator
{

struct ReflectableUtilUnion : ::zserio::pmr::Variant<::zserio::detail::ChoiceTag<ReflectableUtilUnion>::Tag,
        ::std::monostate,
        ::test_object::std_polymorphic_allocator::ReflectableUtilEnum,
        ::test_object::std_polymorphic_allocator::ReflectableUtilBitmask,
        ::test_object::std_polymorphic_allocator::ReflectableUtilObject>
{
    using ChoiceTag = ::zserio::detail::ChoiceTag<ReflectableUtilUnion>::Tag;
    using Base = ::zserio::pmr::Variant<ChoiceTag,
            ::std::monostate,
            ::test_object::std_polymorphic_allocator::ReflectableUtilEnum,
            ::test_object::std_polymorphic_allocator::ReflectableUtilBitmask,
            ::test_object::std_polymorphic_allocator::ReflectableUtilObject>;
    using Base::BasicVariant;
};

bool operator==(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& rhs);
bool operator<(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& rhs);
bool operator!=(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& rhs);
bool operator>(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& rhs);
bool operator<=(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& rhs);
bool operator>=(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& lhs, const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& rhs);

} // namespace std_polymorphic_allocator
} // namespace test_object

namespace zserio
{

template <>
class View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>
{
public:
    explicit View(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& data) noexcept;

    ::test_object::std_polymorphic_allocator::ReflectableUtilEnum reflectableUtilEnum() const;
    ::test_object::std_polymorphic_allocator::ReflectableUtilBitmask reflectableUtilBitmask() const;
    View<::test_object::std_polymorphic_allocator::ReflectableUtilObject> reflectableUtilObject() const;

    ::test_object::std_polymorphic_allocator::ReflectableUtilUnion::ChoiceTag zserioChoiceTag() const;
    const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& zserioData() const;

protected:
    View(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& data, const View& other) noexcept;

private:
    const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion* m_data;
};

bool operator==(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& rhs);
bool operator<(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& rhs);
bool operator!=(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& rhs);
bool operator>(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& rhs);
bool operator<=(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& rhs);
bool operator>=(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& lhs, const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& rhs);

namespace detail
{

template <>
void validate(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& view, ::std::string_view fieldName);

template <>
BitSize bitSizeOf(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& view, BitSize bitPosition);

template <>
void write(BitStreamWriter& writer, const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& view);

template <>
View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion> read(BitStreamReader& reader, ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& data);

template <>
struct TypeInfo<::test_object::std_polymorphic_allocator::ReflectableUtilUnion, ::std::pmr::polymorphic_allocator<uint8_t>>
{
    static const ::zserio::pmr::ITypeInfo& get();
};

} // namespace detail

template <>
::zserio::pmr::IReflectableDataConstPtr reflectable(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& value, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator);

template <>
::zserio::pmr::IReflectableDataPtr reflectable(::test_object::std_polymorphic_allocator::ReflectableUtilUnion& value, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator);

template <>
::zserio::pmr::IIntrospectableViewConstPtr introspectable(const View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& view, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator);

} // namespace zserio

namespace std
{

template <>
struct hash<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>
{
    size_t operator()(const ::test_object::std_polymorphic_allocator::ReflectableUtilUnion& value) const;
};

template <>
struct hash<::zserio::View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>>
{
    size_t operator()(const ::zserio::View<::test_object::std_polymorphic_allocator::ReflectableUtilUnion>& view) const;
};

} // namespace std

#endif // TEST_OBJECT_STD_POLYMORPHIC_ALLOCATOR_REFLECTABLE_UTIL_UNION_H
