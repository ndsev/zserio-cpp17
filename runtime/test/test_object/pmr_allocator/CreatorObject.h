/**
 * Automatically generated by Zserio C++17 generator version 0.4.0 using Zserio core 2.16.0.
 * Generator setup: typeInfoCode, pmrAllocator.
 */

#ifndef TEST_OBJECT_PMR_ALLOCATOR_CREATOR_OBJECT_H
#define TEST_OBJECT_PMR_ALLOCATOR_CREATOR_OBJECT_H

#include <memory>
#include <zserio/pmr/Optional.h>
#include <zserio/pmr/ITypeInfo.h>
#include <zserio/pmr/IReflectableData.h>
#include <zserio/pmr/IIntrospectableView.h>
#include <zserio/View.h>
#include <memory_resource>
#include <zserio/ArrayView.h>
#include <zserio/Types.h>
#include <zserio/pmr/BitBuffer.h>
#include <zserio/pmr/Bytes.h>
#include <zserio/pmr/String.h>
#include <zserio/pmr/Vector.h>

#include <test_object/pmr_allocator/CreatorNested.h>

namespace test_object
{
namespace pmr_allocator
{

struct CreatorObject
{
    using allocator_type = ::std::pmr::polymorphic_allocator<uint8_t>;

    CreatorObject() noexcept;
    explicit CreatorObject(const allocator_type& allocator) noexcept;

    CreatorObject(CreatorObject&&) = default;
    CreatorObject(CreatorObject&& other, const allocator_type& allocator);

    CreatorObject(const CreatorObject&) = default;
    CreatorObject(const CreatorObject& other, const allocator_type& allocator);

    CreatorObject& operator=(CreatorObject&&) = default;
    CreatorObject& operator=(const CreatorObject&) = default;

    ~CreatorObject() = default;

    CreatorObject(
            ::zserio::UInt32 value_,
            ::test_object::pmr_allocator::CreatorNested nested_,
            ::zserio::pmr::String text_,
            ::zserio::pmr::Vector<::test_object::pmr_allocator::CreatorNested> nestedArray_,
            ::zserio::pmr::Vector<::zserio::pmr::String> textArray_,
            ::zserio::pmr::Optional<::zserio::pmr::Vector<::zserio::pmr::BitBuffer>> externArray_,
            ::zserio::pmr::Optional<::zserio::pmr::Vector<::zserio::pmr::Bytes>> bytesArray_,
            ::zserio::pmr::Optional<::zserio::Bool> optionalBool_,
            ::zserio::pmr::Optional<::test_object::pmr_allocator::CreatorNested> optionalNested_,
            const allocator_type& allocator = {});

    ::zserio::UInt32 value;
    ::test_object::pmr_allocator::CreatorNested nested;
    ::zserio::pmr::String text;
    ::zserio::pmr::Vector<::test_object::pmr_allocator::CreatorNested> nestedArray;
    ::zserio::pmr::Vector<::zserio::pmr::String> textArray;
    ::zserio::pmr::Optional<::zserio::pmr::Vector<::zserio::pmr::BitBuffer>> externArray;
    ::zserio::pmr::Optional<::zserio::pmr::Vector<::zserio::pmr::Bytes>> bytesArray;
    ::zserio::pmr::Optional<::zserio::Bool> optionalBool;
    ::zserio::pmr::Optional<::test_object::pmr_allocator::CreatorNested> optionalNested;
};

bool operator==(const ::test_object::pmr_allocator::CreatorObject& lhs, const ::test_object::pmr_allocator::CreatorObject& rhs);
bool operator<(const ::test_object::pmr_allocator::CreatorObject& lhs, const ::test_object::pmr_allocator::CreatorObject& rhs);
bool operator!=(const ::test_object::pmr_allocator::CreatorObject& lhs, const ::test_object::pmr_allocator::CreatorObject& rhs);
bool operator>(const ::test_object::pmr_allocator::CreatorObject& lhs, const ::test_object::pmr_allocator::CreatorObject& rhs);
bool operator<=(const ::test_object::pmr_allocator::CreatorObject& lhs, const ::test_object::pmr_allocator::CreatorObject& rhs);
bool operator>=(const ::test_object::pmr_allocator::CreatorObject& lhs, const ::test_object::pmr_allocator::CreatorObject& rhs);

} // namespace pmr_allocator
} // namespace test_object

namespace zserio
{

template <>
class View<::test_object::pmr_allocator::CreatorObject>
{
public:
    struct ZserioNestedArrayArrayTraits
    {
        using OwnerType = View<::test_object::pmr_allocator::CreatorObject>;

        static View<::test_object::pmr_allocator::CreatorNested> at(const OwnerType& owner,
                const ::test_object::pmr_allocator::CreatorNested& element, size_t index);

        static void read(BitStreamReader& reader, const OwnerType& owner,
                ::test_object::pmr_allocator::CreatorNested& element, size_t index);
    };

    explicit View(const ::test_object::pmr_allocator::CreatorObject& data) noexcept;

    ::zserio::UInt32 value() const;
    View<::test_object::pmr_allocator::CreatorNested> nested() const;
    ::std::string_view text() const;
    ArrayView<const ::test_object::pmr_allocator::CreatorNested, ZserioNestedArrayArrayTraits> nestedArray() const;
    ArrayView<const ::zserio::pmr::String> textArray() const;
    ::zserio::pmr::Optional<ArrayView<const ::zserio::pmr::BitBuffer>> externArray() const;
    ::zserio::pmr::Optional<ArrayView<const ::zserio::pmr::Bytes>> bytesArray() const;
    ::zserio::pmr::Optional<::zserio::Bool> optionalBool() const;
    ::zserio::pmr::Optional<View<::test_object::pmr_allocator::CreatorNested>> optionalNested() const;

    const ::test_object::pmr_allocator::CreatorObject& zserioData() const;

protected:
    View(const ::test_object::pmr_allocator::CreatorObject& data, const View& other) noexcept;

private:
    const ::test_object::pmr_allocator::CreatorObject* m_data;
};

bool operator==(const View<::test_object::pmr_allocator::CreatorObject>& lhs, const View<::test_object::pmr_allocator::CreatorObject>& rhs);
bool operator<(const View<::test_object::pmr_allocator::CreatorObject>& lhs, const View<::test_object::pmr_allocator::CreatorObject>& rhs);
bool operator!=(const View<::test_object::pmr_allocator::CreatorObject>& lhs, const View<::test_object::pmr_allocator::CreatorObject>& rhs);
bool operator>(const View<::test_object::pmr_allocator::CreatorObject>& lhs, const View<::test_object::pmr_allocator::CreatorObject>& rhs);
bool operator<=(const View<::test_object::pmr_allocator::CreatorObject>& lhs, const View<::test_object::pmr_allocator::CreatorObject>& rhs);
bool operator>=(const View<::test_object::pmr_allocator::CreatorObject>& lhs, const View<::test_object::pmr_allocator::CreatorObject>& rhs);

namespace detail
{

template <>
void validate(const View<::test_object::pmr_allocator::CreatorObject>& view, ::std::string_view fieldName);

template <>
BitSize bitSizeOf(const View<::test_object::pmr_allocator::CreatorObject>& view, BitSize bitPosition);

template <>
void write(BitStreamWriter& writer, const View<::test_object::pmr_allocator::CreatorObject>& view);

template <>
View<::test_object::pmr_allocator::CreatorObject> read(BitStreamReader& reader, ::test_object::pmr_allocator::CreatorObject& data);

template <>
struct TypeInfo<::test_object::pmr_allocator::CreatorObject, ::std::pmr::polymorphic_allocator<uint8_t>>
{
    static const ::zserio::pmr::ITypeInfo& get();
};

} // namespace detail

template <>
::zserio::pmr::IReflectableDataConstPtr reflectable(const ::test_object::pmr_allocator::CreatorObject& value, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator);

template <>
::zserio::pmr::IReflectableDataPtr reflectable(::test_object::pmr_allocator::CreatorObject& value, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator);

template <>
::zserio::pmr::IIntrospectableViewConstPtr introspectable(const View<::test_object::pmr_allocator::CreatorObject>& view, const ::std::pmr::polymorphic_allocator<uint8_t>& allocator);

} // namespace zserio

namespace std
{

template <>
struct hash<::test_object::pmr_allocator::CreatorObject>
{
    size_t operator()(const ::test_object::pmr_allocator::CreatorObject& data) const;
};

template <>
struct hash<::zserio::View<::test_object::pmr_allocator::CreatorObject>>
{
    size_t operator()(const ::zserio::View<::test_object::pmr_allocator::CreatorObject>& view) const;
};

} // namespace std

#endif // TEST_OBJECT_PMR_ALLOCATOR_CREATOR_OBJECT_H
