#ifndef ZSERIO_ALLOCATOR_HOLDER_H_INC
#define ZSERIO_ALLOCATOR_HOLDER_H_INC

#include <type_traits>
#include <utility>

namespace zserio
{

/**
 * Base class for allocator-holding classes with get/set/allocator/ref interface.
 */
template <typename ALLOC, bool EMPTY = std::is_empty<ALLOC>::value>
class AllocatorHolder
{
public:
    using AllocatorType = ALLOC;

    /**
     * Empty constructor.
     */
    AllocatorHolder() :
            m_allocator(AllocatorType())
    {}

    /**
     * Constructor from given allocator.
     *
     * \param allocator Allocator to be stored.
     */
    explicit AllocatorHolder(const AllocatorType& allocator) :
            m_allocator(allocator)
    {}

    /**
     * Constructor from given allocator.
     *
     * \param allocator Allocator to be stored.
     */
    explicit AllocatorHolder(AllocatorType&& allocator) :
            m_allocator(std::move(allocator))
    {}

    /**
     * Method generated by default.
     * \{
     */
    ~AllocatorHolder() = default;

    AllocatorHolder(const AllocatorHolder& other) = default;
    AllocatorHolder& operator=(const AllocatorHolder& other) = default;

    AllocatorHolder(AllocatorHolder&& other) = default;
    AllocatorHolder& operator=(AllocatorHolder&& other) = default;
    /**
     * \}
     */

    /**
     * Allocator getter.
     *
     * \return Copy of the stored allocator.
     */
    AllocatorType get_allocator() const
    {
        return get_allocator_ref();
    }

protected:
    /**
     * Allocator setter.
     *
     * \param allocator Allocator to be copy-assigned to the stored allocator.
     */
    void set_allocator(const AllocatorType& allocator)
    {
        m_allocator = allocator;
    }

    /**
     * Allocator setter.
     *
     * \param allocator Allocator to be move-assigned to the stored allocator.
     */
    void set_allocator(AllocatorType&& allocator)
    {
        m_allocator = std::move(allocator);
    }

    /**
     * Allocator getter.
     *
     * \return Reference to the stored allocator.
     */
    AllocatorType& get_allocator_ref()
    {
        return m_allocator;
    }

    /**
     * Allocator getter.
     *
     * \return Reference to the stored allocator.
     */
    const AllocatorType& get_allocator_ref() const
    {
        return m_allocator;
    }

private:
    ALLOC m_allocator;
};

/**
 * Base class for allocator-holding classes with get/set/allocator/ref interface
 * specialized for empty allocator classes.
 */
template <typename ALLOC>
class AllocatorHolder<ALLOC, true>
{
public:
    using AllocatorType = ALLOC;

    /**
     * Constructor from given allocator.
     *
     * \param allocator Allocator to be stored.
     */
    explicit AllocatorHolder(const AllocatorType&)
    {}

    /**
     * Method generated by default.
     * \{
     */
    AllocatorHolder() = default;
    ~AllocatorHolder() = default;

    AllocatorHolder(const AllocatorHolder& other) = default;
    AllocatorHolder& operator=(const AllocatorHolder& other) = default;

    AllocatorHolder(AllocatorHolder&& other) = default;
    AllocatorHolder& operator=(AllocatorHolder&& other) = default;
    /**
     * \}
     */

    /**
     * Allocator getter.
     *
     * \return Copy of the stored allocator.
     */
    AllocatorType get_allocator() const
    {
        return {};
    }

protected:
    /**
     * Allocator setter.
     *
     * \param allocator Allocator to be copy-assigned to the stored allocator.
     */
    void set_allocator(const AllocatorType&)
    {}

    /**
     * Allocator setter.
     *
     * \param allocator Allocator to be move-assigned to the stored allocator.
     */
    void set_allocator(AllocatorType&&)
    {}

    /**
     * Allocator getter.
     *
     * \return Reference to the stored allocator.
     */
    AllocatorType get_allocator_ref() const
    {
        return {};
    }
};

} // namespace zserio

#endif // ifndef ZSERIO_ALLOCATOR_HOLDER_H_INC
