# This is necessary for implementation. We intentionally store all possible array element types in 'uint64_t'
# type to be able to implement delta compression.
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:92
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:111
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:171
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:207
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:257
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:273

# Optional is a generic container and exceptions may be thrown from the value type.
bugprone-exception-escape:src/zserio/Optional.h:357
bugprone-exception-escape:src/zserio/Optional.h:384

# False positives - has_value() is checked before value().
bugprone-exception-escape:src/zserio/Optional.h:220
bugprone-exception-escape:src/zserio/Optional.h:404

# Variant is a generic container and exceptions may be thrown from the element types.
bugprone-exception-escape:src/zserio/Variant.h:242
bugprone-exception-escape:src/zserio/Variant.h:269

# Iteration through all variant types is needed for folding expression, m_data active element is moved out
# but index remains so it's safe to access.
bugprone-use-after-move:src/zserio/Variant.h:681

# Specialization of std::hash is allowed.
cert-dcl58-cpp:src/zserio/BitBuffer.h:587
cert-dcl58-cpp:src/zserio/BitBuffer.h:599
cert-dcl58-cpp:src/zserio/Extended.h:203
cert-dcl58-cpp:src/zserio/Optional.h:1170
cert-dcl58-cpp:src/zserio/Variant.h:841
cert-dcl58-cpp:src/zserio/View.h:223

# This is necessary for low level implementation of Span to mimic standard C++20 'std::span' abstraction.
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:112
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:123
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:136
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:148
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:161
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:174

# This must be preprocessor define because version is checked during compilation time.
cppcoreguidelines-macro-usage:src/zserio/CppRuntimeVersion.h:8

# This is necessary for convenient usage of CppRuntimeException.
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/CppRuntimeException.h:193

# Optional follows std::optional so passing value by const & is correct.
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:582
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:599
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:799
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:813
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:939
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:953
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:1011
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:1025

# This is necessary for low level implementation of Span to mimic standard C++20 'std::span' abstraction.
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Span.h:113

# The following is filtered out because bounds are checked naturally by implementation. Therefore method 'at'
# would only bring the performance drop.
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamReader.cpp:301
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamReader.cpp:315
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:349
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:360
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:371
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:372
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:378
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:383
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:384
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:390
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:587
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:655
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/Enums.h:83
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/Enums.h:96
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:44
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:45
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:50
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:55
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:56

# This is necessary for implementation of reading and writing to the file.
cppcoreguidelines-pro-type-reinterpret-cast:src/zserio/FileUtil.cpp:19
cppcoreguidelines-pro-type-reinterpret-cast:src/zserio/FileUtil.cpp:49

# This is necessary for cast the return value from SQLite3 low level API call (sqlite3_column_text).
cppcoreguidelines-pro-type-reinterpret-cast:src/zserio/ValidationSqliteUtil.h:99
cppcoreguidelines-pro-type-reinterpret-cast:src/zserio/ValidationSqliteUtil.h:100

# Optional follows std::optional so the ctors should be implicit.
google-explicit-constructor:src/zserio/Optional.h:122
google-explicit-constructor:src/zserio/Optional.h:132
google-explicit-constructor:src/zserio/Optional.h:142
google-explicit-constructor:src/zserio/Optional.h:243

# This is necessary for low level implementation of Span to mimic standard C++20 'std::span' abstraction.
google-explicit-constructor:src/zserio/Span.h:112
google-explicit-constructor:src/zserio/Span.h:125
google-explicit-constructor:src/zserio/Span.h:138
google-explicit-constructor:src/zserio/Span.h:150
google-explicit-constructor:src/zserio/Span.h:163
google-explicit-constructor:src/zserio/Span.h:176

# PropagatingPolymorphicAllocator follows std::polymorphic:_allocator so the ctors should be implicit.
google-explicit-constructor:src/zserio/pmr/PropagatingPolymorphicAllocator.h:35
google-explicit-constructor:src/zserio/pmr/PropagatingPolymorphicAllocator.h:62

# This is requirement on type wrappers in Zserio C++17 extension.
google-explicit-constructor:src/zserio/Types.h:59
google-explicit-constructor:src/zserio/Types.h:66

# There is no C-style casting. Probably tidy doesn't understand template auto parameter.
google-readability-casting:src/zserio/Variant.h:45
google-readability-casting:src/zserio/Variant.h:66

# Needed to allow seamless conversion View<DynIntWrapper<T, 0>> to the value type T.
google-explicit-constructor:src/zserio/View.h:133

# Intentional tests.
bugprone-exception-escape:test/zserio/OptionalTest.cpp:75
bugprone-exception-escape:test/zserio/VariantTest.cpp:35
cppcoreguidelines-avoid-c-arrays:test/zserio/SpanTest.cpp:45
cppcoreguidelines-special-member-functions:test/zserio/VariantTest.cpp:32
cppcoreguidelines-pro-bounds-pointer-arithmetic:test/zserio/BitBufferTest.cpp:353
cppcoreguidelines-pro-bounds-pointer-arithmetic:test/zserio/BitBufferTest.cpp:367
cppcoreguidelines-pro-bounds-pointer-arithmetic:test/zserio/SpanTest.cpp:34
cppcoreguidelines-pro-bounds-pointer-arithmetic:test/zserio/SpanTest.cpp:38
cppcoreguidelines-pro-type-reinterpret-cast:test/zserio/SqliteConnectionTest.cpp:321
fuchsia-multiple-inheritance:test/zserio/VariantTest.cpp:13
google-explicit-constructor:test/zserio/BitmasksTest.cpp:22
google-explicit-constructor:test/zserio/BuiltInOperatorsTest.cpp:25
google-explicit-constructor:test/zserio/TrackingAllocator.h:86
performance-move-const-arg:test/zserio/ExtendedTest.cpp:83
performance-move-const-arg:test/zserio/ExtendedTest.cpp:91
performance-move-const-arg:test/zserio/pmr/PropagatingPolymorphicAllocatorTest.cpp:56
performance-move-const-arg:test/zserio/pmr/PropagatingPolymorphicAllocatorTest.cpp:73
