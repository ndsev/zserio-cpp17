# This is necessary for implementation. We intentionally store all possible array element types in 'uint64_t'
# type to be able to implement delta compression.
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:92
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:111
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:171
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:207
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:257
bugprone-signed-char-misuse:src/zserio/DeltaContext.h:273

# Optional is a generic container and exceptions may be thrown from the value type.
bugprone-exception-escape:src/zserio/Optional.h:352
bugprone-exception-escape:src/zserio/Optional.h:379

# False positives - has_value() is checked before value().
bugprone-exception-escape:src/zserio/Optional.h:215
bugprone-exception-escape:src/zserio/Optional.h:399

# Variant is a generic container and exceptions may be thrown from the element types.
bugprone-exception-escape:src/zserio/Variant.h:242
bugprone-exception-escape:src/zserio/Variant.h:269

# Iteration through all variant types is needed for folding expression, m_data active element is moved out
# but index remains so it's safe to access.
bugprone-use-after-move:src/zserio/Variant.h:681

# Specialization of std::hash is allowed.
cert-dcl58-cpp:src/zserio/BitBuffer.h:580
cert-dcl58-cpp:src/zserio/BitBuffer.h:592
cert-dcl58-cpp:src/zserio/Optional.h:1165
cert-dcl58-cpp:src/zserio/Variant.h:841
cert-dcl58-cpp:src/zserio/View.h:200

# This is necessary for low level implementation of Span to mimic standard C++20 'std::span' abstraction.
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:112
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:123
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:136
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:148
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:161
cppcoreguidelines-avoid-c-arrays:src/zserio/Span.h:174

# This must be preprocessor define because version is checked during compilation time.
cppcoreguidelines-macro-usage:src/zserio/CppRuntimeVersion.h:8

# This is necessary for convenient usage of CppRuntimeException.
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/CppRuntimeException.h:193

# Optional follows std::optional so passing value by const & is correct.
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:577
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:594
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:794
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:808
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:934
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:948
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:1006
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Optional.h:1020

# This is necessary for low level implementation of Span to mimic standard C++20 'std::span' abstraction.
cppcoreguidelines-pro-bounds-array-to-pointer-decay:src/zserio/Span.h:113

# The following is filtered out because bounds are checked naturally by implementation. Therefore method 'at'
# would only bring the performance drop.
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamReader.cpp:301
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamReader.cpp:315
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:349
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:360
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:371
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:372
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:378
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:383
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:384
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:390
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:587
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/BitStreamWriter.cpp:655
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/Enums.h:83
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/Enums.h:96
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:43
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:44
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:49
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:54
cppcoreguidelines-pro-bounds-constant-array-index:src/zserio/StringConvertUtil.h:55

# This is necessary for implementation of reading and writing to the file.
cppcoreguidelines-pro-type-reinterpret-cast:src/zserio/FileUtil.cpp:19
cppcoreguidelines-pro-type-reinterpret-cast:src/zserio/FileUtil.cpp:49

# Optional follows std::optional so the ctors should be implicit.
google-explicit-constructor:src/zserio/Optional.h:117
google-explicit-constructor:src/zserio/Optional.h:127
google-explicit-constructor:src/zserio/Optional.h:137
google-explicit-constructor:src/zserio/Optional.h:238

# This is necessary for low level implementation of Span to mimic standard C++20 'std::span' abstraction.
google-explicit-constructor:src/zserio/Span.h:112
google-explicit-constructor:src/zserio/Span.h:125
google-explicit-constructor:src/zserio/Span.h:138
google-explicit-constructor:src/zserio/Span.h:150
google-explicit-constructor:src/zserio/Span.h:163
google-explicit-constructor:src/zserio/Span.h:176

# This is requirement on type wrappers in Zserio C++17 extension.
google-explicit-constructor:src/zserio/Types.h:58
google-explicit-constructor:src/zserio/Types.h:65

# There is no C-style casting. Probably tidy doesn't understand template auto parameter.
google-readability-casting:src/zserio/Variant.h:45
google-readability-casting:src/zserio/Variant.h:66

# Needed to allow seamless conversion View<DynIntWrapper<T, 0>> to the value type T.
google-explicit-constructor:src/zserio/View.h:110

# Intentional tests.
cppcoreguidelines-avoid-c-arrays:test/zserio/SpanTest.cpp:45
cppcoreguidelines-special-member-functions:test/zserio/VariantTest.cpp:32
cppcoreguidelines-pro-bounds-pointer-arithmetic:test/zserio/BitBufferTest.cpp:353
cppcoreguidelines-pro-bounds-pointer-arithmetic:test/zserio/BitBufferTest.cpp:367
cppcoreguidelines-pro-bounds-pointer-arithmetic:test/zserio/SpanTest.cpp:34
cppcoreguidelines-pro-bounds-pointer-arithmetic:test/zserio/SpanTest.cpp:38
bugprone-exception-escape:test/zserio/OptionalTest.cpp:258
bugprone-exception-escape:test/zserio/VariantTest.cpp:35
fuchsia-multiple-inheritance:test/zserio/VariantTest.cpp:13
google-explicit-constructor:test/zserio/BuiltInOperatorsTest.cpp:25
google-explicit-constructor:test/zserio/TrackingAllocator.h:86
