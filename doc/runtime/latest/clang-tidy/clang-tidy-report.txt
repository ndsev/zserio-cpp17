/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamReader.cpp:301:29: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  301 |         value = ctx.cache & MASK_TABLE[ctx.cacheNumBits];
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamReader.cpp:315:81: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  315 |     value |= ((ctx.cache >> static_cast<uint8_t>(ctx.cacheNumBits - numBits)) & MASK_TABLE[numBits]);
      |                                                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:349:66: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  349 |     if (numBits == 0 || numBits > sizeof(uint32_t) * 8 || data > MAX_U32_VALUES[numBits])
      |                                                                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:360:66: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  360 |     if (numBits == 0 || numBits > sizeof(uint64_t) * 8 || data > MAX_U64_VALUES[numBits])
      |                                                                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:371:65: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  371 |     if (numBits == 0 || numBits > sizeof(int32_t) * 8 || data < MIN_I32_VALUES[numBits] ||
      |                                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:372:20: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  372 |             data > MAX_I32_VALUES[numBits])
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:378:59: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  378 |     writeUnsignedBits32Impl(static_cast<uint32_t>(data) & MAX_U32_VALUES[numBits], numBits);
      |                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:383:65: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  383 |     if (numBits == 0 || numBits > sizeof(int64_t) * 8 || data < MIN_I64_VALUES[numBits] ||
      |                                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:384:20: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  384 |             data > MAX_I64_VALUES[numBits])
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:390:59: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  390 |     writeUnsignedBits64Impl(static_cast<uint64_t>(data) & MAX_U64_VALUES[numBits], numBits);
      |                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:587:31: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  587 |         const uint32_t mask = MAX_U32_VALUES[restNumBits];
      |                               ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitStreamWriter.cpp:655:73: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  655 |         const uint8_t add = static_cast<uint8_t>((value >> shiftBits) & bitMasks[numBits - 1U]);
      |                                                                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/FileUtil.cpp:19:23: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
   19 |     if (!stream.write(reinterpret_cast<const char*>(buffer), static_cast<std::streamsize>(byteSize)))
      |                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/FileUtil.cpp:49:22: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
   49 |     if (!stream.read(reinterpret_cast<char*>(bitBuffer.getBuffer()),
      |                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/JsonEncoder.cpp:97:34: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   97 |                 (void)stream.put(HEX[(characterInt >> 4U) & 0xFU]);
      |                                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/JsonEncoder.cpp:98:34: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   98 |                 (void)stream.put(HEX[characterInt & 0xFU]);
      |                                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:251:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  251 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:460:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  460 |             other.getUntypedHolder()->clone(&m_untypedHolder.inPlace);
      |                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:463:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  463 |         else if (other.m_untypedHolder.heap != nullptr)
      |                                        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:465:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  465 |             m_untypedHolder.heap = other.getUntypedHolder()->clone(get_allocator_ref());
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:469:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  469 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:477:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  477 |             other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
      |                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:481:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  481 |         else if (other.m_untypedHolder.heap != nullptr)
      |                                        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:487:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  487 |                 other.m_untypedHolder.heap = nullptr;
      |                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:492:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  492 |                 m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:498:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  498 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ppmr/PropagatingPolymorphicAllocator.h:35:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   35 |     PropagatingPolymorphicAllocator(
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ppmr/PropagatingPolymorphicAllocator.h:62:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   62 |     PropagatingPolymorphicAllocator(const PropagatingPolymorphicAllocator<U>& other) noexcept :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/TrackingAllocator.h:86:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   86 |     TrackingAllocatorImpl(const TrackingAllocatorImpl<Other>& other) :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/DeltaContext.h:90:55: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
   90 |             m_previousElement = static_cast<uint64_t>(element);
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/DeltaContext.h:109:59: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
  109 |                 m_previousElement = static_cast<uint64_t>(element);
      |                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/DeltaContext.h:169:59: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
  169 |                 m_previousElement = static_cast<uint64_t>(readElement);
      |                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/DeltaContext.h:205:59: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
  205 |                 m_previousElement = static_cast<uint64_t>(element);
      |                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/DeltaContext.h:255:51: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
  255 |         m_previousElement = static_cast<uint64_t>(element);
      |                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/DeltaContext.h:271:51: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
  271 |         m_previousElement = static_cast<uint64_t>(element);
      |                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:59:11: note: 'std' namespace opened here
   59 | namespace std _GLIBCXX_VISIBILITY(default)
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/BitBufferTest.cpp:353:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  353 |         readBuffer++;
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/BitBufferTest.cpp:367:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  367 |         readBuffer++;
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/TrackingAllocator.h:86:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   86 |     TrackingAllocatorImpl(const TrackingAllocatorImpl<Other>& other) :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/BitmasksTest.cpp:22:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   22 |     constexpr TestBitmask(Values value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/BuiltInOperatorsTest.cpp:46:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   46 |     constexpr DummyBitmask(Values value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeVersion.h:8:9: warning: macro 'CPP17_EXTENSION_RUNTIME_VERSION_NUMBER' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
    8 | #define CPP17_EXTENSION_RUNTIME_VERSION_NUMBER 5000
      |         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:251:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  251 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:477:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  477 |             other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
      |                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:481:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  481 |         else if (other.m_untypedHolder.heap != nullptr)
      |                                        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:487:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  487 |                 other.m_untypedHolder.heap = nullptr;
      |                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:492:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  492 |                 m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:498:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  498 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:574:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  574 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:186:30: warning: function 'parseElement' is within a recursive call chain [misc-no-recursion]
  186 | void BasicJsonParser<ALLOC>::parseElement()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:186:30: note: example recursive call chain, starting from function 'parseElement'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:192:9: note: Frame #1: function 'parseElement' calls function 'parseArray' here:
  192 |         parseArray();
      |         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:260:9: note: Frame #2: function 'parseArray' calls function 'parseElements' here:
  260 |         parseElements();
      |         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:270:5: note: Frame #3: function 'parseElements' calls function 'parseElement' here:
  270 |     parseElement();
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:270:5: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:209:30: warning: function 'parseObject' is within a recursive call chain [misc-no-recursion]
  209 | void BasicJsonParser<ALLOC>::parseObject()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:224:30: warning: function 'parseMembers' is within a recursive call chain [misc-no-recursion]
  224 | void BasicJsonParser<ALLOC>::parseMembers()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:235:30: warning: function 'parseMember' is within a recursive call chain [misc-no-recursion]
  235 | void BasicJsonParser<ALLOC>::parseMember()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:253:30: warning: function 'parseArray' is within a recursive call chain [misc-no-recursion]
  253 | void BasicJsonParser<ALLOC>::parseArray()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:268:30: warning: function 'parseElements' is within a recursive call chain [misc-no-recursion]
  268 | void BasicJsonParser<ALLOC>::parseElements()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:223:5: warning: an exception may be thrown in function '~BasicOptional' which should not throw exceptions [bugprone-exception-escape]
  223 |     ~BasicOptional()
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:409:20: warning: an exception may be thrown in function 'has_value' which should not throw exceptions [bugprone-exception-escape]
  409 |     constexpr bool has_value() const noexcept
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:113:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  113 |             m_storage(arr, N)
      |                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/UniquePtr.h:55:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   55 |     UniquePtrDeleter(const ALLOC_T& allocator) :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:485:26: warning: function 'walkFields' is within a recursive call chain [misc-no-recursion]
  485 | void BasicWalker<ALLOC>::walkFields(
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:544:26: note: example recursive call chain, starting from function 'walkFieldValue'
  544 | bool BasicWalker<ALLOC>::walkFieldValue(const IBasicReflectableDataConstPtr<ALLOC>& reflectable,
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:553:13: note: Frame #1: function 'walkFieldValue' calls function 'walkFields' here:
  553 |             walkFields(reflectable, typeInfo);
      |             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:500:17: note: Frame #2: function 'walkFields' calls function 'walkField' here:
  500 |                 walkField(compound->getField(compoundChoice), *fieldsIt);
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:528:22: note: Frame #3: function 'walkField' calls function 'walkFieldValue' here:
  528 |                 if (!walkFieldValue(reflectable->at(i), fieldInfo, i))
      |                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:528:22: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:518:26: warning: function 'walkField' is within a recursive call chain [misc-no-recursion]
  518 | bool BasicWalker<ALLOC>::walkField(
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:544:26: warning: function 'walkFieldValue' is within a recursive call chain [misc-no-recursion]
  544 | bool BasicWalker<ALLOC>::walkFieldValue(const IBasicReflectableDataConstPtr<ALLOC>& reflectable,
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<bool, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<double, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<long, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<std::nullptr_t, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<unsigned long, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  349 | BasicAny<ALLOC> makeAnyBitmaskValue(
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<bool, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<double, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<long, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<std::nullptr_t, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<std::nullptr_t, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<unsigned long, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<bool &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<bool &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<bool &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<bool &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<bool &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' calls function 'makeAnyEnumValue<bool, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<bool, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' calls function 'makeAnyValue<bool &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<double &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<double &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<double &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<double &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<double &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<double &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<double &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' calls function 'makeAnyEnumValue<double, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<double, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' calls function 'makeAnyValue<double &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<long &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<long &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<long &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<long &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<long &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' calls function 'makeAnyEnumValue<long, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<long, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' calls function 'makeAnyValue<long &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<std::nullptr_t &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<std::nullptr_t &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<std::nullptr_t &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' calls function 'makeAnyEnumValue<std::nullptr_t, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<std::nullptr_t, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' calls function 'makeAnyValue<std::nullptr_t &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<unsigned long &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<unsigned long &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long &, zserio::ppmr::PropagatingPolymorphicAllocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ppmr/PropagatingPolymorphicAllocator.h:35:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   35 |     PropagatingPolymorphicAllocator(
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ppmr/PropagatingPolymorphicAllocator.h:62:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   62 |     PropagatingPolymorphicAllocator(const PropagatingPolymorphicAllocator<U>& other) noexcept :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Enums.h:84:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   84 |     return EnumTraits<T>::values[ordinal];
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Enums.h:97:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   97 |     return EnumTraits<T>::names[enumToOrdinal(value)];
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Extended.h:242:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  242 | struct hash<zserio::Extended<T>>
      |        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:59:11: note: 'std' namespace opened here
   59 | namespace std _GLIBCXX_VISIBILITY(default)
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/ExtendedTest.cpp:83:48: warning: std::move of the variable 'extendedData' of the trivially-copyable type 'Extended<TestData>' has no effect; remove std::move() [performance-move-const-arg]
   83 |     const Extended<TestData> extendedDataMoved(std::move(extendedData));
      |                                                ^~~~~~~~~~            ~
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/ExtendedTest.cpp:91:25: warning: std::move of the variable 'extendedData' of the trivially-copyable type 'Extended<TestData>' has no effect; remove std::move() [performance-move-const-arg]
   91 |     extendedDataMoved = std::move(extendedData);
      |                         ^~~~~~~~~~            ~
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Extended.h:242:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  242 | struct hash<zserio::Extended<T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Extended.h:238:11: note: 'std' namespace opened here
  238 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/GenericAccessorTest.cpp:30:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   30 |     constexpr TestBitmask(Values value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:59:11: note: 'std' namespace opened here
   59 | namespace std _GLIBCXX_VISIBILITY(default)
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Enums.h:97:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   97 |     return EnumTraits<T>::names[enumToOrdinal(value)];
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/IntrospectableView.h:881:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
  881 | class IntrospectableViewArray : public IntrospectableViewBase<ARRAY_VIEW, ALLOC>, public AllocatorHolder<ALLOC>
      | ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/IntrospectableView.h:1120:75: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1120 | IBasicIntrospectableViewConstPtr<ALLOC> IntrospectableViewBase<T, ALLOC>::getFromObject(
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/IntrospectableView.h:1120:75: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/IntrospectableView.h:1133:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1133 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/IntrospectableView.h:1133:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:45:72: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
   45 | constexpr bool is_variant_heap_allocated_v = is_variant_heap_allocated<I, T...>::value;
      |                                                                        ^
      |                                                                        static_cast<>( )
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:255:5: warning: an exception may be thrown in function 'BasicVariant' which should not throw exceptions [bugprone-exception-escape]
  255 |     BasicVariant(BasicVariant&& other) :
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:738:28: warning: 'other' used after it was moved [bugprone-use-after-move]
  738 |         (move<I>(std::move(other)), ...);
      |                            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:738:10: note: move occurred here
  738 |         (move<I>(std::move(other)), ...);
      |          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:907:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  907 | struct hash<zserio::BasicVariant<ALLOC, INDEX, T...>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:903:11: note: 'std' namespace opened here
  903 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/IntrospectableViewTest.cpp:14:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
   14 | using namespace std::placeholders;
      | ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:251:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  251 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:574:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  574 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:251:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  251 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:477:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  477 |             other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
      |                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:481:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  481 |         else if (other.m_untypedHolder.heap != nullptr)
      |                                        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:487:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  487 |                 other.m_untypedHolder.heap = nullptr;
      |                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:492:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  492 |                 m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:498:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  498 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:574:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  574 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:186:30: warning: function 'parseElement' is within a recursive call chain [misc-no-recursion]
  186 | void BasicJsonParser<ALLOC>::parseElement()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:186:30: note: example recursive call chain, starting from function 'parseElement'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:192:9: note: Frame #1: function 'parseElement' calls function 'parseArray' here:
  192 |         parseArray();
      |         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:260:9: note: Frame #2: function 'parseArray' calls function 'parseElements' here:
  260 |         parseElements();
      |         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:270:5: note: Frame #3: function 'parseElements' calls function 'parseElement' here:
  270 |     parseElement();
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:270:5: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:209:30: warning: function 'parseObject' is within a recursive call chain [misc-no-recursion]
  209 | void BasicJsonParser<ALLOC>::parseObject()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:224:30: warning: function 'parseMembers' is within a recursive call chain [misc-no-recursion]
  224 | void BasicJsonParser<ALLOC>::parseMembers()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:235:30: warning: function 'parseMember' is within a recursive call chain [misc-no-recursion]
  235 | void BasicJsonParser<ALLOC>::parseMember()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:253:30: warning: function 'parseArray' is within a recursive call chain [misc-no-recursion]
  253 | void BasicJsonParser<ALLOC>::parseArray()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:268:30: warning: function 'parseElements' is within a recursive call chain [misc-no-recursion]
  268 | void BasicJsonParser<ALLOC>::parseElements()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:113:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  113 |             m_storage(arr, N)
      |                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:251:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  251 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:477:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  477 |             other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
      |                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:481:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  481 |         else if (other.m_untypedHolder.heap != nullptr)
      |                                        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:487:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  487 |                 other.m_untypedHolder.heap = nullptr;
      |                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:492:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  492 |                 m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:498:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  498 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:574:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  574 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:186:30: warning: function 'parseElement' is within a recursive call chain [misc-no-recursion]
  186 | void BasicJsonParser<ALLOC>::parseElement()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:186:30: note: example recursive call chain, starting from function 'parseElement'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:192:9: note: Frame #1: function 'parseElement' calls function 'parseArray' here:
  192 |         parseArray();
      |         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:260:9: note: Frame #2: function 'parseArray' calls function 'parseElements' here:
  260 |         parseElements();
      |         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:270:5: note: Frame #3: function 'parseElements' calls function 'parseElement' here:
  270 |     parseElement();
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:270:5: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:209:30: warning: function 'parseObject' is within a recursive call chain [misc-no-recursion]
  209 | void BasicJsonParser<ALLOC>::parseObject()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:224:30: warning: function 'parseMembers' is within a recursive call chain [misc-no-recursion]
  224 | void BasicJsonParser<ALLOC>::parseMembers()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:235:30: warning: function 'parseMember' is within a recursive call chain [misc-no-recursion]
  235 | void BasicJsonParser<ALLOC>::parseMember()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:253:30: warning: function 'parseArray' is within a recursive call chain [misc-no-recursion]
  253 | void BasicJsonParser<ALLOC>::parseArray()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/JsonParser.h:268:30: warning: function 'parseElements' is within a recursive call chain [misc-no-recursion]
  268 | void BasicJsonParser<ALLOC>::parseElements()
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:223:5: warning: an exception may be thrown in function '~BasicOptional' which should not throw exceptions [bugprone-exception-escape]
  223 |     ~BasicOptional()
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:409:20: warning: an exception may be thrown in function 'has_value' which should not throw exceptions [bugprone-exception-escape]
  409 |     constexpr bool has_value() const noexcept
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:113:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  113 |             m_storage(arr, N)
      |                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/UniquePtr.h:55:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   55 |     UniquePtrDeleter(const ALLOC_T& allocator) :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  349 | BasicAny<ALLOC> makeAnyBitmaskValue(
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<std::nullptr_t, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<bool &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<bool &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<double &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<double &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<double &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<double &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<long &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<long &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:251:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  251 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:477:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  477 |             other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
      |                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:481:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  481 |         else if (other.m_untypedHolder.heap != nullptr)
      |                                        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:487:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  487 |                 other.m_untypedHolder.heap = nullptr;
      |                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:492:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  492 |                 m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:498:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  498 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:574:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  574 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:223:5: warning: an exception may be thrown in function '~BasicOptional' which should not throw exceptions [bugprone-exception-escape]
  223 |     ~BasicOptional()
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:409:20: warning: an exception may be thrown in function 'has_value' which should not throw exceptions [bugprone-exception-escape]
  409 |     constexpr bool has_value() const noexcept
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:516:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
  516 | class ReflectableDataAllocatorHolderBase : public ReflectableDataBase<ALLOC>, public AllocatorHolder<ALLOC>
      | ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1296:75: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1296 | typename ReflectableDataBase<ALLOC>::ConstPtr ReflectableDataBase<ALLOC>::getFromObject(
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1296:75: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1309:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1309 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1309:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1340:70: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1340 | typename ReflectableDataBase<ALLOC>::Ptr ReflectableDataBase<ALLOC>::getFromObject(
      |                                                                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1340:70: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1353:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1353 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1353:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:223:5: warning: an exception may be thrown in function '~BasicOptional' which should not throw exceptions [bugprone-exception-escape]
  223 |     ~BasicOptional()
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:362:5: warning: an exception may be thrown in function 'BasicOptional' which should not throw exceptions [bugprone-exception-escape]
  362 |     BasicOptional(BasicOptional&& other) :
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:362:5: warning: function 'BasicOptional' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:389:20: warning: an exception may be thrown in function 'operator=' which should not throw exceptions [bugprone-exception-escape]
  389 |     BasicOptional& operator=(BasicOptional&& other)
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:409:20: warning: an exception may be thrown in function 'has_value' which should not throw exceptions [bugprone-exception-escape]
  409 |     constexpr bool has_value() const noexcept
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:587:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  587 |             return static_cast<T>(std::forward<U>(def));
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:604:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  604 |             return static_cast<T>(std::forward<U>(def));
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:611:8: warning: function 'allocateValue<zserio::Recursive>' is within a recursive call chain [misc-no-recursion]
  611 |     T* allocateValue(ARGS&&... args)
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:658:10: warning: function 'move' is within a recursive call chain [misc-no-recursion]
  658 |     void move(BasicOptional&& other)
      |          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:815:46: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  815 |     return opt.has_value() && opt.value() == value;
      |                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:829:46: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  829 |     return opt.has_value() && opt.value() == value;
      |                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:955:46: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  955 |     return !opt.has_value() || opt.value() < value;
      |                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:969:31: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  969 |     return opt.has_value() && value < opt.value();
      |                               ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1027:45: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
 1027 |     return opt.has_value() && opt.value() > value;
      |                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1041:32: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
 1041 |     return !opt.has_value() || value > opt.value();
      |                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:59:11: note: 'std' namespace opened here
   59 | namespace std _GLIBCXX_VISIBILITY(default)
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/OptionalTest.cpp:75:8: warning: an exception may be thrown in function 'Recursive' which should not throw exceptions [bugprone-exception-escape]
   75 | struct Recursive
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/OptionalTest.cpp:75:8: warning: function 'Recursive' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/OptionalTest.cpp:289:26: warning: 'opt1' used after it was moved [bugprone-use-after-move]
  289 |             ASSERT_TRUE(!opt1.has_value());
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/OptionalTest.cpp:283:14: note: move occurred here
  283 |         opt2 = std::move(opt1);
      |              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/OptionalTest.cpp:297:25: warning: 'opt1' used after it was moved [bugprone-use-after-move]
  297 |             ASSERT_TRUE(opt1.has_value());
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/OptionalTest.cpp:283:14: note: move occurred here
  283 |         opt2 = std::move(opt1);
      |              ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/new_allocator.h:173:2: warning: function 'construct<zserio::Recursive, zserio::Recursive>' is within a recursive call chain [misc-no-recursion]
  173 |         construct(_Up* __p, _Args&&... __args)
      |         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/alloc_traits.h:511:2: note: example recursive call chain, starting from function 'construct<zserio::Recursive, zserio::Recursive>'
  511 |         construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
      |         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/alloc_traits.h:516:4: note: Frame #1: function 'construct<zserio::Recursive, zserio::Recursive>' calls function 'construct<zserio::Recursive, zserio::Recursive>' here:
  516 |           __a.construct(__p, std::forward<_Args>(__args)...);
      |           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/new_allocator.h:175:23: note: Frame #2: function 'construct<zserio::Recursive, zserio::Recursive>' calls function 'Recursive' here:
  175 |         { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/OptionalTest.cpp:75:8: note: Frame #3: function 'Recursive' calls function 'BasicOptional' here:
   75 | struct Recursive
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:365:9: note: Frame #4: function 'BasicOptional' calls function 'move' here:
  365 |         move(std::move(other));
      |         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:681:30: note: Frame #5: function 'move' calls function 'allocateValue<zserio::Recursive>' here:
  681 |                     T* ptr = allocateValue(std::move(value));
      |                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:619:13: note: Frame #6: function 'allocateValue<zserio::Recursive>' calls function 'construct<zserio::Recursive, zserio::Recursive>' here:
  619 |             MyAllocTraits::construct(typedAlloc, std::addressof(*ptr), std::forward<ARGS>(args)...);
      |             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:619:13: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:251:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  251 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:574:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  574 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Enums.h:97:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   97 |     return EnumTraits<T>::names[enumToOrdinal(value)];
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:516:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
  516 | class ReflectableDataAllocatorHolderBase : public ReflectableDataBase<ALLOC>, public AllocatorHolder<ALLOC>
      | ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1296:75: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1296 | typename ReflectableDataBase<ALLOC>::ConstPtr ReflectableDataBase<ALLOC>::getFromObject(
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1296:75: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1309:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1309 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1309:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1340:70: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1340 | typename ReflectableDataBase<ALLOC>::Ptr ReflectableDataBase<ALLOC>::getFromObject(
      |                                                                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1340:70: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1353:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1353 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1353:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:45:72: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
   45 | constexpr bool is_variant_heap_allocated_v = is_variant_heap_allocated<I, T...>::value;
      |                                                                        ^
      |                                                                        static_cast<>( )
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:255:5: warning: an exception may be thrown in function 'BasicVariant' which should not throw exceptions [bugprone-exception-escape]
  255 |     BasicVariant(BasicVariant&& other) :
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:282:19: warning: an exception may be thrown in function 'operator=' which should not throw exceptions [bugprone-exception-escape]
  282 |     BasicVariant& operator=(BasicVariant&& other)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:738:28: warning: 'other' used after it was moved [bugprone-use-after-move]
  738 |         (move<I>(std::move(other)), ...);
      |                            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:738:10: note: move occurred here
  738 |         (move<I>(std::move(other)), ...);
      |          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:907:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  907 | struct hash<zserio::BasicVariant<ALLOC, INDEX, T...>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:903:11: note: 'std' namespace opened here
  903 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:574:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  574 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:516:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
  516 | class ReflectableDataAllocatorHolderBase : public ReflectableDataBase<ALLOC>, public AllocatorHolder<ALLOC>
      | ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1296:75: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1296 | typename ReflectableDataBase<ALLOC>::ConstPtr ReflectableDataBase<ALLOC>::getFromObject(
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1296:75: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1309:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1309 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1309:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1340:70: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1340 | typename ReflectableDataBase<ALLOC>::Ptr ReflectableDataBase<ALLOC>::getFromObject(
      |                                                                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1340:70: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1353:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1353 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1353:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableUtil.h:161:23: warning: function 'equal<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  161 | bool ReflectableUtil::equal(
      |                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableUtil.h:161:23: note: example recursive call chain, starting from function 'equal<std::allocator<unsigned char>>'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableUtil.h:184:16: note: Frame #1: function 'equal<std::allocator<unsigned char>>' calls function 'arraysEqual<std::allocator<unsigned char>>' here:
  184 |         return arraysEqual<ALLOC>(lhs, rhs);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableUtil.h:207:14: note: Frame #2: function 'arraysEqual<std::allocator<unsigned char>>' calls function 'equal<std::allocator<unsigned char>>' here:
  207 |         if (!equal<ALLOC>(lhsArray->at(i), rhsArray->at(i)))
      |              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableUtil.h:207:14: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableUtil.h:197:23: warning: function 'arraysEqual<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  197 | bool ReflectableUtil::arraysEqual(const IBasicReflectableDataConstPtr<ALLOC>& lhsArray,
      |                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableUtil.h:217:23: warning: function 'compoundsEqual<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  217 | bool ReflectableUtil::compoundsEqual(const IBasicReflectableDataConstPtr<ALLOC>& lhsCompound,
      |                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:45:72: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
   45 | constexpr bool is_variant_heap_allocated_v = is_variant_heap_allocated<I, T...>::value;
      |                                                                        ^
      |                                                                        static_cast<>( )
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:255:5: warning: an exception may be thrown in function 'BasicVariant' which should not throw exceptions [bugprone-exception-escape]
  255 |     BasicVariant(BasicVariant&& other) :
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:282:19: warning: an exception may be thrown in function 'operator=' which should not throw exceptions [bugprone-exception-escape]
  282 |     BasicVariant& operator=(BasicVariant&& other)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:738:28: warning: 'other' used after it was moved [bugprone-use-after-move]
  738 |         (move<I>(std::move(other)), ...);
      |                            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:738:10: note: move occurred here
  738 |         (move<I>(std::move(other)), ...);
      |          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:907:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  907 | struct hash<zserio::BasicVariant<ALLOC, INDEX, T...>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:903:11: note: 'std' namespace opened here
  903 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:113:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  113 |             m_storage(arr, N)
      |                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/SpanTest.cpp:34:43: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
   34 |     Span<int> span(vec.data(), vec.data() + vec.size());
      |                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/SpanTest.cpp:38:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
   38 |     Span<int, 4> spanStatic(vec.data(), vec.data() + vec.size());
      |                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/SpanTest.cpp:45:5: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
   45 |     int arr[] = {0, 13, 42};
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/SqliteConnectionTest.cpp:321:36: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  321 |     const std::string resultString(reinterpret_cast<const char*>(sqlite3_column_text(statement, 0)));
      |                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Extended.h:242:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  242 | struct hash<zserio::Extended<T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Extended.h:238:11: note: 'std' namespace opened here
  238 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:907:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  907 | struct hash<zserio::BasicVariant<ALLOC, INDEX, T...>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:903:11: note: 'std' namespace opened here
  903 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/UniquePtr.h:55:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   55 |     UniquePtrDeleter(const ALLOC_T& allocator) :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/TrackingAllocator.h:86:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   86 |     TrackingAllocatorImpl(const TrackingAllocatorImpl<Other>& other) :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ValidationSqliteUtil.h:99:38: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
   99 |             const char* columnName = reinterpret_cast<const char*>(sqlite3_column_text(statement.get(), 1));
      |                                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ValidationSqliteUtil.h:100:38: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  100 |             const char* columnType = reinterpret_cast<const char*>(sqlite3_column_text(statement.get(), 2));
      |                                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:45:72: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
   45 | constexpr bool is_variant_heap_allocated_v = is_variant_heap_allocated<I, T...>::value;
      |                                                                        ^
      |                                                                        static_cast<>( )
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:79:28: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
   79 | constexpr in_place_index_t<I> in_place_index{};
      |                            ^
      |                            static_cast<>( )
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:255:5: warning: an exception may be thrown in function 'BasicVariant' which should not throw exceptions [bugprone-exception-escape]
  255 |     BasicVariant(BasicVariant&& other) :
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:282:19: warning: an exception may be thrown in function 'operator=' which should not throw exceptions [bugprone-exception-escape]
  282 |     BasicVariant& operator=(BasicVariant&& other)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:738:28: warning: 'other' used after it was moved [bugprone-use-after-move]
  738 |         (move<I>(std::move(other)), ...);
      |                            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:738:10: note: move occurred here
  738 |         (move<I>(std::move(other)), ...);
      |          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:907:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  907 | struct hash<zserio::BasicVariant<ALLOC, INDEX, T...>>
      |        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/variant:59:11: note: 'std' namespace opened here
   59 | namespace std _GLIBCXX_VISIBILITY(default)
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:13:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
   13 | struct overloaded : Ts...
      | ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:32:8: warning: class 'ThrowingMove' defines a move constructor but does not define a destructor, a copy constructor, a copy assignment operator or a move assignment operator [cppcoreguidelines-special-member-functions]
   32 | struct ThrowingMove
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:35:5: warning: an exception may be thrown in function 'ThrowingMove' which should not throw exceptions [bugprone-exception-escape]
   35 |     ThrowingMove(ThrowingMove&&)
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:170:21: warning: 'var1' used after it was moved [bugprone-use-after-move]
  170 |         ASSERT_TRUE(var1.valueless_by_exception());
      |                     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:165:47: note: move occurred here
  165 |         typename TestFixture::Variant1 var2 = std::move(var1);
      |                                               ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:178:21: warning: 'var2' used after it was moved [bugprone-use-after-move]
  178 |         ASSERT_TRUE(var2.valueless_by_exception());
      |                     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:173:40: note: move occurred here
  173 |         typename TestFixture::Variant1 var3(std::move(var2), this->allocator);
      |                                        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:211:21: warning: 'var1' used after it was moved [bugprone-use-after-move]
  211 |         ASSERT_TRUE(var1.valueless_by_exception());
      |                     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:206:14: note: move occurred here
  206 |         var2 = std::move(var1);
      |              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:237:25: warning: 'var1' used after it was moved [bugprone-use-after-move]
  237 |             ASSERT_TRUE(var1.valueless_by_exception());
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:226:14: note: move occurred here
  226 |         var2 = std::move(var1);
      |              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:243:45: warning: 'var1' used after it was moved [bugprone-use-after-move]
  243 |             ASSERT_EQ(TestFixture::Idx1::D, var1.index());
      |                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/VariantTest.cpp:226:14: note: move occurred here
  226 |         var2 = std::move(var1);
      |              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:223:5: warning: an exception may be thrown in function '~BasicOptional' which should not throw exceptions [bugprone-exception-escape]
  223 |     ~BasicOptional()
      |     ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:409:20: warning: an exception may be thrown in function 'has_value' which should not throw exceptions [bugprone-exception-escape]
  409 |     constexpr bool has_value() const noexcept
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:516:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
  516 | class ReflectableDataAllocatorHolderBase : public ReflectableDataBase<ALLOC>, public AllocatorHolder<ALLOC>
      | ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1296:75: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1296 | typename ReflectableDataBase<ALLOC>::ConstPtr ReflectableDataBase<ALLOC>::getFromObject(
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1296:75: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1309:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1309 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1309:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1340:70: warning: function 'getFromObject' is within a recursive call chain [misc-no-recursion]
 1340 | typename ReflectableDataBase<ALLOC>::Ptr ReflectableDataBase<ALLOC>::getFromObject(
      |                                                                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1340:70: note: example recursive call chain, starting from function 'getFromObject'
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1353:48: note: Frame #1: function 'getFromObject' calls function 'getFromObject' here:
 1353 |             return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ReflectableData.h:1353:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:45:72: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
   45 | constexpr bool is_variant_heap_allocated_v = is_variant_heap_allocated<I, T...>::value;
      |                                                                        ^
      |                                                                        static_cast<>( )
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:907:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  907 | struct hash<zserio::BasicVariant<ALLOC, INDEX, T...>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Variant.h:903:11: note: 'std' namespace opened here
  903 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:485:26: warning: function 'walkFields' is within a recursive call chain [misc-no-recursion]
  485 | void BasicWalker<ALLOC>::walkFields(
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:544:26: note: example recursive call chain, starting from function 'walkFieldValue'
  544 | bool BasicWalker<ALLOC>::walkFieldValue(const IBasicReflectableDataConstPtr<ALLOC>& reflectable,
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:553:13: note: Frame #1: function 'walkFieldValue' calls function 'walkFields' here:
  553 |             walkFields(reflectable, typeInfo);
      |             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:500:17: note: Frame #2: function 'walkFields' calls function 'walkField' here:
  500 |                 walkField(compound->getField(compoundChoice), *fieldsIt);
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:528:22: note: Frame #3: function 'walkField' calls function 'walkFieldValue' here:
  528 |                 if (!walkFieldValue(reflectable->at(i), fieldInfo, i))
      |                      ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:528:22: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:518:26: warning: function 'walkField' is within a recursive call chain [misc-no-recursion]
  518 | bool BasicWalker<ALLOC>::walkField(
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Walker.h:544:26: warning: function 'walkFieldValue' is within a recursive call chain [misc-no-recursion]
  544 | bool BasicWalker<ALLOC>::walkFieldValue(const IBasicReflectableDataConstPtr<ALLOC>& reflectable,
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:251:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  251 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:266:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  266 |         m_untypedHolder.heap = nullptr;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:477:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  477 |             other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
      |                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:481:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  481 |         else if (other.m_untypedHolder.heap != nullptr)
      |                                        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:486:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  486 |                 m_untypedHolder.heap = other.m_untypedHolder.heap;
      |                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:487:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  487 |                 other.m_untypedHolder.heap = nullptr;
      |                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:492:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  492 |                 m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:498:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  498 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:508:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  508 |             m_untypedHolder.heap = nullptr;
      |                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:514:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  514 |         return (m_isInPlace || m_untypedHolder.heap != nullptr);
      |                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:537:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  537 |                 detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:546:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  546 |         m_untypedHolder.heap = holder;
      |                         ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:568:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  568 |         return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
      |                                                                           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:580:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  580 |         return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:586:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  586 |         return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:616:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  616 |                 ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:617:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  617 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:623:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  623 |                 ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Any.h:624:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  624 |                 : m_untypedHolder.heap;
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:608:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  608 | struct hash<zserio::BasicBitBuffer<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:620:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  620 | struct hash<zserio::BasicBitBufferView<ALLOC>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/BitBuffer.h:601:11: note: 'std' namespace opened here
  601 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/CppRuntimeException.h:193:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  193 |     exception << value;
      |                  ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Enums.h:97:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   97 |     return EnumTraits<T>::names[enumToOrdinal(value)];
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:125:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr BasicOptional(std::nullopt_t, const ALLOC& allocator = {}) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:135:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  135 |     constexpr BasicOptional(const T& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:145:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  145 |     constexpr BasicOptional(T&& value, const ALLOC& allocator = {}) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:246:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  246 |     constexpr BasicOptional(const BasicOptional<ALLOC, U>& other) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1186:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
 1186 | struct hash<zserio::BasicOptional<ALLOC, T>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Optional.h:1182:11: note: 'std' namespace opened here
 1182 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  112 |     constexpr Span(element_type (&arr)[N]) noexcept :
      |                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  123 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  125 |     constexpr Span(std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                       ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  136 |                             std::is_convertible<const U (*)[], T (*)[]>::value,
      |                                                                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  138 |     constexpr Span(const std::array<U, N>& arr) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  148 |             typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  150 |     constexpr Span(std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  161 |                     (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
      |                                                                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  163 |     constexpr Span(const std::vector<U, ALLOC>& vec) :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
  174 |                             std::is_convertible<U (*)[], T (*)[]>::value,
      |                                                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  176 |     constexpr Span(const Span<U, N>& span) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   43 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   44 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   49 |         *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   54 |         *(--bufferEnd) = DIGITS_100_10[index + 1];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   55 |         *(--bufferEnd) = DIGITS_100_10[index];
      |                          ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:60:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   60 |     constexpr NumericTypeWrapper(ValueType value) noexcept :
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/Types.h:67:15: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   67 |     constexpr operator ValueType() const noexcept
      |               ^
      |               explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:167:5: warning: 'operator type-parameter-0-0' must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  167 |     operator VALUE_TYPE() const
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:257:8: warning: modification of 'std' namespace can result in undefined behavior [cert-dcl58-cpp]
  257 | struct hash<zserio::View<zserio::detail::DynIntWrapper<VALUE_TYPE>>>
      |        ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/View.h:253:11: note: 'std' namespace opened here
  253 | namespace std
      |           ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<bool &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<bool &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<double &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<double &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<double &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<float, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<float &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<float &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<float, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<float, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<float &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<int, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<int &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<int &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<int, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<int, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<int &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<long long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<long long &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<long long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<long long, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<long long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<long long &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<long &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<long &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<std::vector<unsigned char>, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<std::vector<unsigned char> &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<std::vector<unsigned char> &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<std::vector<unsigned char>, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<std::vector<unsigned char>, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<std::vector<unsigned char> &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<test_object::std_allocator::CreatorBitmask, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<test_object::std_allocator::CreatorBitmask &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<test_object::std_allocator::CreatorBitmask &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<test_object::std_allocator::CreatorBitmask, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<test_object::std_allocator::CreatorBitmask, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<test_object::std_allocator::CreatorBitmask &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<unsigned long long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long long &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<unsigned long long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long long, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long long &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:220:17: warning: function 'makeAnyEnumValue<zserio::BasicBitBuffer<>, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  220 | BasicAny<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<zserio::BasicBitBuffer<> &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:16: note: Frame #1: function 'makeAnyValue<zserio::BasicBitBuffer<> &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<zserio::BasicBitBuffer<>, std::allocator<unsigned char>, 0>' here:
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: Frame #2: function 'makeAnyEnumValue<zserio::BasicBitBuffer<>, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<zserio::BasicBitBuffer<> &, std::allocator<unsigned char>>' here:
  222 |     return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:222:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  349 | BasicAny<ALLOC> makeAnyBitmaskValue(
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<float, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<int, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<long long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<std::vector<unsigned char>, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorEnum, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<test_object::std_allocator::CreatorEnum &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:387:16: note: Frame #1: function 'makeAnyValue<test_object::std_allocator::CreatorEnum &, std::allocator<unsigned char>>' calls function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorEnum, std::allocator<unsigned char>, 0>' here:
  387 |         return makeAnyBitmaskValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:352:12: note: Frame #2: function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorEnum, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<test_object::std_allocator::CreatorEnum &, std::allocator<unsigned char>>' here:
  352 |     return makeAnyValue(typeInfo.getUnderlyingType(), bitmaskRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:352:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorUnsignedEnum, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  349 | BasicAny<ALLOC> makeAnyBitmaskValue(
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: note: example recursive call chain, starting from function 'makeAnyValue<test_object::std_allocator::CreatorUnsignedEnum &, std::allocator<unsigned char>>'
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:387:16: note: Frame #1: function 'makeAnyValue<test_object::std_allocator::CreatorUnsignedEnum &, std::allocator<unsigned char>>' calls function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorUnsignedEnum, std::allocator<unsigned char>, 0>' here:
  387 |         return makeAnyBitmaskValue(std::forward<T>(value), typeInfo, allocator);
      |                ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:352:12: note: Frame #2: function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorUnsignedEnum, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<test_object::std_allocator::CreatorUnsignedEnum &, std::allocator<unsigned char>>' here:
  352 |     return makeAnyValue(typeInfo.getUnderlyingType(), bitmaskRawValue, allocator);
      |            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:352:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<unsigned long long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
  349 | BasicAny<ALLOC> makeAnyBitmaskValue(
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:349:17: warning: function 'makeAnyBitmaskValue<zserio::BasicBitBuffer<>, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
  356 | BasicAny<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
      |                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<double &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<float &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<int &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<long long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<std::vector<unsigned char> &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<test_object::std_allocator::CreatorBitmask &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<test_object::std_allocator::CreatorEnum &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<test_object::std_allocator::CreatorUnsignedEnum &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<unsigned long long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:356:17: warning: function 'makeAnyValue<zserio::BasicBitBuffer<> &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:363:46: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  363 |         return makeAnyIntegralValue<uint8_t>(std::forward<T>(value), allocator);
      |                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:365:47: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  365 |         return makeAnyIntegralValue<uint16_t>(std::forward<T>(value), allocator);
      |                                               ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:367:47: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  367 |         return makeAnyIntegralValue<uint32_t>(std::forward<T>(value), allocator);
      |                                               ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:369:47: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  369 |         return makeAnyIntegralValue<uint64_t>(std::forward<T>(value), allocator);
      |                                               ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:371:45: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  371 |         return makeAnyIntegralValue<int8_t>(std::forward<T>(value), allocator);
      |                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:373:46: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  373 |         return makeAnyIntegralValue<int16_t>(std::forward<T>(value), allocator);
      |                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:375:46: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  375 |         return makeAnyIntegralValue<int32_t>(std::forward<T>(value), allocator);
      |                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:377:46: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  377 |         return makeAnyIntegralValue<int64_t>(std::forward<T>(value), allocator);
      |                                              ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:379:44: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  379 |         return makeAnyFloatingValue<float>(std::forward<T>(value), allocator);
      |                                            ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:381:45: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  381 |         return makeAnyFloatingValue<double>(std::forward<T>(value), allocator);
      |                                             ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:383:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  383 |         return makeAnyStringValue(std::forward<T>(value), allocator);
      |                                   ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:385:33: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  385 |         return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
      |                                 ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ZserioTreeCreator.h:387:36: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  387 |         return makeAnyBitmaskValue(std::forward<T>(value), typeInfo, allocator);
      |                                    ^
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ppmr/PropagatingPolymorphicAllocator.h:35:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   35 |     PropagatingPolymorphicAllocator(
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/../src/zserio/ppmr/PropagatingPolymorphicAllocator.h:62:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
   62 |     PropagatingPolymorphicAllocator(const PropagatingPolymorphicAllocator<U>& other) noexcept :
      |     ^
      |     explicit 
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/ppmr/PropagatingPolymorphicAllocatorTest.cpp:56:64: warning: std::move of the variable 'allocator2' of the trivially-copyable type 'std::pmr::polymorphic_allocator<std::byte>' has no effect; remove std::move() [performance-move-const-arg]
   56 |     std::pmr::polymorphic_allocator<std::byte> allocator2Moved(std::move(allocator2));
      |                                                                ^~~~~~~~~~          ~
/home/mrozloznik/Projects/ZserioCpp17/runtime/test/zserio/ppmr/PropagatingPolymorphicAllocatorTest.cpp:73:70: warning: std::move of the variable 'allocator2' of the trivially-copyable type 'ppmr::PropagatingPolymorphicAllocator<std::byte>' has no effect; remove std::move() [performance-move-const-arg]
   73 |     ppmr::PropagatingPolymorphicAllocator<std::byte> allocator2Moved(std::move(allocator2));
      |                                                                      ^~~~~~~~~~          ~
