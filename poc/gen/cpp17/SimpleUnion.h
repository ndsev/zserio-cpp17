/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.14.1.
 * Generator setup: stdAllocator.
 */

#ifndef SIMPLE_UNION_H
#define SIMPLE_UNION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP17_EXTENSION_RUNTIME_VERSION_NUMBER != 1000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 0.1.0.
#endif

#include <memory>

#include <zserio/ChoiceTag.h>
#include <zserio/Variant.h>
#include <zserio/View.h>
#include <zserio/String.h>
#include <zserio/Types.h>

// forward declaration
struct SimpleUnion;

namespace zserio
{
namespace detail
{

template <>
struct ChoiceTag<SimpleUnion>
{
    enum Tag : size_t
    {
        UNDEFINED_CHOICE,
        CHOICE_valueA,
        CHOICE_valueB
    };
};

} // namespace detail
} // namespace zserio

struct SimpleUnion : ::zserio::Variant<::zserio::detail::ChoiceTag<SimpleUnion>::Tag,
        ::std::monostate,
        ::zserio::String,
        ::zserio::Int8>
{
    using ChoiceTag = ::zserio::detail::ChoiceTag<SimpleUnion>::Tag;
    using Base = ::zserio::Variant<ChoiceTag,
            ::std::monostate,
            ::zserio::String,
            ::zserio::Int8>;
    using Base::BasicVariant;
};

bool operator==(const SimpleUnion& lhs, const SimpleUnion& rhs);
bool operator<(const SimpleUnion& lhs, const SimpleUnion& rhs);
bool operator!=(const SimpleUnion& lhs, const SimpleUnion& rhs);
bool operator>(const SimpleUnion& lhs, const SimpleUnion& rhs);
bool operator<=(const SimpleUnion& lhs, const SimpleUnion& rhs);
bool operator>=(const SimpleUnion& lhs, const SimpleUnion& rhs);

namespace zserio
{

template <>
class View<SimpleUnion>
{
public:
    explicit View(const SimpleUnion& data) noexcept;

    SimpleUnion::ChoiceTag zserioChoiceTag() const;

    ::std::string_view valueA() const;
    ::zserio::Int8 valueB() const;

private:
    const SimpleUnion& m_data;
};

bool operator==(const View<SimpleUnion>& lhs, const View<SimpleUnion>& rhs);
bool operator<(const View<SimpleUnion>& lhs, const View<SimpleUnion>& rhs);
bool operator!=(const View<SimpleUnion>& lhs, const View<SimpleUnion>& rhs);
bool operator>(const View<SimpleUnion>& lhs, const View<SimpleUnion>& rhs);
bool operator<=(const View<SimpleUnion>& lhs, const View<SimpleUnion>& rhs);
bool operator>=(const View<SimpleUnion>& lhs, const View<SimpleUnion>& rhs);

namespace detail
{

template <>
void validate(const View<SimpleUnion>& view);

template <>
BitSize bitSizeOf(const View<SimpleUnion>& view, BitSize bitPosition);

template <>
void write(BitStreamWriter& writer, const View<SimpleUnion>& view);

template <>
View<SimpleUnion> read(BitStreamReader& reader, SimpleUnion& data);

} // namespace zserio
} // namespace detail

namespace std
{

template <>
struct hash<SimpleUnion>
{
    size_t operator()(const SimpleUnion& value) const;
};

template <>
struct hash<::zserio::View<SimpleUnion>>
{
    size_t operator()(const ::zserio::View<SimpleUnion>& view) const;
};

} // namespace std

#endif // SIMPLE_UNION_H
