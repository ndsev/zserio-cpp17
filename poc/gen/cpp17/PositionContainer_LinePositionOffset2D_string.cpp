/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.14.1.
 * Generator setup: stdAllocator.
 */

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/HashCodeUtil.h>

#include <PositionContainer_LinePositionOffset2D_string.h>

PositionContainer_LinePositionOffset2D_string::PositionContainer_LinePositionOffset2D_string() noexcept :
        PositionContainer_LinePositionOffset2D_string(AllocatorType{})
{}

PositionContainer_LinePositionOffset2D_string::PositionContainer_LinePositionOffset2D_string(const AllocatorType& allocator) noexcept :
        numElements(),
        array(allocator),
        field(allocator)
{}

PositionContainer_LinePositionOffset2D_string::PositionContainer_LinePositionOffset2D_string(
        ::zserio::VarSize numElements_,
        ::zserio::Vector<LinePositionOffset2D> array_,
        ::zserio::String field_) noexcept :
        numElements(numElements_),
        array(::std::move(array_)),
        field(::std::move(field_))
{}

bool operator==(const PositionContainer_LinePositionOffset2D_string& lhs, const PositionContainer_LinePositionOffset2D_string& rhs)
{
    return ::std::tie(
            lhs.numElements,
            lhs.array,
            lhs.field)
            == std::tie(
            rhs.numElements,
            rhs.array,
            rhs.field);
}

bool operator<(const PositionContainer_LinePositionOffset2D_string& lhs, const PositionContainer_LinePositionOffset2D_string& rhs)
{
    return ::std::tie(
            lhs.numElements,
            lhs.array,
            lhs.field)
            < std::tie(
            rhs.numElements,
            rhs.array,
            rhs.field);
}

bool operator!=(const PositionContainer_LinePositionOffset2D_string& lhs, const PositionContainer_LinePositionOffset2D_string& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const PositionContainer_LinePositionOffset2D_string& lhs, const PositionContainer_LinePositionOffset2D_string& rhs)
{
    return rhs < lhs;
}

bool operator<=(const PositionContainer_LinePositionOffset2D_string& lhs, const PositionContainer_LinePositionOffset2D_string& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const PositionContainer_LinePositionOffset2D_string& lhs, const PositionContainer_LinePositionOffset2D_string& rhs)
{
    return !(lhs < rhs);
}

namespace zserio
{

View<PositionContainer_LinePositionOffset2D_string>::View(const PositionContainer_LinePositionOffset2D_string& data,
        CoordShift shift_) noexcept :
        m_data(data),
        m_shift_(shift_)
{}

CoordShift View<PositionContainer_LinePositionOffset2D_string>::shift() const
{
    return m_shift_;
}

::zserio::VarSize View<PositionContainer_LinePositionOffset2D_string>::numElements() const
{
    return m_data.numElements;
}

Array<::zserio::Vector<LinePositionOffset2D>, ArrayType::NORMAL, View<PositionContainer_LinePositionOffset2D_string>::ZserioArrayArrayTraits> View<PositionContainer_LinePositionOffset2D_string>::array() const
{
    return Array<::zserio::Vector<LinePositionOffset2D>, ArrayType::NORMAL, ZserioArrayArrayTraits>{m_data.array, *this};
}

::std::string_view View<PositionContainer_LinePositionOffset2D_string>::field() const
{
    return ::std::string_view{m_data.field};
}

bool operator==(const View<PositionContainer_LinePositionOffset2D_string>& lhs, const View<PositionContainer_LinePositionOffset2D_string>& rhs)
{
    return lhs.shift() == rhs.shift() &&
            lhs.numElements() == rhs.numElements() &&
            lhs.array() == rhs.array() &&
            lhs.field() == rhs.field();
}

bool operator<(const View<PositionContainer_LinePositionOffset2D_string>& lhs, const View<PositionContainer_LinePositionOffset2D_string>& rhs)
{
    if (lhs.shift() != rhs.shift())
    {
        return lhs.shift() < rhs.shift();
    }
    if (lhs.numElements() != rhs.numElements())
    {
        return lhs.numElements() < rhs.numElements();
    }
    if (lhs.array() != rhs.array())
    {
        return lhs.array() < rhs.array();
    }
    if (lhs.field() != rhs.field())
    {
        return lhs.field() < rhs.field();
    }

    return false;
}

bool operator!=(const View<PositionContainer_LinePositionOffset2D_string>& lhs, const View<PositionContainer_LinePositionOffset2D_string>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<PositionContainer_LinePositionOffset2D_string>& lhs, const View<PositionContainer_LinePositionOffset2D_string>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<PositionContainer_LinePositionOffset2D_string>& lhs, const View<PositionContainer_LinePositionOffset2D_string>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<PositionContainer_LinePositionOffset2D_string>& lhs, const View<PositionContainer_LinePositionOffset2D_string>& rhs)
{
    return !(lhs < rhs);
}

namespace detail
{

template <>
void validate(const View<PositionContainer_LinePositionOffset2D_string>& view)
{
    // check range
    validate(view.numElements(), "'PositionContainer_LinePositionOffset2D_string.numElements'");
    // check array length
    validate(view.array(), static_cast<size_t>(view.numElements()),
            "'PositionContainer_LinePositionOffset2D_string.array'");
}

template <>
BitSize bitSizeOf(const View<PositionContainer_LinePositionOffset2D_string>& view, BitSize bitPosition)
{
    BitSize endBitPosition = bitPosition;

    endBitPosition += detail::bitSizeOf(view.numElements(), endBitPosition);
    endBitPosition += detail::bitSizeOf(view.array(), endBitPosition);
    endBitPosition += detail::bitSizeOf(view.field(), endBitPosition);

    return endBitPosition - bitPosition;
}

template <>
void write(BitStreamWriter& writer, const View<PositionContainer_LinePositionOffset2D_string>& view)
{
    detail::write(writer, view.numElements());
    detail::write(writer, view.array());
    detail::write(writer, view.field());
}

template <>
View<PositionContainer_LinePositionOffset2D_string> read(BitStreamReader& reader, PositionContainer_LinePositionOffset2D_string& data,
        CoordShift shift_)
{
    View<PositionContainer_LinePositionOffset2D_string> view(data,
            shift_);
    detail::read(reader, data.numElements);
    (void)detail::read<Array<::zserio::Vector<LinePositionOffset2D>, ArrayType::NORMAL, View<PositionContainer_LinePositionOffset2D_string>::ZserioArrayArrayTraits>>(reader, data.array, view, view.numElements());
    detail::read(reader, data.field);
    return view;
}

template <>
void initContext(PackingContext<PositionContainer_LinePositionOffset2D_string>& packingContext, const View<PositionContainer_LinePositionOffset2D_string>& view)
{
    initContext(packingContext.numElements, view.numElements());
}

template <>
BitSize bitSizeOf(PackingContext<PositionContainer_LinePositionOffset2D_string>& packingContext, const View<PositionContainer_LinePositionOffset2D_string>& view, BitSize bitPosition)
{
    BitSize endBitPosition = bitPosition;

    endBitPosition += detail::bitSizeOf(packingContext.numElements, view.numElements(), endBitPosition);
    endBitPosition += detail::bitSizeOf(view.array(), endBitPosition);
    endBitPosition += detail::bitSizeOf(view.field(), endBitPosition);

    return endBitPosition - bitPosition;
}

template <>
void write(PackingContext<PositionContainer_LinePositionOffset2D_string>& packingContext, BitStreamWriter& writer, const View<PositionContainer_LinePositionOffset2D_string>& view)
{
    detail::write(packingContext.numElements, writer, view.numElements());
    detail::write(writer, view.array());
    detail::write(writer, view.field());
}

template <>
void read(PackingContext<PositionContainer_LinePositionOffset2D_string>& packingContext, BitStreamReader& reader, PositionContainer_LinePositionOffset2D_string& data,
        CoordShift shift_)
{
    View<PositionContainer_LinePositionOffset2D_string> view(data,
            shift_);
    detail::read(packingContext.numElements, reader, data.numElements);
    (void)detail::read<Array<::zserio::Vector<LinePositionOffset2D>, ArrayType::NORMAL, View<PositionContainer_LinePositionOffset2D_string>::ZserioArrayArrayTraits>>(reader, data.array, view, view.numElements());
    detail::read(reader, data.field);
    (void)view;
}

} // namespace detail

} // namespace zserio

namespace std
{

size_t hash<PositionContainer_LinePositionOffset2D_string>::operator()(const PositionContainer_LinePositionOffset2D_string& data) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, data.numElements);
    result = ::zserio::calcHashCode(result, data.array);
    result = ::zserio::calcHashCode(result, data.field);
    return static_cast<size_t>(result);
}

size_t hash<::zserio::View<PositionContainer_LinePositionOffset2D_string>>::operator()(const ::zserio::View<PositionContainer_LinePositionOffset2D_string>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, view.numElements());
    result = ::zserio::calcHashCode(result, view.array());
    result = ::zserio::calcHashCode(result, view.field());
    return static_cast<size_t>(result);
}

} // namespace std
