/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.14.1.
 * Generator setup: stdAllocator.
 */

#ifndef BOOL_PARAM_CHOICE_H
#define BOOL_PARAM_CHOICE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP17_EXTENSION_RUNTIME_VERSION_NUMBER != 1000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 0.1.0.
#endif

#include <memory>

#include <zserio/ChoiceTag.h>
#include <zserio/Variant.h>
#include <zserio/View.h>
#include <zserio/Types.h>

// forward declaration
struct BoolParamChoice;

namespace zserio
{
namespace detail
{

template <>
struct ChoiceTag<BoolParamChoice>
{
    enum Tag : size_t
    {
        UNDEFINED_CHOICE,
        CHOICE_valueA,
        CHOICE_valueB
    };
};

} // namespace detail
} // namespace zserio

struct BoolParamChoice : ::zserio::Variant<::zserio::detail::ChoiceTag<BoolParamChoice>::Tag,
        ::std::monostate,
        ::zserio::Int8,
        ::zserio::Int16>
{
    using ChoiceTag = ::zserio::detail::ChoiceTag<BoolParamChoice>::Tag;
    using Base = ::zserio::Variant<ChoiceTag,
            ::std::monostate,
            ::zserio::Int8,
            ::zserio::Int16>;
    using Base::BasicVariant;
};

bool operator==(const BoolParamChoice& lhs, const BoolParamChoice& rhs);
bool operator<(const BoolParamChoice& lhs, const BoolParamChoice& rhs);
bool operator!=(const BoolParamChoice& lhs, const BoolParamChoice& rhs);
bool operator>(const BoolParamChoice& lhs, const BoolParamChoice& rhs);
bool operator<=(const BoolParamChoice& lhs, const BoolParamChoice& rhs);
bool operator>=(const BoolParamChoice& lhs, const BoolParamChoice& rhs);

namespace zserio
{

template <>
class View<BoolParamChoice>
{
public:
    explicit View(const BoolParamChoice& data,
            ::zserio::Bool tag_) noexcept;

    ::zserio::Bool tag() const;

    BoolParamChoice::ChoiceTag zserioChoiceTag() const;

    ::zserio::Int8 valueA() const;
    ::zserio::Int16 valueB() const;

private:
    const BoolParamChoice& m_data;
    ::zserio::Bool m_tag_;
};

bool operator==(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs);
bool operator<(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs);
bool operator!=(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs);
bool operator>(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs);
bool operator<=(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs);
bool operator>=(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs);

namespace detail
{

template <>
void validate(const View<BoolParamChoice>& view);

template <>
BitSize bitSizeOf(const View<BoolParamChoice>& view, BitSize bitPosition);

template <>
void write(BitStreamWriter& writer, const View<BoolParamChoice>& view);

template <>
View<BoolParamChoice> read(BitStreamReader& reader, BoolParamChoice& data,
        ::zserio::Bool tag_);

} // namespace zserio
} // namespace detail

namespace std
{

template <>
struct hash<BoolParamChoice>
{
    size_t operator()(const BoolParamChoice& value) const;
};

template <>
struct hash<::zserio::View<BoolParamChoice>>
{
    size_t operator()(const ::zserio::View<BoolParamChoice>& view) const;
};

} // namespace std

#endif // BOOL_PARAM_CHOICE_H
