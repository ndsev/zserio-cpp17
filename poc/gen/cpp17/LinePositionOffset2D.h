/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.14.1.
 * Generator setup: stdAllocator.
 */

#ifndef LINE_POSITION_OFFSET2_D_H
#define LINE_POSITION_OFFSET2_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP17_EXTENSION_RUNTIME_VERSION_NUMBER != 1000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 0.1.0.
#endif

#include <memory>
#include <zserio/DeltaContext.h>
#include <zserio/View.h>

#include <CoordShift.h>
#include <CoordWidth.h>
#include <LinePosition.h>
#include <PositionOffset2D.h>

struct LinePositionOffset2D
{
    using AllocatorType = ::std::allocator<uint8_t>;

    LinePositionOffset2D() noexcept;
    explicit LinePositionOffset2D(const AllocatorType& allocator) noexcept;

    explicit LinePositionOffset2D(
        LinePosition linePosition_,
        CoordWidth numBits_,
        PositionOffset2D offset_) noexcept;

    LinePosition linePosition;
    CoordWidth numBits;
    PositionOffset2D offset;
};

bool operator==(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator<(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator!=(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator>(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator<=(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator>=(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);

namespace zserio
{

template <>
class View<LinePositionOffset2D>
{
public:
    explicit View(const LinePositionOffset2D& data,
            CoordShift shift_) noexcept;

    CoordShift shift() const;

    LinePosition linePosition() const;
    CoordWidth numBits() const;
    View<PositionOffset2D> offset() const;

private:
    const LinePositionOffset2D& m_data;
    CoordShift m_shift_;
};

bool operator==(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator<(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator!=(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator>(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator<=(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator>=(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);

namespace detail
{

template <>
void validate(const View<LinePositionOffset2D>& view);

template <>
BitSize bitSizeOf(const View<LinePositionOffset2D>& view, BitSize bitPosition);

template <>
void write(BitStreamWriter& writer, const View<LinePositionOffset2D>& view);

template <>
View<LinePositionOffset2D> read(BitStreamReader& reader, LinePositionOffset2D& data,
        CoordShift shift_);

template <>
struct PackingContext<LinePositionOffset2D>
{
    DeltaContext linePosition;
    DeltaContext numBits;
    PackingContext<PositionOffset2D> offset;
};

template <>
void initContext(PackingContext<LinePositionOffset2D>& packingContext, const View<LinePositionOffset2D>& view);

template <>
BitSize bitSizeOf(PackingContext<LinePositionOffset2D>& packingContext, const View<LinePositionOffset2D>& view,
        BitSize bitPosition);

template <>
void write(PackingContext<LinePositionOffset2D>& packingContext, BitStreamWriter& writer, const View<LinePositionOffset2D>& view);

template <>
void read(PackingContext<LinePositionOffset2D>& packingContext, BitStreamReader& reader, LinePositionOffset2D& data,
        CoordShift shift_);

} // namespace detail

} // namespace zserio

namespace std
{

template <>
struct hash<LinePositionOffset2D>
{
    size_t operator()(const LinePositionOffset2D& data) const;
};

template <>
struct hash<::zserio::View<LinePositionOffset2D>>
{
    size_t operator()(const ::zserio::View<LinePositionOffset2D>& view) const;
};

} // namespace std

#endif // LINE_POSITION_OFFSET2_D_H
