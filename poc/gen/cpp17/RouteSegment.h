/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.14.1.
 * Generator setup: stdAllocator.
 */

#ifndef ROUTE_SEGMENT_H
#define ROUTE_SEGMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP17_EXTENSION_RUNTIME_VERSION_NUMBER != 1000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 0.1.0.
#endif

#include <memory>
#include <zserio/Optional.h>
#include <zserio/View.h>
#include <zserio/Array.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <BoolParamChoice.h>
#include <CoordShift.h>
#include <LinePositionOffset2D.h>
#include <PositionContainer_LinePositionOffset2D_int32.h>
#include <PositionContainer_LinePositionOffset2D_string.h>
#include <SimpleUnion.h>

struct RouteSegment
{
    using AllocatorType = ::std::allocator<uint8_t>;

    RouteSegment() noexcept;
    explicit RouteSegment(const AllocatorType& allocator) noexcept;

    explicit RouteSegment(
        ::zserio::Bool hasEndOffset_,
        CoordShift shift_,
        ::zserio::UInt32 myOffset_,
        PositionContainer_LinePositionOffset2D_int32 container_,
        ::zserio::Vector<PositionContainer_LinePositionOffset2D_string> packedContainer_,
        ::zserio::Optional<LinePositionOffset2D> endPositionWithOffset_,
        ::zserio::Vector<::zserio::Int32> myArray_,
        BoolParamChoice myChoice_,
        SimpleUnion myUnion_) noexcept;

    ::zserio::Bool hasEndOffset;
    CoordShift shift;
    ::zserio::UInt32 myOffset;
    PositionContainer_LinePositionOffset2D_int32 container;
    ::zserio::Vector<PositionContainer_LinePositionOffset2D_string> packedContainer;
    ::zserio::Optional<LinePositionOffset2D> endPositionWithOffset;
    ::zserio::Vector<::zserio::Int32> myArray;
    BoolParamChoice myChoice;
    SimpleUnion myUnion;
};

bool operator==(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator<(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator!=(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator>(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator<=(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator>=(const RouteSegment& lhs, const RouteSegment& rhs);

namespace zserio
{

template <>
class View<RouteSegment>
{
public:
    struct ZserioPackedContainerArrayTraits
    {
        using OwnerType = View<RouteSegment>;

        static View<PositionContainer_LinePositionOffset2D_string> at(const OwnerType& owner,
                const PositionContainer_LinePositionOffset2D_string& element, size_t)
        {
            return View<PositionContainer_LinePositionOffset2D_string>(element, CoordShift(static_cast<CoordShift::ValueType>(owner.shift())));
        }

        static void read(BitStreamReader& reader,
                const OwnerType& owner, PositionContainer_LinePositionOffset2D_string& element, size_t)
        {
            (void)detail::read(reader, element, CoordShift(static_cast<CoordShift::ValueType>(owner.shift())));
        }
        static void read(detail::PackingContext<PositionContainer_LinePositionOffset2D_string>& packingContext, BitStreamReader& reader,
                const OwnerType& owner, PositionContainer_LinePositionOffset2D_string& element, size_t)
        {
            detail::read(packingContext, reader, element, CoordShift(static_cast<CoordShift::ValueType>(owner.shift())));
        }
    };

    explicit View(const RouteSegment& data) noexcept;

    ::zserio::Bool hasEndOffset() const;
    CoordShift shift() const;
    ::zserio::UInt32 myOffset() const;
    View<PositionContainer_LinePositionOffset2D_int32> container() const;
    Array<::zserio::Vector<PositionContainer_LinePositionOffset2D_string>, ArrayType::NORMAL, ZserioPackedContainerArrayTraits> packedContainer() const;
    ::zserio::Optional<View<LinePositionOffset2D>> endPositionWithOffset() const;
    Array<::zserio::Vector<::zserio::Int32>, ArrayType::NORMAL> myArray() const;
    View<BoolParamChoice> myChoice() const;
    View<SimpleUnion> myUnion() const;

private:
    const RouteSegment& m_data;
};

bool operator==(const View<RouteSegment>& lhs, const View<RouteSegment>& rhs);
bool operator<(const View<RouteSegment>& lhs, const View<RouteSegment>& rhs);
bool operator!=(const View<RouteSegment>& lhs, const View<RouteSegment>& rhs);
bool operator>(const View<RouteSegment>& lhs, const View<RouteSegment>& rhs);
bool operator<=(const View<RouteSegment>& lhs, const View<RouteSegment>& rhs);
bool operator>=(const View<RouteSegment>& lhs, const View<RouteSegment>& rhs);

namespace detail
{

template <>
void validate(const View<RouteSegment>& view);

template <>
BitSize bitSizeOf(const View<RouteSegment>& view, BitSize bitPosition);

template <>
void write(BitStreamWriter& writer, const View<RouteSegment>& view);

template <>
View<RouteSegment> read(BitStreamReader& reader, RouteSegment& data);

} // namespace detail

} // namespace zserio

namespace std
{

template <>
struct hash<RouteSegment>
{
    size_t operator()(const RouteSegment& data) const;
};

template <>
struct hash<::zserio::View<RouteSegment>>
{
    size_t operator()(const ::zserio::View<RouteSegment>& view) const;
};

} // namespace std

#endif // ROUTE_SEGMENT_H
