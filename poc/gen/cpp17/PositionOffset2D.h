/**
 * Automatically generated by Zserio C++17 generator version 0.1.0 using Zserio core 2.14.1.
 * Generator setup: stdAllocator.
 */

#ifndef POSITION_OFFSET2_D_H
#define POSITION_OFFSET2_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP17_EXTENSION_RUNTIME_VERSION_NUMBER != 1000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 0.1.0.
#endif

#include <memory>
#include <zserio/DeltaContext.h>
#include <zserio/View.h>
#include <zserio/Types.h>

#include <CoordShift.h>
#include <CoordWidth.h>
#include <DeltaLatitude.h>
#include <DeltaLongitude.h>

struct PositionOffset2D
{
    using AllocatorType = ::std::allocator<uint8_t>;

    PositionOffset2D() noexcept;
    explicit PositionOffset2D(const AllocatorType& allocator) noexcept;

    explicit PositionOffset2D(
        ::zserio::DynInt32<> deltaLongitude_,
        ::zserio::DynInt32<> deltaLatitude_) noexcept;

    ::zserio::DynInt32<> deltaLongitude;
    ::zserio::DynInt32<> deltaLatitude;
};

bool operator==(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator<(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator!=(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator>(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator<=(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator>=(const PositionOffset2D& lhs, const PositionOffset2D& rhs);

namespace zserio
{

template <>
class View<PositionOffset2D>
{
public:
    explicit View(const PositionOffset2D& data,
            CoordWidth numBits_,
            CoordShift shift_) noexcept;

    CoordWidth numBits() const;
    CoordShift shift() const;

    View<::zserio::DynInt32<>> deltaLongitude() const;
    View<::zserio::DynInt32<>> deltaLatitude() const;

    DeltaLongitude lon() const;
    DeltaLatitude lat() const;

private:
    const PositionOffset2D& m_data;
    CoordWidth m_numBits_;
    CoordShift m_shift_;
};

bool operator==(const View<PositionOffset2D>& lhs, const View<PositionOffset2D>& rhs);
bool operator<(const View<PositionOffset2D>& lhs, const View<PositionOffset2D>& rhs);
bool operator!=(const View<PositionOffset2D>& lhs, const View<PositionOffset2D>& rhs);
bool operator>(const View<PositionOffset2D>& lhs, const View<PositionOffset2D>& rhs);
bool operator<=(const View<PositionOffset2D>& lhs, const View<PositionOffset2D>& rhs);
bool operator>=(const View<PositionOffset2D>& lhs, const View<PositionOffset2D>& rhs);

namespace detail
{

template <>
void validate(const View<PositionOffset2D>& view);

template <>
BitSize bitSizeOf(const View<PositionOffset2D>& view, BitSize bitPosition);

template <>
void write(BitStreamWriter& writer, const View<PositionOffset2D>& view);

template <>
View<PositionOffset2D> read(BitStreamReader& reader, PositionOffset2D& data,
        CoordWidth numBits_,
        CoordShift shift_);

template <>
struct PackingContext<PositionOffset2D>
{
    DeltaContext deltaLongitude;
    DeltaContext deltaLatitude;
};

template <>
void initContext(PackingContext<PositionOffset2D>& packingContext, const View<PositionOffset2D>& view);

template <>
BitSize bitSizeOf(PackingContext<PositionOffset2D>& packingContext, const View<PositionOffset2D>& view,
        BitSize bitPosition);

template <>
void write(PackingContext<PositionOffset2D>& packingContext, BitStreamWriter& writer, const View<PositionOffset2D>& view);

template <>
void read(PackingContext<PositionOffset2D>& packingContext, BitStreamReader& reader, PositionOffset2D& data,
        CoordWidth numBits_,
        CoordShift shift_);

} // namespace detail

} // namespace zserio

namespace std
{

template <>
struct hash<PositionOffset2D>
{
    size_t operator()(const PositionOffset2D& data) const;
};

template <>
struct hash<::zserio::View<PositionOffset2D>>
{
    size_t operator()(const ::zserio::View<PositionOffset2D>& view) const;
};

} // namespace std

#endif // POSITION_OFFSET2_D_H
