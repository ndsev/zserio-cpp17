/**
 * Automatically generated by Zserio C++ generator version 1.0.0 using Zserio core 2.13.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#ifndef LINE_POSITION_OFFSET2_D_H
#define LINE_POSITION_OFFSET2_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 1000000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 1.0.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/ArrayTraits.h>
#include <zserio/View.h>
#include <zserio/TypeWrappers.h>

#include <CoordShift.h>
#include <CoordWidth.h>
#include <LinePosition.h>
#include <PositionOffset2D.h>

struct LinePositionOffset2D
{
    using allocator_type = ::std::allocator<uint8_t>;
    using needs_initialize_offsets = ::std::false_type;

    LinePositionOffset2D() noexcept;

    explicit LinePositionOffset2D(const allocator_type& allocator);

    LinePositionOffset2D(
        LinePosition linePosition_,
        CoordWidth numBits_,
        PositionOffset2D offset_
    );

    LinePosition linePosition;
    CoordWidth numBits;
    PositionOffset2D offset;
};

bool operator==(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator<(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator!=(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator>(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator<=(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);
bool operator>=(const LinePositionOffset2D& lhs, const LinePositionOffset2D& rhs);

namespace zserio
{

template <>
class View<LinePositionOffset2D>
{
public:
    View(const LinePositionOffset2D& data, CoordShift shift_) noexcept;

    CoordShift shift() const;

    LinePosition linePosition() const;

    CoordWidth numBits() const;

    // we need to generate this code for each compound field to transport parameters correctly
    View<PositionOffset2D> offset() const;

private:
    const LinePositionOffset2D& m_data;
    CoordShift m_shift_;
};

bool operator==(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator<(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator!=(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator>(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator<=(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);
bool operator>=(const View<LinePositionOffset2D>& lhs, const View<LinePositionOffset2D>& rhs);

namespace detail
{

void validate(const ::zserio::View<LinePositionOffset2D>& view);

void write(::zserio::BitStreamWriter& writer, const ::zserio::View<LinePositionOffset2D>& view);

View<LinePositionOffset2D> read(::zserio::BitStreamReader& reader, LinePositionOffset2D& data, CoordShift shift_, const LinePositionOffset2D::allocator_type& allocator = {});

size_t bitSizeOf(const ::zserio::View<LinePositionOffset2D>& view, size_t bitPosition);

} // namespace detail

} // namespace zserio

namespace std
{

template <>
struct hash<LinePositionOffset2D>
{
    size_t operator()(const LinePositionOffset2D& data) const;
};

template <>
struct hash<::zserio::View<LinePositionOffset2D>>
{
    size_t operator()(const ::zserio::View<LinePositionOffset2D>& view) const;
};

} // namespace std

#endif // LINE_POSITION_OFFSET2_D_H
