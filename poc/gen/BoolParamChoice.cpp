/**
 * Automatically generated by Zserio C++ generator version 1.0.1 using Zserio core 2.14.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#include "BoolParamChoice.h"

BoolParamChoice::BoolParamChoice() noexcept :
        BoolParamChoice(allocator_type())
{}

BoolParamChoice::BoolParamChoice(const allocator_type& allocator) noexcept
    //: objectChoice(allocator)
{}

bool operator==(const BoolParamChoice& lhs, const BoolParamChoice& rhs)
{
    return lhs.objectChoice == rhs.objectChoice;
}

bool operator<(const BoolParamChoice& lhs, const BoolParamChoice& rhs)
{
    return lhs.objectChoice < rhs.objectChoice;
}

bool operator!=(const BoolParamChoice& lhs, const BoolParamChoice& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const BoolParamChoice& lhs, const BoolParamChoice& rhs)
{
    return rhs < lhs;
}

bool operator<=(const BoolParamChoice& lhs, const BoolParamChoice& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const BoolParamChoice& lhs, const BoolParamChoice& rhs)
{
    return !(lhs < rhs);
}

namespace zserio
{

View<BoolParamChoice>::View(const BoolParamChoice& data,
    ::zserio::Boolean tag_) noexcept :
        m_tag_(tag_),
        m_data(data)
{}

::zserio::Boolean View<BoolParamChoice>::tag() const
{
    return m_tag_;
}

size_t View<BoolParamChoice>::index() const
{
    return m_data.objectChoice.index();
}

::zserio::Int8 View<BoolParamChoice>::valueA() const
{
    return ::std::get<::zserio::Int8>(m_data.objectChoice);
}

::zserio::Int16 View<BoolParamChoice>::valueB() const
{
    return ::std::get<::zserio::Int16>(m_data.objectChoice);
}

bool operator==(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs)
{
    if (lhs.index() != rhs.index())
        return false;

    switch (lhs.index())
    {
    case false:
        return lhs.valueA() == rhs.valueA();
    default:
        return lhs.valueB() == rhs.valueB();
    }
}

bool operator<(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs)
{
    if (lhs.index() < rhs.index())
        return true;
    if (rhs.index() < lhs.index())
        return false;

    switch (lhs.index())
    {
    case false:
        return lhs.valueA() < rhs.valueA();
    default:
        return lhs.valueB() < rhs.valueB();
    }
}

bool operator!=(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<BoolParamChoice>& lhs, const View<BoolParamChoice>& rhs)
{
    return !(lhs < rhs);
}

namespace detail
{

void validate(const View<BoolParamChoice>& view)
{
    if (static_cast<size_t>(view.tag()) != view.index())
    {
        throw ::zserio::CppRuntimeException("Write: Wrong choice variant stored for BoolParamChoice: ") <<
                static_cast<size_t>(view.tag()) << " != " <<
                view.index() << "!";
    }
}

void write(::zserio::BitStreamWriter& writer, const View<BoolParamChoice>& view)
{
    switch (view.tag())
    {
    case false:
        write(writer, view.valueA());
        break;
    default:
        write(writer, view.valueB());
        break;
    }
}

View<BoolParamChoice> read(::zserio::BitStreamReader& reader, BoolParamChoice& data, ::zserio::Boolean tag_, const BoolParamChoice::allocator_type& allocator)
{
    View<BoolParamChoice> view(data, tag_);

    switch (view.tag())
    {
    case false:
        data.objectChoice = ::zserio::Int8();
        read(reader, ::std::get<::zserio::Int8>(data.objectChoice));
        break;
    default:
        data.objectChoice = ::zserio::Int16();
        read(reader, ::std::get<::zserio::Int16>(data.objectChoice));
        break;
    }

    return view;
}

size_t bitSizeOf(const View<BoolParamChoice>& view, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (view.tag())
    {
    case false:
        endBitPosition += bitSizeOf(view.valueA(), endBitPosition);
        break;
    default:
        endBitPosition += bitSizeOf(view.valueB(), endBitPosition);
        break;
    }

    return endBitPosition - bitPosition;
}

} // namespace detail

} // namespace zserio

namespace std
{

size_t hash<BoolParamChoice>::operator()(const BoolParamChoice& data) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, data.objectChoice);
    return result;
}

size_t hash<::zserio::View<BoolParamChoice>>::operator()(const ::zserio::View<BoolParamChoice>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, view.index());

    switch (view.tag())
    {
    case false:
        result = ::zserio::calcHashCode(result, view.valueA());
        break;
    default:
        result = ::zserio::calcHashCode(result, view.valueB());
        break;
    }
    return result;
}

} // namespace std
