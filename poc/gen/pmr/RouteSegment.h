/**
 * Automatically generated by Zserio C++ generator version 1.0.0 using Zserio core 2.13.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#ifndef PMR_ROUTE_SEGMENT_H
#define PMR_ROUTE_SEGMENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 1000000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 1.0.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/ConstraintException.h>
#include <zserio/TypeWrappers.h>
#include <zserio/View.h>
#include <zserio/pmr/PolymorphicAllocator.h>

#include <pmr/CoordShift.h>
#include <pmr/LinePositionOffset2D.h>
#include <pmr/PositionContainer.h>
#include <pmr/BoolParamChoice.h>
#include <pmr/SimpleUnion.h>

namespace pmr
{

struct RouteSegment
{
    using allocator_type = ::zserio::pmr::PropagatingPolymorphicAllocator<>;
    using needs_initialize_offsets = ::std::true_type;

    RouteSegment() noexcept;

    explicit RouteSegment(const allocator_type&);

    RouteSegment(
        ::zserio::Boolean hasEndOffset_,
        CoordShift shift_,
        // myOffset is not here because it does not make any sense to set it
        PositionContainer<LinePositionOffset2D, ::zserio::Int32> container_,
        ::zserio::pmr::vector<PositionContainer<LinePositionOffset2D, ::zserio::pmr::String>> packedContainer_,
        ::zserio::InplaceOptionalHolder<LinePositionOffset2D> endPositionWithOffset_,
        ::zserio::pmr::vector<::zserio::Int32> myArray_,
        BoolParamChoice myChoice_,
        SimpleUnion myUnion_
    );

    ::zserio::Boolean hasEndOffset;
    CoordShift shift;
    // zero is invalid value, we cannot make offsets private because they are accessed from global functions
    uint32_t myOffset = 0;
    PositionContainer<LinePositionOffset2D, ::zserio::Int32> container;
    ::zserio::pmr::vector<PositionContainer<LinePositionOffset2D, ::zserio::pmr::String>> packedContainer;
    ::zserio::InplaceOptionalHolder<LinePositionOffset2D> endPositionWithOffset;
    ::zserio::pmr::vector<::zserio::Int32> myArray;
    BoolParamChoice myChoice;
    SimpleUnion myUnion;
};

bool operator==(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator<(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator!=(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator>(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator<=(const RouteSegment& lhs, const RouteSegment& rhs);
bool operator>=(const RouteSegment& lhs, const RouteSegment& rhs);

} // namespace pmr

namespace zserio
{

template <>
class View<::pmr::RouteSegment>
{
public:
    // implemented ArrayTraits due to 1) parameters transfer and 2) templated calls
    struct ZserioArrayTraits_packedContainer
        : ::zserio::ArrayTraitsBase<View, ::pmr::PositionContainer<::pmr::LinePositionOffset2D, ::zserio::pmr::String>>
    {
        static ViewType at(const OwnerType& owner, const ElementType& element, size_t index)
        {
            return ViewType(element, owner.shift());
        }

        template <typename PACKING_CONTEXT>
        static void initContext(const OwnerType& owner, PACKING_CONTEXT& packingContext, const ElementType& element, size_t index)
        {
            ::zserio::detail::initPackingContext(at(owner, element, index), packingContext);
        }
        template <typename PACKING_CONTEXT>
        static size_t bitSizeOf(const OwnerType& owner, PACKING_CONTEXT& packingContext, size_t bitPosition, const ElementType& element, size_t index)
        {
            return ::zserio::detail::bitSizeOf(at(owner, element, index), packingContext, bitPosition);
        }
        template <typename PACKING_CONTEXT>
        static void read(const OwnerType& owner, ::zserio::pmr::vector<ElementType>& array, PACKING_CONTEXT& packingContext, ::zserio::BitStreamReader& in, size_t index)
        {
            array.emplace_back(array.get_allocator());
            ::zserio::detail::read(in, packingContext, array.back(), owner.shift(), array.get_allocator());
        }
        template <typename PACKING_CONTEXT>
        static void write(const OwnerType& owner, PACKING_CONTEXT& packingContext, ::zserio::BitStreamWriter& out, ElementType element, size_t index)
        {
            ::zserio::detail::write(out, packingContext, at(owner, element, index));
        }
    };

    using ZserioArrayType_packedContainer = ::zserio::Array<::zserio::pmr::vector<::pmr::PositionContainer<::pmr::LinePositionOffset2D, ::zserio::pmr::String>>, ZserioArrayTraits_packedContainer, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_myArray = ::zserio::Array<::zserio::pmr::vector<::zserio::Int32>, ::zserio::StdTypeArrayTraits<::zserio::Int32>, ::zserio::ArrayType::NORMAL>;

    View(const ::pmr::RouteSegment& data) noexcept;

    ::zserio::Boolean hasEndOffset() const;

    ::pmr::CoordShift shift() const;

    uint32_t myOffset() const;

    ::zserio::View<::pmr::PositionContainer<::pmr::LinePositionOffset2D, ::zserio::Int32>> container() const;

    ZserioArrayType_packedContainer packedContainer() const;

    ::zserio::InplaceOptionalHolder<View<::pmr::LinePositionOffset2D>> endPositionWithOffset() const;

    ZserioArrayType_myArray myArray() const;

    View<::pmr::BoolParamChoice> myChoice() const;

    View<::pmr::SimpleUnion> myUnion() const;

private:
    const ::pmr::RouteSegment& m_data;
};

bool operator==(const View<::pmr::RouteSegment>& lhs, const View<::pmr::RouteSegment>& rhs);
bool operator<(const View<::pmr::RouteSegment>& lhs, const View<::pmr::RouteSegment>& rhs);
bool operator!=(const View<::pmr::RouteSegment>& lhs, const View<::pmr::RouteSegment>& rhs);
bool operator>(const View<::pmr::RouteSegment>& lhs, const View<::pmr::RouteSegment>& rhs);
bool operator<=(const View<::pmr::RouteSegment>& lhs, const View<::pmr::RouteSegment>& rhs);
bool operator>=(const View<::pmr::RouteSegment>& lhs, const View<::pmr::RouteSegment>& rhs);

namespace detail
{

void validate(const View<::pmr::RouteSegment>& view);

void write(::zserio::BitStreamWriter& writer, const View<::pmr::RouteSegment>& view);

View<::pmr::RouteSegment> read(::zserio::BitStreamReader& reader, ::pmr::RouteSegment& data, const ::pmr::RouteSegment::allocator_type& alloc = {});

size_t bitSizeOf(const View<::pmr::RouteSegment>& view, size_t bitPosition);

size_t initializeOffsets(::pmr::RouteSegment& data, size_t endBitPosition);

} // namespace detail

} // namespace zserio

namespace std
{

template <>
struct hash<::pmr::RouteSegment>
{
    size_t operator()(const ::pmr::RouteSegment& data) const;
};

template <>
struct hash<::zserio::View<::pmr::RouteSegment>>
{
    size_t operator()(const ::zserio::View<::pmr::RouteSegment>& view) const;
};

} // namespace std

#endif // ROUTE_SEGMENT_H
