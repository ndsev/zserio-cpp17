/**
 * Automatically generated by Zserio C++ generator version 1.0.0 using Zserio core 2.13.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#include "PositionOffset2D.h"

namespace pmr
{

PositionOffset2D::PositionOffset2D() noexcept :
            PositionOffset2D(allocator_type())
{}

PositionOffset2D::PositionOffset2D(const allocator_type&)
{}

PositionOffset2D::PositionOffset2D(
        ::zserio::DynInt32 deltaLongitude_,
        ::zserio::DynInt32 deltaLatitude_
) :
        deltaLongitude(::std::move(deltaLongitude_)),
        deltaLatitude(::std::move(deltaLatitude_))
{}

bool operator==(const PositionOffset2D& lhs, const PositionOffset2D& rhs)
{
    return ::std::tie(
            lhs.deltaLongitude,
            lhs.deltaLatitude) ==
                    ::std::tie(
                            rhs.deltaLongitude,
                            rhs.deltaLatitude);
}

bool operator<(const PositionOffset2D& lhs, const PositionOffset2D& rhs)
{
    return ::std::tie(
            lhs.deltaLongitude,
            lhs.deltaLatitude) <
                    ::std::tie(
                            rhs.deltaLongitude,
                            rhs.deltaLatitude);
}

bool operator!=(const PositionOffset2D& lhs, const PositionOffset2D& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const PositionOffset2D& lhs, const PositionOffset2D& rhs)
{
    return rhs < lhs;
}

bool operator<=(const PositionOffset2D& lhs, const PositionOffset2D& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const PositionOffset2D& lhs, const PositionOffset2D& rhs)
{
    return !(lhs < rhs);
}

} // namespace pmr

namespace zserio
{

View<::pmr::PositionOffset2D>::View(const ::pmr::PositionOffset2D& data,
        ::pmr::CoordWidth numBits_,
        ::pmr::CoordShift shift_) noexcept :
        m_numBits_(numBits_),
        m_shift_(shift_),
        m_data(data)
{}

::pmr::CoordWidth View<::pmr::PositionOffset2D>::numBits() const
{
    return m_numBits_;
}

::pmr::CoordShift View<::pmr::PositionOffset2D>::shift() const
{
    return m_shift_;
}

::zserio::DynInt32 View<::pmr::PositionOffset2D>::deltaLongitude() const
{
    return m_data.deltaLongitude;
}

::zserio::DynInt32 View<::pmr::PositionOffset2D>::deltaLatitude() const
{
    return m_data.deltaLatitude;
}

::pmr::DeltaLongitude View<::pmr::PositionOffset2D>::lon() const
{
    return static_cast<::pmr::DeltaLongitude>(m_data.deltaLongitude << m_shift_);
}

::pmr::DeltaLatitude View<::pmr::PositionOffset2D>::lat() const
{
    return static_cast<::pmr::DeltaLatitude>(m_data.deltaLatitude << m_shift_);
}

bool operator==(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs)
{
    if (&lhs != &rhs)
    {
        return
                (lhs.numBits() == rhs.numBits()) &&
                (lhs.shift() == rhs.shift()) &&
                (lhs.deltaLongitude() == rhs.deltaLongitude()) &&
                (lhs.deltaLatitude() == rhs.deltaLatitude());
    }

    return true;
}

bool operator<(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs)
{
    if (lhs.numBits() != rhs.numBits())
        return lhs.numBits() < rhs.numBits();
    if (lhs.shift() != lhs.shift())
        return lhs.shift() < lhs.shift();
    if (lhs.deltaLongitude() != rhs.deltaLongitude())
        return lhs.deltaLongitude() < rhs.deltaLongitude();
    if (lhs.deltaLatitude() != rhs.deltaLatitude())
        return lhs.deltaLatitude() < rhs.deltaLatitude();

    return false;
}

bool operator!=(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs)
{
    return !(lhs < rhs);
}


namespace detail
{

void validate(const View<::pmr::PositionOffset2D>& view)
{
    // todo: should we pass a field name to construct better error message?
    validate(view.deltaLongitude(), view.numBits() + 1);
    validate(view.deltaLatitude(), view.numBits() + 1);
}

void write(::zserio::BitStreamWriter& writer, const View<::pmr::PositionOffset2D>& view)
{
    write(writer, view.deltaLongitude(), view.numBits() + 1);
    write(writer, view.deltaLatitude(), view.numBits() + 1);
}

View<::pmr::PositionOffset2D> read(::zserio::BitStreamReader& reader, ::pmr::PositionOffset2D& data, ::pmr::CoordWidth numBits_,
        ::pmr::CoordShift shift_, const ::pmr::PositionOffset2D::allocator_type& allocator)
{
    View<::pmr::PositionOffset2D> view(data, numBits_, shift_);

    read(reader, data.deltaLongitude, view.numBits() + 1);
    read(reader, data.deltaLatitude, view.numBits() + 1);

    return view;
}

size_t bitSizeOf(const View<::pmr::PositionOffset2D>& view, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += bitSizeOf(view.deltaLongitude(), view.numBits() + 1, bitPosition);
    endBitPosition += bitSizeOf(view.deltaLatitude(), view.numBits() + 1, bitPosition);

    return endBitPosition - bitPosition;
}

} // namespace detail

} // namespace zserio

namespace std
{

size_t hash<::pmr::PositionOffset2D>::operator()(const ::pmr::PositionOffset2D& data) const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, data.deltaLongitude);
    result = ::zserio::calcHashCode(result, data.deltaLatitude);

    return result;
}

size_t hash<::zserio::View<::pmr::PositionOffset2D>>::operator()(const ::zserio::View<::pmr::PositionOffset2D>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, view.numBits());
    result = ::zserio::calcHashCode(result, view.shift());
    result = ::zserio::calcHashCode(result, view.deltaLongitude());
    result = ::zserio::calcHashCode(result, view.deltaLatitude());

    return result;
}

} // namespace std
