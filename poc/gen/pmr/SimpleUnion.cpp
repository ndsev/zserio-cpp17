/**
 * Automatically generated by Zserio C++ generator version 1.0.1 using Zserio core 2.14.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#include "SimpleUnion.h"

namespace pmr
{

SimpleUnion::SimpleUnion() noexcept :
        SimpleUnion(allocator_type())
{}

SimpleUnion::SimpleUnion(const allocator_type& allocator) noexcept
    //: objectChoice(allocator)
{}

bool operator==(const SimpleUnion& lhs, const SimpleUnion& rhs)
{
    return lhs.objectChoice == rhs.objectChoice;
}

bool operator<(const SimpleUnion& lhs, const SimpleUnion& rhs)
{
    return lhs.objectChoice < rhs.objectChoice;
}

bool operator!=(const SimpleUnion& lhs, const SimpleUnion& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const SimpleUnion& lhs, const SimpleUnion& rhs)
{
    return rhs < lhs;
}

bool operator<=(const SimpleUnion& lhs, const SimpleUnion& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const SimpleUnion& lhs, const SimpleUnion& rhs)
{
    return !(lhs < rhs);
}

}

namespace zserio
{

View<::pmr::SimpleUnion>::View(const ::pmr::SimpleUnion& data) noexcept :
        m_data(data)
{}

size_t View<::pmr::SimpleUnion>::index() const
{
    return m_data.objectChoice.index();
}

::zserio::String View<::pmr::SimpleUnion>::valueA() const
{
    return ::std::get<::zserio::String>(m_data.objectChoice);
}

::zserio::Int8 View<::pmr::SimpleUnion>::valueB() const
{
    return ::std::get<::zserio::Int8>(m_data.objectChoice);
}

bool operator==(const View<::pmr::SimpleUnion>& lhs, const View<::pmr::SimpleUnion>& rhs)
{
    if (lhs.index() != rhs.index())
        return false;

    switch (lhs.index())
    {
    case 0:
        return lhs.valueA() == rhs.valueA();
    default:
        return lhs.valueB() == rhs.valueB();
    }
}

bool operator<(const View<::pmr::SimpleUnion>& lhs, const View<::pmr::SimpleUnion>& rhs)
{
    if (lhs.index() < rhs.index())
        return true;
    if (rhs.index() < lhs.index())
        return false;

    switch (lhs.index())
    {
    case 0:
        return lhs.valueA() < rhs.valueA();
    default:
        return lhs.valueB() < rhs.valueB();
    }
}

bool operator!=(const View<::pmr::SimpleUnion>& lhs, const View<::pmr::SimpleUnion>& rhs)
{
    return !(lhs == rhs);
}

bool operator>(const View<::pmr::SimpleUnion>& lhs, const View<::pmr::SimpleUnion>& rhs)
{
    return rhs < lhs;
}

bool operator<=(const View<::pmr::SimpleUnion>& lhs, const View<::pmr::SimpleUnion>& rhs)
{
    return !(rhs < lhs);
}

bool operator>=(const View<::pmr::SimpleUnion>& lhs, const View<::pmr::SimpleUnion>& rhs)
{
    return !(lhs < rhs);
}

namespace detail
{

void validate(const View<::pmr::SimpleUnion>& view)
{
}

void write(::zserio::BitStreamWriter& writer, const View<::pmr::SimpleUnion>& view)
{
    write(writer, ::zserio::VarSize(::zserio::convertSizeToUInt32(view.index())));

    switch (view.index())
    {
    case 0:
        write(writer, view.valueA());
        break;
    default:
        write(writer, view.valueB());
        break;
    }
}

View<::pmr::SimpleUnion> read(::zserio::BitStreamReader& reader, ::pmr::SimpleUnion& data, const ::pmr::SimpleUnion::allocator_type& allocator)
{
    View<::pmr::SimpleUnion> view(data);

    ::zserio::VarSize index;
    read(reader, index);

    switch (view.index())
    {
    case 0:
        data.objectChoice = ::zserio::String();
        read(reader, ::std::get<::zserio::String>(data.objectChoice), allocator);
        break;
    default:
        data.objectChoice = ::zserio::Int8();
        read(reader, ::std::get<::zserio::Int8>(data.objectChoice));
        break;
    }

    return view;
}

size_t bitSizeOf(const View<::pmr::SimpleUnion>& view, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += bitSizeOf(::zserio::VarSize(::zserio::convertSizeToUInt32(view.index())), endBitPosition);

    switch (view.index())
    {
    case 0:
        endBitPosition += bitSizeOf(view.valueA(), endBitPosition);
        break;
    default:
        endBitPosition += bitSizeOf(view.valueB(), endBitPosition);
        break;
    }

    return endBitPosition - bitPosition;
}

} // namespace detail

} // namespace zserio

namespace std
{

size_t hash<::pmr::SimpleUnion>::operator()(const ::pmr::SimpleUnion& data) const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, data.objectChoice);
    return result;
}

size_t hash<::zserio::View<::pmr::SimpleUnion>>::operator()(const ::zserio::View<::pmr::SimpleUnion>& view) const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, view.index());

    switch (view.index())
    {
    case 0:
        result = ::zserio::calcHashCode(result, view.valueA());
        break;
    default:
        result = ::zserio::calcHashCode(result, view.valueB());
        break;
    }
    return result;
}

} // namespace std