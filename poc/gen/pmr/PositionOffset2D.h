/**
 * Automatically generated by Zserio C++ generator version 1.0.0 using Zserio core 2.13.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, stdAllocator.
 */

#ifndef PMR_POSITION_OFFSET2_D_H
#define PMR_POSITION_OFFSET2_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 1000000
    #error Version mismatch between Zserio runtime library and Zserio C++ generator!
    #error Please update your Zserio runtime library to the version 1.0.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/ArrayTraits.h>
#include <zserio/View.h>
#include <zserio/TypeWrappers.h>
#include <zserio/pmr/PolymorphicAllocator.h>

#include <pmr/CoordShift.h>
#include <pmr/CoordWidth.h>
#include <pmr/DeltaLatitude.h>
#include <pmr/DeltaLongitude.h>

namespace pmr
{

struct PositionOffset2D
{
    using allocator_type = ::zserio::pmr::PropagatingPolymorphicAllocator<>;
    using needs_initialize_offsets = ::std::false_type;

    PositionOffset2D() noexcept;

    explicit PositionOffset2D(const allocator_type&);

    PositionOffset2D(
        ::zserio::DynInt32 deltaLongitude_,
        ::zserio::DynInt32 deltaLatitude_
    );

    ::zserio::DynInt32 deltaLongitude;
    ::zserio::DynInt32 deltaLatitude;
};

bool operator==(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator<(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator!=(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator>(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator<=(const PositionOffset2D& lhs, const PositionOffset2D& rhs);
bool operator>=(const PositionOffset2D& lhs, const PositionOffset2D& rhs);

} // namespace pmr

namespace zserio
{

template <>
class View<::pmr::PositionOffset2D>
{
public:
    View(const ::pmr::PositionOffset2D& data,
        ::pmr::CoordWidth numBits_,
        ::pmr::CoordShift shift_) noexcept;

    ::pmr::CoordWidth numBits() const;

    ::pmr::CoordShift shift() const;

    ::zserio::DynInt32 deltaLongitude() const;

    ::zserio::DynInt32 deltaLatitude() const;

    ::pmr::DeltaLongitude lon() const;

    ::pmr::DeltaLatitude lat() const;

private:
    const ::pmr::PositionOffset2D& m_data;
    ::pmr::CoordWidth m_numBits_;
    ::pmr::CoordShift m_shift_;
};

bool operator==(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs);
bool operator<(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs);
bool operator!=(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs);
bool operator>(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs);
bool operator<=(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs);
bool operator>=(const View<::pmr::PositionOffset2D>& lhs, const View<::pmr::PositionOffset2D>& rhs);

namespace detail
{

void validate(const View<::pmr::PositionOffset2D>& view);

void write(::zserio::BitStreamWriter& writer, const View<::pmr::PositionOffset2D>& view);

View<::pmr::PositionOffset2D> read(::zserio::BitStreamReader& reader, ::pmr::PositionOffset2D& data, ::pmr::CoordWidth numBits_,
    ::pmr::CoordShift shift_, const ::pmr::PositionOffset2D::allocator_type& allocator = {});

size_t bitSizeOf(const View<::pmr::PositionOffset2D>& view, size_t bitPosition);

} // namespace detail

} // namespace zserio

namespace std
{

template <>
struct hash<::pmr::PositionOffset2D>
{
    size_t operator()(const ::pmr::PositionOffset2D& data) const;
};

template <>
struct hash<::zserio::View<::pmr::PositionOffset2D>>
{
    size_t operator()(const ::zserio::View<::pmr::PositionOffset2D>& view) const;
};

} // namespace std

#endif // POSITION_OFFSET2_D_H
